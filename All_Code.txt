====================================
File: index.html
====================================
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Mawidy - خدمات الحلاقة والتجميل</title>
  <link rel="stylesheet" href="css/style.css" />
  <link rel="stylesheet" href="css/dark-mode-fix.css" />
  <link rel="stylesheet" href="css/contrast-fix.css" />
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <script type="module" src="js/utils.js"></script>
</head>

<body class="home-page">
  <!-- Header -->
  <header class="header">
    <div class="container">
      <div class="nav-brand">
        <h1 class="logo">Mawidy</h1>
      </div>
      <nav class="nav-menu">
        <a href="worker_list.html" class="nav-link" tabindex="0">الحلاقين</a>
        <a href="#services" class="nav-link" tabindex="0">الخدمات</a>
        <a href="#about" class="nav-link" tabindex="0">من نحن</a>
        <a href="login.html" class="btn secondary-btn" id="login-btn" tabindex="0">تسجيل الدخول</a>
      </nav>
    </div>
  </header>

  <!-- Hero Section -->
  <section class="hero">
    <div class="container">
      <div class="hero-content">
        <h1 class="hero-title">احجز موعدك مع أفضل الحلاقين 💇‍♂️</h1>
        <p class="hero-description">
          اكتشف أفضل خدمات الحلاقة والتجميل في منطقتك. احجز موعدك بسهولة واستمتع بتجربة مميزة مع محترفين معتمدين.
        </p>
        <div class="hero-buttons">
          <a href="register.html" class="btn primary-btn">
            <i class="fas fa-rocket"></i>
            ابدأ الآن
          </a>
          <a href="worker_list.html" class="btn outline-btn">
            <i class="fas fa-users"></i>
            تصفح الحلاقين
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- Services Section -->
  <section id="services" class="services">
    <div class="container">
      <h2 class="section-title">خدماتنا</h2>
      <div class="services-grid">
        <div class="service-card">
          <div class="service-icon">
            <i class="fas fa-cut"></i>
          </div>
          <h3 class="service-title">قص الشعر</h3>
          <p class="service-description">قصات عصرية وكلاسيكية بأيدي خبراء</p>
        </div>
        
        <div class="service-card">
          <div class="service-icon">
            <i class="fas fa-spa"></i>
          </div>
          <h3 class="service-title">العناية بالوجه</h3>
          <p class="service-description">خدمات العناية والتنظيف العميق</p>
        </div>
        
        <div class="service-card">
          <div class="service-icon">
            <i class="fas fa-user-tie"></i>
          </div>
          <h3 class="service-title">تصفيف الشعر</h3>
          <p class="service-description">تسريحات مميزة للمناسبات الخاصة</p>
        </div>
      </div>
    </div>
  </section>

  <!-- Contact Section -->
  <section id="contact" class="contact-section">
    <div class="container">
      <h2>اتصل بنا</h2>
      <p>لأي استفسارات أو اقتراحات، لا تتردد في التواصل معنا عبر البريد الإلكتروني أو وسائل التواصل الاجتماعي.</p>
      <div class="contact-links">
        <a href="#" class="contact-link" aria-label="فيسبوك" tabindex="0">
          <i class="fab fa-facebook-f"></i>
        </a>
        <a href="#" class="contact-link" aria-label="تويتر" tabindex="0">
          <i class="fab fa-twitter"></i>
        </a>
        <a href="#" class="contact-link" aria-label="إنستغرام" tabindex="0">
          <i class="fab fa-instagram"></i>
        </a>
      </div>
    </div>
  </section>

  <!-- Footer -->
  <footer class="footer">
    <div class="container">
      <div class="footer-content">
        <div class="footer-brand">
          <h3 class="logo">Mawidy</h3>
          <p>منصتك المفضلة لحجز مواعيد الحلاقة والتجميل</p>
        </div>
        <div class="footer-links">
          <h4>روابط سريعة</h4>
          <a href="#services">الخدمات</a>
          <a href="#about">من نحن</a>
          <a href="#contact">اتصل بنا</a>
        </div>
      </div>
      <div class="footer-bottom">
        <p>&copy; 2024 Mawidy. جميع الحقوق محفوظة.</p>
      </div>
    </div>
  </footer>

  <script type="module" src="js/firebase-config.js"></script>
  <script type="module" src="js/auth-check.js"></script>
</body>
</html>
====================================
File: booking.html
====================================
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>حجز موعد – Mawidy</title>
  <link rel="stylesheet" href="css/style.css" />
  <link rel="stylesheet" href="css/dark-mode-fix.css" />
  <link rel="stylesheet" href="css/contrast-fix.css" />
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>

<body class="booking-page">
  <header class="header">
    <div class="container">
      <div class="nav-brand">
        <h1 class="logo">Mawidy</h1>
      </div>
      <nav class="nav-menu">
        <a href="index.html" class="nav-link">الرئيسية</a>
        <a href="worker_list.html" class="nav-link">الحلاقين</a>
        <a href="login.html" class="btn secondary-btn">تسجيل الدخول</a>
      </nav>
    </div>
  </header>

  <main class="main-content">
    <div class="responsive-container">
      <div class="page-header">
        <h1 class="page-title">احجز موعدك 💇‍♂️</h1>
        <p class="page-description">اختر الخدمة والتاريخ والوقت المناسب لك</p>
      </div>

      <!-- Worker Info Card -->
      <div class="worker-card simplified-view">
        <div class="worker-header">
          <div class="worker-avatar"></div>
          <div class="worker-info">
            <h3 id="worker-name" class="worker-name">اسم الحلاق</h3>
            <div class="worker-rating"></div>
          </div>
        </div>
      </div>

      <!-- Booking Form -->
      <div class="booking-form">
        <form id="booking-form" class="responsive-form">
          <div class="form-group">
            <label for="service" class="mobile-friendly">الخدمة</label>
            <div class="service-options" id="service-options">
              <!-- Service options will be populated by JavaScript -->
            </div>
          </div>

          <div class="form-group">
            <label for="date" class="mobile-friendly">التاريخ</label>
            <input type="date" id="date" name="date" class="form-control touch-target" required>
          </div>

          <div class="form-group">
            <label for="time" class="mobile-friendly">الوقت</label>
            <select id="time" name="time" class="form-control filter-select touch-target" required>
              <option value="">اختر الوقت...</option>
              <!-- Time slots will be populated by JavaScript -->
            </select>
          </div>

          <!-- Price Summary -->
          <div class="price-summary">
            <div class="price-row">
              <span>السعر الإجمالي:</span>
              <span class="price-amount">
                <span id="total-price">0</span> دج
              </span>
            </div>
          </div>

          <!-- Empty State -->
          <div id="empty-state" class="empty-state" style="display: none;">
            <i class="fas fa-user-slash"></i>
            <h3>لا توجد حلاقين متاحين</h3>
            <p>عذرًا، لا توجد حلاقين متاحين في الوقت الحالي للحجز</p>
            <button class="btn secondary-btn" onclick="location.reload()">
              <i class="fas fa-redo"></i>
              إعادة التحميل
            </button>
          </div>

          <button type="submit" id="confirmBooking" class="btn primary-btn touch-target">
            تأكيد الحجز
          </button>
        </form>
      </div>
    </div>
  </main>

  <script type="module" src="js/firebase-config.js"></script>
  <script type="module" src="js/booking.js"></script>
</body>
</html>
====================================
File: login.html
====================================
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>تسجيل الدخول – Mawidy</title>
  <link rel="stylesheet" href="css/style.css" />
  <link rel="stylesheet" href="css/dark-mode-fix.css" />
  <link rel="stylesheet" href="css/contrast-fix.css" />
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <script type="module" src="js/utils.js"></script>
</head>

<body>
  <div class="content-wrapper">
    <div class="login-container">
      <div class="login-card">
        <h1 class="welcome-title">مرحبًا بعودتك! 👋</h1>
        <p class="description">الرجاء إدخال بيانات الدخول للوصول إلى حسابك.</p>
        
        <form id="login-form">
          <!-- Email -->
          <div class="input-group">
            <label for="email">
              <i class="fas fa-envelope"></i>
              البريد الإلكتروني
            </label>
            <input type="email" id="email" placeholder="example@gmail.com" required aria-required="true">
          </div>
  
          <!-- Password -->
          <div class="input-group">
            <label for="password">
              <i class="fas fa-lock"></i>
              كلمة المرور
            </label>
            <input type="password" id="password" placeholder="••••••••" required aria-required="true">
            <button type="button" id="toggle-password" class="eye-toggle" aria-label="إظهار كلمة المرور">
              <i class="fas fa-eye"></i>
            </button>
          </div>
  
          <div class="forgot-password">
            <a href="#" class="forgot-link" tabindex="0">
              نسيت كلمة المرور؟
            </a>
          </div>
          
          <button type="submit" class="btn primary-btn" tabindex="0">
            تسجيل الدخول
          </button>
        </form>
  
        <div class="divider"><span>أو</span></div>
  
        <div class="social-login">
          <button class="social-btn google" aria-label="تسجيل الدخول بحساب جوجل" tabindex="0">
            <i class="fab fa-google"></i>
            <span>الدخول باستخدام Google</span>
          </button>
          <button class="social-btn facebook" aria-label="تسجيل الدخول بحساب فيسبوك" tabindex="0">
            <i class="fab fa-facebook-f"></i>
            <span>الدخول باستخدام Facebook</span>
          </button>
        </div>
        
        <div class="signup-link">
          <a href="register.html" class="signup-text" tabindex="0">
            ليس لديك حساب؟ سجل الآن
          </a>
        </div>
      </div>
    </div>
  </div>

  <script type="module" src="js/firebase-config.js"></script>
  <script type="module" src="js/login.js"></script>
  <script type="module" src="js/utils.js"></script>
</body>
</html>
====================================
File: register.html
====================================
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>إنشاء حساب – Mawidy</title>
  <link rel="stylesheet" href="css/style.css" />
  <link rel="stylesheet" href="css/dark-mode-fix.css" />
  <link rel="stylesheet" href="css/contrast-fix.css" />
  <!-- Font Awesome -->
  <link rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
        crossorigin="anonymous"
        referrerpolicy="no-referrer" />
  <script type="module" src="js/utils.js"></script>
</head>
<body>
  <div class="content-wrapper">
    <div class="login-container">
      <div class="login-card">
        <h1 class="welcome-title">انضم إلينا! 🎉</h1>
        <p class="description">الرجاء إدخال بياناتك لإنشاء حساب جديد والاستمتاع بخدماتنا المميزة.</p>
        
        <form id="register-form">
          <!-- Name -->
          <div class="input-group">
            <label for="name">
              <i class="fas fa-user"></i>
              الاسم الكامل
            </label>
            <input type="text" id="name" placeholder="اسمك الكامل" required aria-required="true">
          </div>
          
          <!-- Email -->
          <div class="input-group">
            <label for="email">
              <i class="fas fa-envelope"></i>
              البريد الإلكتروني
            </label>
            <input type="email" id="email" placeholder="بريدك الإلكتروني" required aria-required="true">
          </div>
          
          <!-- Password -->
          <div class="input-group">
            <label for="password">
              <i class="fas fa-lock"></i>
              كلمة المرور
            </label>
            <input type="password" id="password" placeholder="••••••••" required aria-required="true">
            <button type="button" class="eye-toggle" data-target="password" aria-label="إظهار كلمة المرور">
              <i class="fas fa-eye"></i>
            </button>
          </div>
          
          <!-- Confirm Password -->
          <div class="input-group">
            <label for="confirm-password">
              <i class="fas fa-shield-alt"></i>
              تأكيد كلمة المرور
            </label>
            <input type="password" id="confirm-password" placeholder="••••••••" required aria-required="true">
            <button type="button" class="eye-toggle" data-target="confirm-password" aria-label="إظهار كلمة المرور">
              <i class="fas fa-eye"></i>
            </button>
          </div>
          
          <button type="submit" class="btn primary-btn" tabindex="0">
            إنشاء الحساب
          </button>
        </form>
        
        <div class="divider"><span>أو</span></div>
        
        <div class="social-login">
          <button class="social-btn google" aria-label="تسجيل الدخول بحساب جوجل" tabindex="0">
            <i class="fab fa-google"></i>
            <span>التسجيل باستخدام Google</span>
          </button>
          <button class="social-btn facebook" aria-label="تسجيل الدخول بحساب فيسبوك" tabindex="0">
            <i class="fab fa-facebook-f"></i>
            <span>التسجيل باستخدام Facebook</span>
          </button>
        </div>
        
        <p class="login-link">
          لديك حساب بالفعل؟ <a href="login.html" tabindex="0">سجل الدخول هنا</a>
        </p>
      </div>
    </div>
  </div>

  <script type="module" src="js/firebase-config.js"></script>
  <script type="module" src="js/register.js"></script>
</body>
</html>
====================================
File: worker_dashboard.html
====================================
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>لوحة الحلاق – Mawidy</title>
  <link rel="stylesheet" href="css/style.css" />
  <link rel="stylesheet" href="css/worker_dashboard.css" />
  <link rel="stylesheet" href="css/dark-mode-fix.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <script type="module" src="js/utils.js"></script>
</head>
<body>
  <div class="container">
    <header class="dashboard-header">
      <h1 class="page-title">
        <i class="fas fa-calendar-check"></i>
        لوحة الحلاق - إدارة المواعيد
      </h1>
      <div class="header-actions">
        <button id="refresh-btn" class="btn secondary-btn">
          <i class="fas fa-sync-alt"></i>
          تحديث
        </button>
        <button id="logout-btn" class="btn danger-btn">
          <i class="fas fa-sign-out-alt"></i>
          تسجيل الخروج
        </button>
      </div>
    </header>

    <!-- إحصائيات سريعة -->
    <div class="stats-container">
      <div class="stat-card">
        <div class="stat-icon pending">
          <i class="fas fa-clock"></i>
        </div>
        <div class="stat-info">
          <h3 id="pending-count">0</h3>
          <p>بانتظار التأكيد</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon confirmed">
          <i class="fas fa-check-circle"></i>
        </div>
        <div class="stat-info">
          <h3 id="confirmed-count">0</h3>
          <p>تم التأكيد</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon rejected">
          <i class="fas fa-times-circle"></i>
        </div>
        <div class="stat-info">
          <h3 id="rejected-count">0</h3>
          <p>مرفوض</p>
        </div>
      </div>
    </div>

    <!-- فلاتر -->
    <div class="filters">
      <select id="status-filter">
        <option value="">جميع الحالات</option>
        <option value="بانتظار التأكيد">بانتظار التأكيد</option>
        <option value="تم التأكيد">تم التأكيد</option>
        <option value="مرفوض">مرفوض</option>
      </select>
      <input type="date" id="date-filter" placeholder="فلترة حسب التاريخ">
      <button id="clear-filters" class="btn secondary-btn">مسح الفلاتر</button>
    </div>

    <!-- قائمة المواعيد -->
    <div id="appointments-list" class="appointments-container">
      <div class="loading">
        <i class="fas fa-spinner fa-spin"></i>
        جارٍ تحميل المواعيد...
      </div>
    </div>
  </div>

  <!-- نافذة تأكيد -->
  <div id="confirmation-modal" class="modal" tabindex="-1">
    <div class="modal-content" role="dialog" aria-modal="true">
      <h3 id="modal-title">تأكيد العملية</h3>
      <p id="modal-message">هل أنت متأكد من هذا الإجراء؟</p>
      <div class="modal-actions">
        <button type="button" id="confirm-action" class="btn primary-btn" tabindex="0">تأكيد</button>
        <button type="button" id="cancel-action" class="btn secondary-btn" tabindex="0">إلغاء</button>
      </div>
    </div>
  </div>

  <script type="module" src="js/worker_dashboard.js"></script>
</body>
</html>
====================================
File: worker_list.html
====================================
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>قائمة الحلاقين – Mawidy</title>
  <link rel="stylesheet" href="css/style.css" />
  <link rel="stylesheet" href="css/dark-mode-fix.css" />
  <link rel="stylesheet" href="css/contrast-fix.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <script type="module" src="js/utils.js"></script>
</head>
<body class="workers-page">
  <!-- Header -->
  <header class="header">
    <div class="container">
      <div class="nav-brand">
        <h1 class="logo">Mawidy</h1>
      </div>
      <nav class="nav-menu">
        <a href="index.html" class="nav-link">الرئيسية</a>
        <a href="worker_list.html" class="nav-link active">الحلاقين</a>
        <a href="login.html" class="btn secondary-btn">تسجيل الدخول</a>
      </nav>
    </div>
  </header>

  <main class="main-content">
    <div class="responsive-container">
      <div class="page-header">
        <h1 class="page-title">الحلاقون المتاحون 💇‍♂️</h1>
        <p class="page-description">اختر الحلاق المناسب لك واحجز موعدك بسهولة</p>
      </div>

      <!-- Filters Section -->
      <div class="filters-section">
        <div class="filters-container">
          <div class="search-box">
            <i class="fas fa-search"></i>
            <input type="text" id="search-name" placeholder="ابحث بالاسم...">
            <div id="search-loading" class="loading-indicator" style="display: none;">
              <i class="fas fa-spinner fa-spin"></i>
            </div>
          </div>
          
          <div class="filter-group">
            <select id="sort-rating" class="filter-select">
              <option value="">ترتيب حسب التقييم</option>
              <option value="high">الأعلى تقييمًا</option>
              <option value="low">الأدنى تقييمًا</option>
            </select>
            
            <select id="filter-availability" class="filter-select">
              <option value="">كل الحالات</option>
              <option value="true">المتاحون فقط</option>
              <option value="false">غير المتاحين فقط</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Workers Grid -->
      <div class="workers-section">
        <div id="workers-container" class="workers-grid responsive-container">
          <!-- Workers will be loaded here by JavaScript -->
        </div>
        
        <!-- Skeleton loading will be inserted here by JavaScript -->
        
        <!-- Empty State -->
        <div id="empty-state" class="empty-state">
          <i class="fas fa-user-slash"></i>
          <h3>لا توجد حلاقين</h3>
          <p>عذرًا، لم نجد أي حلاقين متاحين في الوقت الحالي</p>
          <button class="btn secondary-btn touch-target" onclick="location.reload()">
            <i class="fas fa-redo"></i>
            إعادة التحميل
          </button>
        </div>
      </div>
    </div>
  </main>

  <script type="module" src="js/firebase-config.js"></script>
  <script type="module" src="js/worker.js"></script>
</body>
</html>
====================================
File: worker_profile.html
====================================
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>ملف الحلاق – Mawidy</title>
  <link rel="stylesheet" href="css/style.css" />
  <link rel="stylesheet" href="css/dark-mode-fix.css" />
  <link rel="stylesheet" href="css/contrast-fix.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
</head>
<body>
  <div class="profile-container">

    <!-- بطاقة الحلاق فقط -->
    <div class="card" id="profile-card">
      <img id="worker-photo" class="worker-photo" src="img/default-avatar.svg" alt="Barber" loading="lazy" />
      <h2 id="worker-name">اسم الحلاق</h2>
      <p id="worker-phone">رقم الهاتف</p>
      <p id="worker-bio" class="bio">نبذة عن الحلاق</p>
      <p id="worker-status" class="worker-status">الحالة: <span>غير متوفر</span></p>
      <div class="worker-rating-section">
        <strong>التقييم:</strong>
        <div id="worker-rating" class="rating-display-container"></div>
      </div>
      <button class="btn primary-btn book-btn" tabindex="0">
        حجز موعد
      </button>
      <div class="social-icons">
        <a href="#" class="social-icon" aria-label="فيسبوك" tabindex="0">
          <i class="fab fa-facebook-f"></i>
        </a>
        <a href="#" class="social-icon" aria-label="تويتر" tabindex="0">
          <i class="fab fa-twitter"></i>
        </a>
        <a href="#" class="social-icon" aria-label="إنستغرام" tabindex="0">
          <i class="fab fa-instagram"></i>
        </a>
      </div>
    </div>

    <!-- التقييمات -->
    <div class="reviews-section">
      <h3>التقييمات</h3>
      <div class="review-card">
        <div class="review-header">
          <span class="reviewer-name">محمد خالد</span>
          <div class="review-rating">
            <span>★</span>
            <span>★</span>
            <span>★</span>
            <span>★</span>
            <span>★</span>
          </div>
        </div>
        <p class="review-text">خدمة ممتازة، أنصح به للجميع!</p>
      </div>
      <form id="review-form">
        <textarea id="review-text" placeholder="اكتب تعليقك هنا..." required></textarea>
        <div class="rating-input-section">
          <label>اختر تقييمك:</label>
          <div id="review-rating-stars" class="rating-input-container"></div>
        </div>
        <button type="submit" class="btn primary-btn">إرسال</button>
      </form>
    </div>

  </div>

  <div id="snackbar"></div>

  <script type="module" src="js/utils.js"></script>
  <script type="module" src="js/firebase-config.js"></script>
  <script type="module" src="js/worker_profile.js"></script>
</body>
</html>

====================================
File: otp_verification.html
====================================
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>التحقق من الرمز – Mawidy</title>
  <link rel="stylesheet" href="css/style.css" />
  <link rel="stylesheet" href="css/dark-mode-fix.css" />
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <script type="module" src="js/utils.js"></script>
</head>

<body>
  <div class="content-wrapper">
    <div class="login-container">
      <div class="login-card">
        <div style="text-align: center; margin-bottom: 20px;">
          <i class="fas fa-shield-check" style="font-size: 3rem; color: var(--color-accent); margin-bottom: 16px;"></i>
        </div>
        
        <h1 class="welcome-title">التحقق من الرمز 🔐</h1>
        <p class="description">تم إرسال رمز التحقق إلى بريدك الإلكتروني. الرجاء إدخال الرمز المكون من 6 أرقام للمتابعة.</p>
        
        <form id="otp-form">
          <div class="otp-container">
            <input type="text" class="otp-input" maxlength="1" pattern="[0-9]" inputmode="numeric" aria-label="الرقم الأول من الرمز" tabindex="0" />
            <input type="text" class="otp-input" maxlength="1" pattern="[0-9]" inputmode="numeric" aria-label="الرقم الثاني من الرمز" tabindex="0" />
            <input type="text" class="otp-input" maxlength="1" pattern="[0-9]" inputmode="numeric" aria-label="الرقم الثالث من الرمز" tabindex="0" />
            <input type="text" class="otp-input" maxlength="1" pattern="[0-9]" inputmode="numeric" />
            <input type="text" class="otp-input" maxlength="1" pattern="[0-9]" inputmode="numeric" />
            <input type="text" class="otp-input" maxlength="1" pattern="[0-9]" inputmode="numeric" />
          </div>
          
          <button type="submit" class="btn primary-btn" id="verifyOtpBtn" tabindex="0">
            <i class="fas fa-check-circle" aria-hidden="true"></i>
            تأكيد الرمز
          </button>
        </form>
        
        <div class="resend-section">
          <p class="resend-text">
            <i class="fas fa-clock"></i>
            لم تستلم الرمز؟
          </p>
          <button type="button" class="resend-btn" id="resendOtpBtn" tabindex="0">
            <i class="fas fa-redo-alt" aria-hidden="true"></i>
            إعادة الإرسال
          </button>
        </div>
        
        <div class="signup-link">
          <a href="login.html" class="signup-text" tabindex="0">
            <i class="fas fa-arrow-left" aria-hidden="true"></i>
            العودة لتسجيل الدخول
          </a>
        </div>
      </div>
    </div>
  </div>

  <script type="module" src="js/firebase-config.js"></script>
  <script type="module">
    import { showModal } from './js/utils.js'; // استيراد showModal

    // Enhanced OTP Input handling
    const otpInputs = document.querySelectorAll('.otp-input');
    const resendBtn = document.getElementById('resend-otp');
    let resendTimer = 60;
    
    // OTP Input functionality
    otpInputs.forEach((input, index) => {
      input.addEventListener('input', (e) => {
        // Only allow numbers
        e.target.value = e.target.value.replace(/[^0-9]/g, '');
        
        if (e.target.value.length === 1 && index < otpInputs.length - 1) {
          otpInputs[index + 1].focus();
        }
        
        // Auto-submit when all fields are filled
        if (index === otpInputs.length - 1 && e.target.value.length === 1) {
          const allFilled = Array.from(otpInputs).every(input => input.value.length === 1);
          if (allFilled) {
            document.getElementById('otp-form').dispatchEvent(new Event('submit'));
          }
        }
      });
      
      input.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace' && e.target.value === '' && index > 0) {
          otpInputs[index - 1].focus();
        }
        
        if (e.key === 'ArrowLeft' && index > 0) {
          otpInputs[index - 1].focus();
        }
        
        if (e.key === 'ArrowRight' && index < otpInputs.length - 1) {
          otpInputs[index + 1].focus();
        }
      });
      
      input.addEventListener('paste', (e) => {
        e.preventDefault();
        const pastedData = e.clipboardData.getData('text').replace(/[^0-9]/g, '');
        
        for (let i = 0; i < Math.min(pastedData.length, otpInputs.length - index); i++) {
          otpInputs[index + i].value = pastedData[i];
        }
        
        const nextIndex = Math.min(index + pastedData.length, otpInputs.length - 1);
        otpInputs[nextIndex].focus();
      });
    });
    
    // Resend timer
    function startResendTimer() {
      resendBtn.disabled = true;
      resendBtn.innerHTML = `<i class="fas fa-clock"></i> إعادة الإرسال (${resendTimer}s)`;
      
      const timer = setInterval(() => {
        resendTimer--;
        resendBtn.innerHTML = `<i class="fas fa-clock"></i> إعادة الإرسال (${resendTimer}s)`;
        
        if (resendTimer <= 0) {
          clearInterval(timer);
          resendBtn.disabled = false;
          resendBtn.innerHTML = '<i class="fas fa-redo-alt"></i> إعادة الإرسال';
          resendTimer = 60;
        }
      }, 1000);
    }
    
    // Start timer on page load
    startResendTimer();
    
    // Resend button click
    resendBtn.addEventListener('click', () => {
      if (!resendBtn.disabled) {
        startResendTimer();
        // Add your resend logic here
        console.log('Resending OTP...');
      }
    });
    
    // Form submission
    document.getElementById('otp-form').addEventListener('submit', (e) => {
      e.preventDefault();
      const otp = Array.from(otpInputs).map(input => input.value).join('');
      
      if (otp.length === 6) {
        console.log('OTP submitted:', otp);
        // Add your verification logic here
      } else {
        showModal({
          type: 'warning',
          title: 'رمز غير كامل',
          message: 'الرجاء إدخال الرمز المكون من 6 أرقام كاملاً.',
          primaryText: 'موافق'
        });
      }
    });
    
    // Focus first input on load
    window.addEventListener('load', () => {
      otpInputs[0].focus();
    });
  </script>
</body>
</html>
====================================
File: css/style.css
====================================
/* =====================
   Mawidy Enhanced Variables
   ===================== */
:root {
  --color-primary: #2C2C2C;
  --color-secondary: #D32F2F;
  --color-accent: #FFC107;
  --color-accent-dark: #FFB300;
  --color-accent-light: #FFF350;
  --background-main: #FFF9C4;
  --background-gradient: linear-gradient(135deg, #FFF9C4 0%, #FFECB3 100%);
  --card-background: #FFFFFF;
  --card-shadow: 0 8px 32px rgba(44, 44, 44, 0.12);
  --card-shadow-hover: 0 16px 48px rgba(44, 44, 44, 0.18);
  --text-primary: #1A1A1A;
  --text-secondary: #555555; /* تحسين التباين */
  --text-muted: #777777; /* تحسين التباين */
  --color-success: #4CAF50;
  --color-warning: #FF9800;
  --color-error: #F44336;
  --border-radius: 16px;
  --border-radius-small: 8px;
  --border-radius-large: 24px;
  --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  --font-weight-light: 300;
  --font-weight-regular: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;
}


/* =====================
   Enhanced Global Styles
   ===================== */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  background: var(--background-main);
  color: var(--text-primary);
  min-height: 100vh;
  margin: 0;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  line-height: 1.6;
  font-weight: var(--font-weight-regular);
}

.content-wrapper {
  width: 100%;
  max-width: 400px;
  padding: 20px;
}

/* =====================
   Enhanced Login & General UI
   ===================== */
.login-container {
  width: 100%;
}

.login-card {
  background: var(--card-background);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  padding: 40px 32px;
  text-align: center;
  position: relative;
  overflow: hidden;
}

.login-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: var(--background-gradient);
}

.welcome-title {
  font-size: 1.75rem;
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: 8px;
  line-height: 1.2;
}

.description {
  font-size: 0.9rem;
  color: var(--text-secondary);
  margin-bottom: 32px;
  line-height: 1.5;
}

.input-group {
  position: relative;
  margin-bottom: 20px;
  display: flex;
  flex-direction: column;
  gap: 8px;
  width: 100%;
}

.input-group label {
  font-size: 0.875rem;
  font-weight: var(--font-weight-medium);
  color: var(--text-primary);
  margin-bottom: 4px;
  text-align: right;
  display: block;
}

.input-group input {
  width: 100%;
  padding: 14px 16px;
  border: 2px solid #CCCCCC; /* تحسين التباين */
  border-radius: var(--border-radius-small);
  font-size: 1rem;
  color: var(--text-primary);
  background: var(--card-background);
  transition: var(--transition);
  box-sizing: border-box;
}

.input-group input[type="password"] {
  padding-right: 48px;
}

.input-group input::placeholder {
  color: var(--text-muted);
}

.input-group input:focus {
  outline: none;
  border-color: var(--color-accent);
  box-shadow: 0 0 0 4px rgba(255, 193, 7, 0.15);
  transform: translateY(-1px);
}

.eye-toggle {
  position: absolute;
  right: 16px;
  top: 36px;
  background: none;
  border: none;
  cursor: pointer;
  color: var(--text-secondary);
  font-size: 1.1rem;
  padding: 4px;
  transition: var(--transition);
  border-radius: 4px;
}

.eye-toggle:hover {
  color: var(--color-primary);
  background: rgba(44, 44, 44, 0.1); /* تحسين التباين */
}

.forgot-link {
  font-size: 0.875rem;
  color: #000000; /* تحسين التباين مع الخلفية الصفراء */
  text-decoration: none;
  font-weight: var(--font-weight-medium);
  transition: var(--transition);
  position: relative;
  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1); /* تحسين التباين */
}

.forgot-link::after {
  content: '';
  position: absolute;
  bottom: -2px;
  left: 0;
  width: 0;
  height: 2px;
  background: #000000; /* تحسين التباين */
  transition: var(--transition);
}

.forgot-link:hover::after {
  width: 100%;
}

.forgot-link:hover {
  color: var(--color-accent-dark);
}

.btn {
  width: 100%;
  padding: 16px;
  font-size: 1rem;
  font-weight: var(--font-weight-semibold);
  border: none;
  border-radius: var(--border-radius-small);
  cursor: pointer;
  transition: var(--transition);
  margin-bottom: 24px;
  position: relative;
  overflow: hidden;
}

.btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.btn:hover::before {
  left: 100%;
}

.primary-btn {
  background: var(--color-accent);
  color: var(--color-primary);
  box-shadow: 0 4px 16px rgba(255, 193, 7, 0.3);
}

.primary-btn:hover {
  background: var(--color-accent-dark);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(255, 193, 7, 0.4);
}

.primary-btn:active {
  transform: translateY(0);
}

.social-divider {
  text-align: center;
  margin: 24px 0;
  position: relative;
  color: var(--text-secondary);
  font-size: 0.875rem;
}

.social-divider::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 0;
  right: 0;
  height: 1px;
  background: #CCCCCC;
}

.social-divider span {
  background: var(--card-background);
  padding: 0 16px;
  position: relative;
  font-weight: var(--font-weight-medium);
}

.social-login {
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin-bottom: 24px;
}

.social-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 12px;
  padding: 14px 20px;
  border-radius: var(--border-radius-small);
  font-weight: var(--font-weight-semibold);
  font-size: 1rem;
  cursor: pointer;
  transition: var(--transition);
  border: 2px solid #CCCCCC;
  background: var(--card-background);
  color: var(--text-primary);
  width: 100%;
  margin-bottom: 16px;
}

.social-btn:hover {
  transform: translateY(-2px);
  box-shadow: var(--card-shadow);
  border-color: #999999;
}

.social-btn.google i {
  color: #DB4437;
  font-size: 1.1rem;
}

.social-btn.facebook i {
  color: #1877F2;
  font-size: 1.1rem;
}

.signup-link {
  text-align: center;
  font-size: 0.9rem;
  color: var(--text-secondary);
}

.signup-text {
  color: var(--color-accent);
  text-decoration: none;
  font-weight: var(--font-weight-semibold);
  transition: var(--transition);
}

.signup-text:hover {
  color: var(--color-accent-dark);
}

/* =====================
   Enhanced OTP Verification
   ===================== */
.otp-container {
  display: flex;
  justify-content: center;
  gap: 12px;
  margin: 32px 0;
  direction: ltr;
}

.otp-input {
  width: 50px;
  height: 50px;
  border: 2px solid #E0E0E0;
  border-radius: var(--border-radius-small);
  text-align: center;
  font-size: 1.5rem;
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  background: var(--card-background);
  transition: var(--transition);
}

.otp-input:focus {
  outline: none;
  border-color: var(--color-accent);
  box-shadow: 0 0 0 4px rgba(255, 193, 7, 0.15);
  transform: scale(1.05);
}

.resend-section {
  text-align: center;
  margin: 24px 0;
}

.resend-text {
  font-size: 0.9rem;
  color: var(--text-secondary);
  margin-bottom: 8px;
}

.resend-btn {
  background: none;
  border: none;
  color: var(--color-accent);
  font-size: 0.9rem;
  font-weight: var(--font-weight-semibold);
  cursor: pointer;
  text-decoration: underline;
  transition: var(--transition);
  padding: 4px 8px;
  border-radius: 4px;
}

.resend-btn:hover {
  color: var(--color-accent-dark);
  background: rgba(255, 193, 7, 0.1);
}

.resend-btn:disabled {
  color: var(--text-muted);
  cursor: not-allowed;
  text-decoration: none;
  background: none;
}

/* =====================
   Enhanced Home Page Styles
   ===================== */
.home-page {
  background: var(--card-background);
  min-height: 100vh;
  display: block;
  align-items: unset;
  justify-content: unset;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

/* Enhanced Navigation */
.navbar {
  background: var(--card-background);
  box-shadow: var(--card-shadow);
  padding: 16px 20px;
  position: sticky;
  top: 0;
  z-index: 100;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.navbar-brand {
  font-size: 1.5rem;
  font-weight: var(--font-weight-bold);
  color: var(--color-primary);
  text-decoration: none;
  display: flex;
  align-items: center;
  gap: 8px;
}

.navbar-brand i {
  color: var(--color-accent);
}

.navbar-menu {
  display: flex;
  gap: 24px;
  align-items: center;
}

.nav-link {
  color: var(--text-primary);
  text-decoration: none;
  font-weight: var(--font-weight-medium);
  font-size: 1rem;
  transition: var(--transition);
  padding: 8px 12px;
  border-radius: var(--border-radius-small);
}

.nav-link:hover {
  background: rgba(44, 44, 44, 0.05);
  color: var(--color-primary);
}

.nav-link.active {
  background: var(--color-accent);
  color: #000000; /* Improved contrast */
  font-weight: var(--font-weight-bold);
  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1); /* Enhanced contrast */
}

.nav-link:hover {
  color: var(--color-accent);
  background: rgba(255, 193, 7, 0.1);
}

.nav-link.active {
  color: var(--color-accent);
  font-weight: var(--font-weight-semibold);
}

.secondary-btn {
  background: transparent;
  color: var(--color-primary);
  border: 2px solid var(--color-primary);
  padding: 8px 16px;
  font-size: 0.9rem;
  font-weight: var(--font-weight-medium);
}

.secondary-btn:hover {
  background: var(--color-primary);
  color: var(--card-background);
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(44, 44, 44, 0.2);
}

/* Enhanced Hero Section */
.hero {
  background: var(--background-gradient);
  padding: 100px 0;
  text-align: center;
  position: relative;
  overflow: hidden;
}

.hero::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="%23FFC107" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="%23FFC107" opacity="0.1"/><circle cx="50" cy="10" r="0.5" fill="%23FFB300" opacity="0.15"/><circle cx="10" cy="60" r="0.5" fill="%23FFB300" opacity="0.15"/><circle cx="90" cy="40" r="0.5" fill="%23FFB300" opacity="0.15"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  pointer-events: none;
}

.hero-content {
  max-width: 600px;
  margin: 0 auto;
  position: relative;
  z-index: 1;
}

.hero-title {
  font-size: 2.5rem;
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: 16px;
  line-height: 1.2;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.hero-description {
  font-size: 1.1rem;
  color: var(--text-secondary);
  margin-bottom: 32px;
  line-height: 1.6;
}

.hero-buttons {
  display: flex;
  justify-content: center;
  gap: 16px;
  flex-wrap: wrap;
}

.outline-btn {
  background: transparent;
  color: var(--color-primary);
  border: 2px solid var(--color-primary);
}

.outline-btn:hover {
  background: var(--color-primary);
  color: var(--card-background);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(44, 44, 44, 0.2);
}

/* Enhanced Services Section */
.services {
  padding: 100px 0;
  background: var(--card-background);
  position: relative;
}

.section-title {
  text-align: center;
  font-size: 2rem;
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: 48px;
  position: relative;
}

.section-title::after {
  content: '';
  position: absolute;
  bottom: -12px;
  left: 50%;
  width: 60px;
  height: 4px;
  background: var(--background-gradient);
  border-radius: 2px;
  transform: translateX(-50%);
}

.services-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 32px;
}

.service-card {
  background: var(--card-background);
  padding: 32px 24px;
  border-radius: var(--border-radius);
  text-align: center;
  transition: var(--transition);
  border: 2px solid transparent;
  position: relative;
  overflow: hidden;
}

.service-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--background-gradient);
  opacity: 0;
  transition: var(--transition);
  z-index: 0;
}

.service-card:hover::before {
  opacity: 0.05;
}

.service-card:hover {
  transform: translateY(-8px);
  box-shadow: var(--card-shadow-hover);
  border-color: var(--color-accent);
}

.service-card > * {
  position: relative;
  z-index: 1;
}

.service-icon {
  width: 64px;
  height: 64px;
  background: var(--background-gradient);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 16px;
  transition: var(--transition);
}

.service-card:hover .service-icon {
  transform: scale(1.1) rotate(5deg);
}

.service-icon i {
  font-size: 1.5rem;
  color: var(--color-primary);
}

.service-title {
  font-size: 1.25rem;
  font-weight: var(--font-weight-semibold);
  color: var(--text-primary);
  margin-bottom: 8px;
}

.service-description {
  color: var(--text-secondary);
  line-height: 1.5;
}

/* Enhanced Footer */
.footer {
  background: var(--color-primary);
  color: var(--card-background);
  padding: 48px 0 24px;
  position: relative;
}

.footer::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: var(--background-gradient);
}

.footer-content {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 32px;
  margin-bottom: 32px;
}

.footer-brand .logo {
  color: var(--color-accent);
  margin-bottom: 8px;
  font-weight: var(--font-weight-bold);
}

.footer-brand p {
  color: rgba(255, 255, 255, 0.8);
  line-height: 1.5;
}

.footer-links h4 {
  color: var(--color-accent);
  margin-bottom: 16px;
  font-size: 1.1rem;
  font-weight: var(--font-weight-semibold);
}

.footer-links a {
  display: block;
  color: rgba(255, 255, 255, 0.8);
  text-decoration: none;
  margin-bottom: 8px;
  transition: var(--transition);
  padding: 4px 0;
}

.footer-links a:hover {
  color: var(--color-accent);
  transform: translateX(4px);
}

.footer-bottom {
  border-top: 1px solid rgba(255, 255, 255, 0.2);
  padding-top: 24px;
  text-align: center;
}

.footer-bottom p {
  color: rgba(255, 255, 255, 0.6);
  font-size: 0.9rem;
}

/* =====================
   Enhanced Workers Page
   ===================== */
.workers-page {
  background: var(--background-gradient);
  min-height: 100vh;
  display: block;
  align-items: unset;
  justify-content: unset;
}

.main-content {
  padding: 40px 0;
}

.page-header {
  text-align: center;
  margin-bottom: 48px;
}

.page-title {
  font-size: 2.25rem;
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: 8px;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.page-description {
  font-size: 1.1rem;
  color: var(--text-secondary);
  max-width: 500px;
  margin: 0 auto;
}

/* Enhanced Filters Section */
.filters-section {
  background: var(--card-background);
  border-radius: var(--border-radius);
  padding: 24px;
  margin-bottom: 32px;
  box-shadow: var(--card-shadow);
  border: 2px solid transparent;
  transition: var(--transition);
}

.filters-section:hover {
  border-color: var(--color-accent);
}

.filters-container {
  display: flex;
  gap: 16px;
  align-items: center;
  flex-wrap: wrap;
}

.search-box {
  position: relative;
  flex: 1;
  min-width: 250px;
}

.search-box i {
  position: absolute;
  right: 16px;
  top: 50%;
  transform: translateY(-50%);
  color: var(--text-secondary);
  font-size: 1rem;
  transition: var(--transition);
}

.search-box input:focus + i {
  color: var(--color-accent);
}

.search-box input {
  width: 100%;
  padding: 14px 48px 14px 16px;
  border: 2px solid #E0E0E0;
  border-radius: var(--border-radius-small);
  font-size: 1rem;
  color: var(--text-primary);
  background: var(--card-background);
  transition: var(--transition);
}

.search-box input:focus {
  outline: none;
  border-color: var(--color-accent);
  box-shadow: 0 0 0 4px rgba(255, 193, 7, 0.15);
}

.filter-group {
  display: flex;
  gap: 12px;
  flex-wrap: wrap;
}

.filter-select {
  padding: 14px 16px;
  border: 2px solid #E0E0E0;
  border-radius: var(--border-radius-small);
  font-size: 0.95rem;
  color: var(--text-primary);
  background: var(--card-background);
  min-width: 180px;
  cursor: pointer;
  transition: var(--transition);
}

.filter-select:focus {
  outline: none;
  border-color: var(--color-accent);
  box-shadow: 0 0 0 4px rgba(255, 193, 7, 0.15);
}

/* Enhanced Workers Grid */
.workers-section {
  min-height: 400px;
}

.workers-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 24px;
  margin-bottom: 32px;
}

.worker-card {
  background: var(--card-background);
  border-radius: var(--border-radius);
  padding: 24px;
  box-shadow: var(--card-shadow);
  transition: var(--transition);
  cursor: pointer;
  border: 2px solid transparent;
  position: relative;
  overflow: hidden;
}

.worker-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--background-gradient);
  opacity: 0;
  transition: var(--transition);
  z-index: 0;
}

.worker-card:hover::before {
  opacity: 0.05;
}

.worker-card:hover {
  transform: translateY(-8px);
  box-shadow: var(--card-shadow-hover);
  border-color: var(--color-accent);
}

.worker-card > * {
  position: relative;
  z-index: 1;
}

.worker-header {
  display: flex;
  align-items: center;
  gap: 16px;
  margin-bottom: 16px;
}

.worker-avatar {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background: var(--background-gradient);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  color: var(--color-primary);
  font-weight: var(--font-weight-bold);
  transition: var(--transition);
  border: 3px solid transparent;
}

.worker-card:hover .worker-avatar {
  transform: scale(1.1);
  border-color: var(--color-accent);
}

.worker-info h3 {
  font-size: 1.25rem;
  font-weight: var(--font-weight-semibold);
  color: var(--text-primary);
  margin-bottom: 4px;
}

.worker-rating {
  display: flex;
  align-items: center;
  gap: 4px;
}

.stars {
  color: var(--color-accent);
  font-size: 1.1rem;
}

.rating-text {
  font-size: 0.9rem;
  color: var(--text-secondary);
  margin-right: 4px;
  font-weight: var(--font-weight-medium);
}

.worker-details {
  margin-bottom: 16px;
}

.worker-specialties {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-bottom: 12px;
}

.specialty-tag {
  background: var(--background-main);
  color: var(--text-primary);
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 0.85rem;
  font-weight: var(--font-weight-medium);
  border: 1px solid var(--color-accent);
  transition: var(--transition);
}

.specialty-tag:hover {
  background: var(--color-accent);
  color: var(--color-primary);
  transform: scale(1.05);
}

.worker-location {
  color: var(--text-secondary);
  font-size: 0.9rem;
  display: flex;
  align-items: center;
  gap: 6px;
  font-weight: var(--font-weight-medium);
}

.worker-status {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.availability-badge {
  padding: 8px 16px;
  border-radius: 20px;
  font-size: 0.85rem;
  font-weight: var(--font-weight-semibold);
  border: 2px solid;
  transition: var(--transition);
}

.available {
  background: rgba(76, 175, 80, 0.1);
  color: var(--color-success);
  border-color: var(--color-success);
}

.unavailable {
  background: rgba(211, 47, 47, 0.1);
  color: var(--color-secondary);
  border-color: var(--color-secondary);
}

.book-btn {
  background: var(--background-gradient);
  color: var(--color-primary);
  border: none;
  padding: 10px 20px;
  border-radius: var(--border-radius-small);
  font-size: 0.9rem;
  font-weight: var(--font-weight-semibold);
  cursor: pointer;
  transition: var(--transition);
  box-shadow: 0 2px 8px rgba(255, 193, 7, 0.3);
}

.book-btn:hover {
  background: var(--color-accent-dark);
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(255, 193, 7, 0.4);
}

.book-btn:disabled {
  background: #E0E0E0;
  color: var(--text-muted);
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

/* Enhanced Loading and Empty States */
.loading-state,
.empty-state {
  text-align: center;
  padding: 60px 20px;
  color: var(--text-secondary);
}

.loading-state i,
.empty-state i {
  font-size: 3rem;
  margin-bottom: 16px;
  color: var(--color-accent);
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.loading-state p,
.empty-state p {
  font-size: 1.1rem;
  margin-top: 8px;
  font-weight: var(--font-weight-medium);
}

.empty-state h3 {
  color: var(--text-primary);
  margin-bottom: 8px;
  font-weight: var(--font-weight-semibold);
}

/* =====================
   Enhanced Booking Page
   ===================== */
.booking-page {
  background: var(--background-gradient);
  min-height: 100vh;
  display: block;
  align-items: unset;
  justify-content: unset;
}

.booking-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 40px 0;
}

.booking-card {
  background: var(--card-background);
  border-radius: var(--border-radius);
  padding: 40px;
  box-shadow: var(--card-shadow);
  border: 2px solid transparent;
  position: relative;
  overflow: hidden;
}

.booking-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: var(--background-gradient);
}

.booking-header {
  text-align: center;
  margin-bottom: 40px;
}

.booking-title {
  font-size: 2rem;
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: 8px;
}

.booking-description {
  font-size: 1.1rem;
  color: var(--text-secondary);
}

/* Enhanced Worker Info Section */
.worker-info-section {
  background: var(--background-main);
  border-radius: var(--border-radius-small);
  padding: 24px;
  margin-bottom: 32px;
  border: 2px solid var(--color-accent);
  position: relative;
  overflow: hidden;
}

.worker-summary {
  display: flex;
  align-items: center;
  gap: 20px;
}

.worker-avatar-large {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: var(--background-gradient);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  color: var(--color-primary);
  font-weight: var(--font-weight-bold);
  border: 3px solid var(--color-accent);
  transition: var(--transition);
}

.worker-avatar-large:hover {
  transform: scale(1.05);
}

.worker-details h3 {
  font-size: 1.5rem;
  font-weight: var(--font-weight-semibold);
  color: var(--text-primary);
  margin-bottom: 8px;
}

.worker-meta {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
}

.worker-phone,
.worker-rating {
  display: flex;
  align-items: center;
  gap: 6px;
  color: var(--text-secondary);
  font-size: 0.95rem;
  font-weight: var(--font-weight-medium);
}

.worker-rating i {
  color: var(--color-accent);
}

/* Enhanced Form Sections */
.form-section {
  margin-bottom: 32px;
}

.section-title {
  font-size: 1.25rem;
  font-weight: var(--font-weight-semibold);
  color: var(--text-primary);
  margin-bottom: 16px;
  display: flex;
  align-items: center;
  gap: 8px;
  position: relative;
}

.section-title::after {
  content: '';
  position: absolute;
  bottom: -4px;
  left: 0;
  width: 40px;
  height: 2px;
  background: var(--color-accent);
  border-radius: 1px;
}

/* Enhanced Service Options */
.service-options {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 16px;
}

.service-option {
  cursor: pointer;
}

.service-option input[type="radio"] {
  display: none;
}

.service-card {
  background: var(--background-main);
  border: 2px solid transparent;
  border-radius: var(--border-radius-small);
  padding: 20px;
  text-align: center;
  transition: var(--transition);
  position: relative;
  overflow: hidden;
}

.service-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--background-gradient);
  opacity: 0;
  transition: var(--transition);
  z-index: 0;
}

.service-option input[type="radio"]:checked + .service-card {
  border-color: var(--color-accent);
  background: var(--card-background);
  box-shadow: var(--card-shadow);
}

.service-option input[type="radio"]:checked + .service-card::before {
  opacity: 0.1;
}

.service-card:hover {
  border-color: var(--color-accent);
  transform: translateY(-4px);
  box-shadow: var(--card-shadow);
}

.service-card > * {
  position: relative;
  z-index: 1;
}

.service-icon {
  width: 50px;
  height: 50px;
  background: var(--background-gradient);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 12px;
  transition: var(--transition);
}

.service-card:hover .service-icon {
  transform: scale(1.1) rotate(5deg);
}

.service-icon i {
  font-size: 1.25rem;
  color: var(--color-primary);
}

.service-info h4 {
  font-size: 1.1rem;
  font-weight: var(--font-weight-semibold);
  color: var(--text-primary);
  margin-bottom: 4px;
}

.service-price {
  font-size: 1rem;
  font-weight: var(--font-weight-bold);
  color: var(--color-accent);
}

/* Enhanced DateTime Selection */
.datetime-selection {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

.datetime-selection .input-group {
  margin-bottom: 0;
}

.datetime-selection select,
.datetime-selection input[type="date"] {
  padding: 14px 16px;
  border: 2px solid #E0E0E0;
  border-radius: var(--border-radius-small);
  font-size: 1rem;
  color: var(--text-primary);
  background: var(--card-background);
  transition: var(--transition);
  cursor: pointer;
}

.datetime-selection select:focus,
.datetime-selection input[type="date"]:focus {
  outline: none;
  border-color: var(--color-accent);
  box-shadow: 0 0 0 4px rgba(255, 193, 7, 0.15);
}

/* Enhanced Price Summary */
.price-summary {
  background: var(--background-gradient);
  border-radius: var(--border-radius-small);
  padding: 20px;
  margin-bottom: 32px;
  border: 2px solid var(--color-accent);
  position: relative;
  overflow: hidden;
}

.price-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 1.1rem;
}

.price-row span:first-child {
  color: var(--text-secondary);
  font-weight: var(--font-weight-medium);
}

.price-amount {
  font-size: 1.5rem;
  font-weight: var(--font-weight-bold);
  color: var(--color-primary);
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

/* Enhanced Booking Button */
.booking-btn {
  width: 100%;
  padding: 16px;
  font-size: 1.1rem;
  font-weight: var(--font-weight-semibold);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  background: var(--background-gradient);
  color: var(--color-primary);
  border: none;
  border-radius: var(--border-radius-small);
  cursor: pointer;
  transition: var(--transition);
  box-shadow: 0 4px 16px rgba(255, 193, 7, 0.3);
  position: relative;
  overflow: hidden;
}

.booking-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.booking-btn:hover::before {
  left: 100%;
}

.booking-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(255, 193, 7, 0.4);
}

.booking-btn i {
  font-size: 1.2rem;
}

/* =====================
   Enhanced Modal Styles
   ===================== */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  backdrop-filter: blur(4px);
  animation: fadeIn 0.3s ease;
  padding: 20px;
  box-sizing: border-box;
}

.modal-backdrop {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  cursor: pointer;
}

.modal-container {
  position: relative;
  max-width: 400px;
  width: 100%;
  max-height: calc(100vh - 40px);
  overflow-y: auto;
  animation: slideInScale 0.3s ease;
  margin: auto;
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal-content {
  background: var(--card-background);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow-hover);
  padding: 32px;
  text-align: center;
  position: relative;
  border: 2px solid transparent;
  width: 100%;
  max-width: 400px;
  margin: 0 auto;
  box-sizing: border-box;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.modal-icon {
  width: 64px;
  height: 64px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 20px;
  font-size: 1.8rem;
  transition: var(--transition);
}

.modal-icon.success {
  background: var(--color-success);
  color: white;
}

.modal-icon.error {
  background: var(--color-error);
  color: white;
}

.modal-icon.warning {
  background: var(--color-warning);
  color: var(--color-primary);
}

.modal-icon.info {
  background: var(--card-background);
  color: var(--color-primary);
  border: 3px solid var(--color-accent);
}

.modal-title {
  font-size: 1.5rem;
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: 12px;
  line-height: 1.3;
  word-wrap: break-word;
  overflow-wrap: break-word;
  hyphens: auto;
}

.modal-message {
  font-size: 1rem;
  color: var(--text-secondary);
  margin-bottom: 24px;
  line-height: 1.6;
  word-wrap: break-word;
  overflow-wrap: break-word;
  hyphens: auto;
  text-align: center;
}

.modal-actions {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.modal-actions.horizontal {
  flex-direction: row;
  justify-content: center;
}

.modal-btn {
  padding: 16px 24px;
  border-radius: var(--border-radius-small);
  font-size: 1rem;
  font-weight: var(--font-weight-semibold);
  cursor: pointer;
  transition: var(--transition);
  border: 2px solid;
  background: transparent;
  position: relative;
  overflow: hidden;
  min-width: 120px;
  width: 100%;
  box-sizing: border-box;
  word-wrap: break-word;
  overflow-wrap: break-word;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.modal-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.modal-btn:hover::before {
  left: 100%;
}

.modal-btn.primary {
  border-color: var(--color-accent);
  color: var(--color-primary);
}

.modal-btn.primary:hover {
  background: var(--color-accent);
  color: var(--color-primary);
  box-shadow: 0 4px 16px rgba(255, 193, 7, 0.3);
  transform: translateY(-2px);
}

.modal-btn.primary:active {
  transform: translateY(0);
}

.modal-btn.secondary {
  border-color: var(--color-primary);
  color: var(--color-primary);
}

.modal-btn.secondary:hover {
  background: var(--color-primary);
  color: var(--card-background);
  box-shadow: 0 4px 16px rgba(44, 44, 44, 0.2);
  transform: translateY(-2px);
}

.modal-btn.secondary:active {
  transform: translateY(0);
}

/* =====================
   Enhanced Animations
   ===================== */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideInScale {
  from {
    transform: scale(0.8) translateY(-20px);
    opacity: 0;
  }
  to {
    transform: scale(1) translateY(0);
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes fadeInUp {
  from {
    transform: translateY(30px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes bounce {
  0%, 20%, 53%, 80%, 100% {
    transform: translate3d(0, 0, 0);
  }
  40%, 43% {
    transform: translate3d(0, -8px, 0);
  }
  70% {
    transform: translate3d(0, -4px, 0);
  }
  90% {
    transform: translate3d(0, -2px, 0);
  }
}

.message-toast {
  animation: slideIn 0.3s ease;
}

.worker-card {
  animation: fadeInUp 0.5s ease;
}

.service-card:hover {
  animation: bounce 0.6s ease;
}

/* =====================
   Enhanced Responsive Design
   ===================== */
@media (max-width: 480px) {
  .content-wrapper {
    padding: 16px;
  }
  
  .login-card {
    padding: 32px 24px;
  }
  
  .welcome-title {
    font-size: 1.5rem;
  }
  
  .description {
    font-size: 0.85rem;
  }
  
  .otp-input {
    width: 45px;
    height: 45px;
    font-size: 1.25rem;
  }
  
  /* Modal تحسينات إضافية للهواتف */
  .modal-overlay {
    padding: 10px;
  }
  
  .modal-container {
    max-width: 100vw;
    width: 100%;
  }
  
  .modal-content {
    padding: 20px 16px;
    border-radius: 8px;
    min-height: auto;
  }
  
  .modal-icon {
    width: 48px;
    height: 48px;
    font-size: 1.3rem;
    margin-bottom: 12px;
  }
  
  .modal-title {
    font-size: 1.1rem;
    margin-bottom: 8px;
    line-height: 1.3;
  }
  
  .modal-message {
    font-size: 0.9rem;
    line-height: 1.4;
    margin-bottom: 16px;
    padding: 0;
  }
  
  .modal-btn {
    padding: 12px 16px;
    font-size: 0.9rem;
    min-height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
}

@media (max-width: 360px) {
  .login-card {
    padding: 24px 20px;
  }
  
  .welcome-title {
    font-size: 1.375rem;
  }
  
  .otp-input {
    width: 40px;
    height: 40px;
    font-size: 1rem;
  }
  
  /* Modal للشاشات الصغيرة جداً */
  .modal-overlay {
    padding: 8px;
  }
  
  .modal-content {
    padding: 16px 12px;
    border-radius: 6px;
  }
  
  .modal-icon {
    width: 40px;
    height: 40px;
    font-size: 1.1rem;
    margin-bottom: 10px;
  }
  
  .modal-title {
    font-size: 1rem;
    margin-bottom: 6px;
    line-height: 1.2;
  }
  
  .modal-message {
    font-size: 0.85rem;
    line-height: 1.3;
    margin-bottom: 14px;
  }
  
  .modal-btn {
    padding: 10px 12px;
    font-size: 0.85rem;
    min-height: 40px;
  }
  
  .modal-actions {
    gap: 8px;
  }
}

/* Home Page Responsive */
@media (max-width: 768px) {
  .nav-menu {
    gap: 16px;
  }
  
  .nav-link {
    font-size: 0.9rem;
    padding: 6px 8px;
  }
  
  .hero-title {
    font-size: 2rem;
  }
  
  .hero-description {
    font-size: 1rem;
  }
  
  .hero-buttons {
    flex-direction: column;
    align-items: center;
  }
  
  .hero-buttons .btn {
    width: 200px;
  }
  
  .services-grid {
    grid-template-columns: 1fr;
  }
  
  .footer-content {
    grid-template-columns: 1fr;
    text-align: center;
  }
}

@media (max-width: 480px) {
  .header .container {
    padding: 12px 16px;
    flex-wrap: wrap;
  }
  
  .nav-menu {
    gap: 8px;
    flex-wrap: wrap;
  }
  
  .nav-link {
    font-size: 0.85rem;
  }
  
  .secondary-btn {
    padding: 6px 12px;
    font-size: 0.85rem;
  }
  
  .hero {
    padding: 60px 0;
  }
  
  .hero-title {
    font-size: 1.75rem;
  }
  
  .services {
    padding: 60px 0;
  }
  
  .section-title {
    font-size: 1.75rem;
  }
}

/* Workers Page Responsive */
@media (max-width: 768px) {
  .filters-container {
    flex-direction: column;
    align-items: stretch;
  }
  
  .search-box {
    min-width: unset;
  }
  
  .filter-group {
    justify-content: center;
  }
  
  .workers-grid {
    grid-template-columns: 1fr;
  }
  
  .page-title {
    font-size: 1.875rem;
  }
}

@media (max-width: 480px) {
  .main-content {
    padding: 24px 0;
  }
  
  .page-header {
    margin-bottom: 32px;
  }
  
  .page-title {
    font-size: 1.625rem;
  }
  
  .filters-section {
    padding: 16px;
    margin-bottom: 24px;
  }
  
  .worker-card {
    padding: 20px;
  }
  
  .worker-header {
    gap: 12px;
  }
  
  .worker-avatar {
    width: 50px;
    height: 50px;
    font-size: 1.25rem;
  }
  
  .filter-group {
    flex-direction: column;
  }
  
  .filter-select {
    min-width: unset;
  }
  
  .social-login {
    gap: 12px;
  }
  
  .social-btn {
    padding: 12px 16px;
    font-size: 0.9rem;
  }
  
  .footer-content {
    gap: 24px;
  }
  
  .footer {
    padding: 32px 0 16px;
  }
}

/* Booking Page Responsive */
@media (max-width: 768px) {
  .booking-container {
    padding: 24px 0;
  }
  
  .booking-card {
    padding: 32px 24px;
  }
  
  .booking-title {
    font-size: 1.75rem;
  }
  
  .service-options {
    grid-template-columns: 1fr;
  }
  
  .datetime-selection {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .worker-summary {
    flex-direction: column;
    text-align: center;
    gap: 16px;
  }
  
  .worker-meta {
    justify-content: center;
  }
}

@media (max-width: 480px) {
  .booking-card {
    padding: 24px 20px;
  }
  
  .booking-title {
    font-size: 1.5rem;
  }
  
  .booking-description {
    font-size: 1rem;
  }
  
  .worker-avatar-large {
    width: 60px;
    height: 60px;
    font-size: 1.5rem;
  }
  
  .worker-details h3 {
    font-size: 1.25rem;
  }
  
  .service-card {
    padding: 16px;
  }
  
  .service-icon {
    width: 40px;
    height: 40px;
  }
  
  .service-icon i {
    font-size: 1rem;
  }
  
  .price-amount {
    font-size: 1.25rem;
  }
}

@media (max-width: 400px) {
  .container {
    padding: 0 16px;
  }
  
  .login-card {
    padding: 24px 16px;
  }
  
  /* Modal Responsive */
  .modal-overlay {
    padding: 15px;
  }
  
  .modal-container {
    width: 100%;
    max-width: 95vw;
    margin: 0;
    align-items: center;
    justify-content: center;
  }
  
  .modal-content {
    padding: 24px 20px;
    width: 100%;
    max-width: none;
    margin: 0;
    border-radius: 12px;
  }
  
  .modal-icon {
    width: 56px;
    height: 56px;
    font-size: 1.5rem;
    margin: 0 auto 16px;
  }
  
  .modal-title {
    font-size: 1.25rem;
    margin-bottom: 10px;
    line-height: 1.4;
  }
  
  .modal-message {
    font-size: 0.95rem;
    line-height: 1.5;
    margin-bottom: 20px;
    padding: 0 5px;
  }
  
  .modal-actions {
    gap: 10px;
  }
  
  .modal-btn {
    padding: 14px 20px;
    font-size: 0.95rem;
    min-width: 100px;
    white-space: normal;
    line-height: 1.3;
  }
  
  .modal-actions.horizontal {
    flex-direction: column;
    gap: 12px;
  }
  
  .modal-actions.horizontal .modal-btn {
    width: 100%;
  }
}

/* =====================
   Enhanced Profile & Reviews
   ===================== */
.profile-container {
  max-width: 700px;
  margin: 2rem auto;
  padding: 1rem;
  background: var(--background-gradient);
  font-family: inherit;
}

.card {
  text-align: center;
  background: var(--card-background);
  border-radius: var(--border-radius);
  padding: 2rem;
  box-shadow: var(--card-shadow);
  margin-bottom: 2rem;
  border: 2px solid transparent;
  transition: var(--transition);
}

.card:hover {
  border-color: var(--color-accent);
  transform: translateY(-4px);
  box-shadow: var(--card-shadow-hover);
}

.worker-photo {
  width: 140px;
  height: 140px;
  object-fit: cover;
  border-radius: 50%;
  margin-bottom: 1rem;
  border: 4px solid var(--color-accent);
  transition: var(--transition);
}

.worker-photo:hover {
  transform: scale(1.05);
}

.bio {
  color: var(--text-secondary);
  margin-bottom: 1rem;
  line-height: 1.6;
  font-weight: var(--font-weight-regular);
}

.reviews-section {
  background: var(--card-background);
  padding: 1.5rem;
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  border: 2px solid transparent;
  transition: var(--transition);
}

.reviews-section:hover {
  border-color: var(--color-accent);
}

#reviews-list {
  display: flex;
  flex-direction: column;
  gap: 18px;
  margin-bottom: 1rem;
}

.review-item {
  background: var(--card-background);
  border-radius: var(--border-radius-small);
  box-shadow: 0 4px 16px rgba(44, 44, 44, 0.08);
  padding: 18px 20px;
  display: flex;
  flex-direction: column;
  gap: 8px;
  position: relative;
  border: 2px solid transparent;
  transition: var(--transition);
}

.review-item:hover {
  border-color: var(--color-accent);
  transform: translateY(-2px);
  box-shadow: var(--card-shadow);
}

.review-header {
  display: flex;
  align-items: center;
  gap: 14px;
  margin-bottom: 4px;
}

.review-avatar {
  width: 44px;
  height: 44px;
  border-radius: 50%;
  background: var(--background-gradient);
  color: var(--color-primary);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.3rem;
  font-weight: var(--font-weight-bold);
  box-shadow: 0 2px 8px rgba(44, 44, 44, 0.1);
  transition: var(--transition);
}

.review-item:hover .review-avatar {
  transform: scale(1.1);
}

.review-user {
  font-weight: var(--font-weight-semibold);
  color: var(--color-primary);
  font-size: 1.05rem;
  display: block;
}

.review-date {
  color: var(--text-secondary);
  font-size: 0.85rem;
  margin-right: 6px;
  display: block;
  font-weight: var(--font-weight-regular);
}

.review-stars {
  margin-left: auto;
  color: var(--color-accent);
  font-size: 1.1rem;
  font-weight: var(--font-weight-bold);
  letter-spacing: 1px;
}

.review-comment {
  color: var(--text-primary);
  font-size: 1rem;
  margin-top: 2px;
  margin-bottom: 0;
  line-height: 1.6;
  font-weight: var(--font-weight-regular);
}

.edit-btn, .delete-btn {
  display: inline-block;
  margin-left: 8px;
  margin-top: 8px;
  padding: 6px 14px;
  border-radius: var(--border-radius-small);
  border: none;
  font-size: 0.95rem;
  cursor: pointer;
  transition: var(--transition);
  font-weight: var(--font-weight-medium);
}

.edit-btn {
  background: var(--color-accent);
  color: var(--color-primary);
}

.edit-btn:hover {
  background: var(--color-accent-dark);
  transform: translateY(-1px);
}

.delete-btn {
  background: var(--color-secondary);
  color: #fff;
}

.delete-btn:hover {
  background: #b71c1c;
  transform: translateY(-1px);
}

/* Enhanced Review Form */
.review-form {
  background: var(--card-background);
  padding: 20px;
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  margin-top: 20px;
  border: 2px solid transparent;
  transition: var(--transition);
}

.review-form:hover {
  border-color: var(--color-accent);
}

.review-form h4 {
  margin-bottom: 16px;
  color: var(--color-primary);
  font-size: 1.1rem;
  font-weight: var(--font-weight-semibold);
}

.review-form textarea {
  width: 100%;
  min-height: 100px;
  padding: 12px;
  border: 2px solid #E0E0E0;
  border-radius: var(--border-radius-small);
  font-family: inherit;
  font-size: 14px;
  resize: vertical;
  margin-bottom: 12px;
  transition: var(--transition);
}

.review-form textarea:focus {
  outline: none;
  border-color: var(--color-accent);
  box-shadow: 0 0 0 4px rgba(255, 193, 7, 0.15);
}

.review-form input[type="number"] {
  width: 100%;
  padding: 12px;
  border: 2px solid #E0E0E0;
  border-radius: var(--border-radius-small);
  font-size: 16px;
  margin-bottom: 16px;
  transition: var(--transition);
}

.review-form input[type="number"]:focus {
  outline: none;
}

/* =====================
   Mobile Responsive Design
   ===================== */
@media (max-width: 768px) {
  .container {
    padding: 0 16px;
  }

  .header .container {
    flex-direction: column;
    align-items: flex-start;
    gap: 16px;
  }

  .nav-menu {
    width: 100%;
    justify-content: space-between;
    flex-wrap: wrap;
  }

  .nav-link {
    flex: 1 1 45%;
    text-align: center;
    margin-bottom: 8px;
  }

  .secondary-btn {
    font-size: 0.85rem;
    padding: 6px 12px;
  }

  .hero-title {
    font-size: 2rem;
  }

  .hero-description {
    font-size: 1rem;
  }

  .services-grid {
    grid-template-columns: 1fr;
  }

  .workers-grid {
    grid-template-columns: 1fr;
    gap: 16px;
  }

  .worker-card {
    padding: 16px;
  }

  .worker-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }

  .worker-info {
    margin-top: 8px;
  }

  .filters-container {
    flex-direction: column;
    gap: 12px;
  }

  .search-box {
    width: 100%;
  }

  .filter-group {
    flex-direction: row;
    flex-wrap: wrap;
    gap: 8px;
  }

  .filter-select {
    flex: 1 1 45%;
    min-width: 45%;
  }

  .appointment-card {
    flex-direction: column;
  }

  .appointment-details {
    margin-top: 12px;
  }

  .review-card {
    padding: 12px;
  }

  .profile-section {
    padding: 16px;
  }

  .profile-form {
    gap: 16px;
  }

  .form-group {
    width: 100%;
  }

  .btn {
    font-size: 0.9rem;
    padding: 14px;
  }

  .login-card {
    padding: 32px 24px;
  }

  .welcome-title {
    font-size: 1.5rem;
  }

  .description {
    font-size: 0.85rem;
    margin-bottom: 24px;
  }

  .input-group input {
    font-size: 0.95rem;
    padding: 12px 14px;
  }

  .otp-input {
    width: 40px;
    height: 40px;
    font-size: 1.2rem;
  }

  .modal-container {
    margin: 16px;
  }

  .modal-content {
    padding: 16px;
  }

  .skeleton-card {
    padding: 12px;
  }
}

/* Touch-friendly adjustments for all screens */
.touch-friendly, 
.btn, 
input[type="submit"], 
input[type="button"], 
a.btn, 
label, 
select, 
input[type="text"], 
input[type="email"], 
input[type="password"] {
  min-height: 48px;
  touch-action: manipulation;
}

.responsive-container {
  width: 100%;
  max-width: 100%;
  padding: 0 12px;
}

.mobile-friendly {
  display: block;
  width: 100%;
  padding: 12px;
  margin: 8px 0;
}

/* Simplified view adjustments */
.simplified-view .extra-info,
.simplified-view .rating-detail,
.simplified-view .availability-status {
  display: none !important;
}

.simplified-view .worker-brief {
  font-size: 0.95rem;
}

/* Enhanced touch targets */
.touch-target {
  min-height: 48px;
  min-width: 48px;
  border-radius: var(--border-radius-small);
}

/* Responsive form elements */
.responsive-form {
  width: 100%;
  max-width: 100%;
}

.responsive-form .form-group {
  width: 100%;
  margin-bottom: 16px;
}

.responsive-form .form-control {
  width: 100%;
}

/* Responsive table adjustments */
.responsive-table {
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
}

.responsive-table table {
  min-width: 100%;
  border-collapse: collapse;
}

.responsive-table th,
.responsive-table td {
  white-space: nowrap;
  padding: 12px 8px;
}

/* Enhanced tap targets */
.tap-target {
  touch-action: manipulation;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0.1);
}

/* Mobile-specific overrides */
.mobile-only {
  display: none;
}

@media (max-width: 480px) {
  .mobile-only {
    display: block;
  }

  .desktop-only {
    display: none !important;
  }

  .mobile-friendly-large {
    padding: 16px;
  }

  .touch-target-lg {
    min-height: 56px;
    min-width: 56px;
  }

  .btn {
    font-size: 1rem;
    padding: 16px;
  }

  .input-group input {
    font-size: 1rem;
    padding: 14px 16px;
  }

  .filter-select {
    min-width: 100%;
  }

  .service-card {
    padding: 24px 16px;
  }

  .service-icon {
    width: 56px;
    height: 56px;
  }

  .footer-links h4 {
    font-size: 1rem;
  }

  .footer-links a {
    font-size: 0.9rem;
  }
}

/* Landscape phone view */
@media (min-width: 320px) and (max-width: 768px) and (orientation: landscape) {
  .hero-title {
    font-size: 2.25rem;
  }

  .section-title {
    font-size: 1.75rem;
  }

  .service-title {
    font-size: 1.1rem;
  }

  .worker-name {
    font-size: 1.25rem;
  }

  .worker-rating {
    font-size: 0.9rem;
  }

  .worker-actions button {
    font-size: 0.85rem;
    padding: 8px 12px;
  }
}

/* High contrast mode adjustments */
@media (prefers-contrast: more) {
  body {
    background: #ffffff;
    color: #000000;
  }

  .card-background {
    background: #ffffff;
  }

  .btn {
    border: 2px solid #000000;
    background: #000000;
    color: #ffffff;
  }

  .primary-btn {
    background: #000000;
    color: #ffffff;
  }
}

  border-color: var(--color-accent);
  box-shadow: 0 0 0 4px rgba(255, 193, 7, 0.15);
}

.review-form .btn {
  margin-right: 8px;
}

/* =====================
   Enhanced Loading & UI Components
   ===================== */
.spinner {
  display: inline-block;
  width: 16px;
  height: 16px;
  border: 2px solid #ffffff;
  border-radius: 50%;
  border-top-color: transparent;
  animation: spin 1s ease-in-out infinite;
  margin-left: 8px;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.btn:disabled {
  opacity: 0.7;
  cursor: not-allowed;
  transform: none !important;
}

/* Enhanced Snackbar */
#snackbar {
  visibility: hidden;
  min-width: 250px;
  margin-left: -125px;
  background-color: var(--color-primary);
  color: white;
  text-align: center;
  border-radius: var(--border-radius-small);
  padding: 16px;
  position: fixed;
  z-index: 1000;
  left: 50%;
  bottom: 30px;
  font-size: 14px;
  box-shadow: var(--card-shadow);
  transform: translateY(100px);
  opacity: 0;
  transition: var(--transition);
  font-weight: var(--font-weight-medium);
}

#snackbar.show {
  visibility: visible;
  transform: translateY(0);
  opacity: 1;
}

#snackbar.success {
  background-color: var(--color-success);
}

#snackbar.error {
  background-color: var(--color-secondary);
}

#snackbar.warning {
  background-color: var(--color-warning);
}

/* =====================
   Enhanced Worker Cards
   ===================== */
.worker-image {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 50%;
  margin-bottom: 12px;
  border: 3px solid var(--color-accent);
  cursor: pointer;
  transition: var(--transition);
}

.worker-image:hover {
  border-color: var(--color-secondary);
  transform: scale(1.05);
}

.worker-card h3 {
  margin: 0 0 8px 0;
  color: var(--color-primary);
  font-size: 1.2rem;
  font-weight: var(--font-weight-semibold);
}

.worker-card p {
  margin: 4px 0;
  color: var(--text-secondary);
  font-weight: var(--font-weight-regular);
}

.worker-rating {
  color: var(--color-accent);
  margin: 8px 0 12px 0;
  font-size: 1.1rem;
  letter-spacing: 1px;
  font-weight: var(--font-weight-bold);
}

.btn.primary-btn {
  background: var(--background-gradient);
  color: var(--color-primary);
  border: none;
  padding: 10px 20px;
  border-radius: var(--border-radius-small);
  font-size: 1rem;
  cursor: pointer;
  transition: var(--transition);
  font-weight: var(--font-weight-semibold);
  box-shadow: 0 2px 8px rgba(255, 193, 7, 0.3);
}

.btn.primary-btn:hover {
  background: var(--color-accent-dark);
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(255, 193, 7, 0.4);
}

/* =====================
   Enhanced Booking Form
   ===================== */
.booking-form {
  max-width: 500px;
  margin: 0 auto;
  padding: 30px;
  background: var(--card-background);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  border: 2px solid transparent;
  transition: var(--transition);
}

.booking-form:hover {
  border-color: var(--color-accent);
}

.booking-form h2 {
  text-align: center;
  margin-bottom: 25px;
  color: var(--color-primary);
  font-size: 24px;
  font-weight: var(--font-weight-bold);
}

.worker-info {
  background: var(--background-main);
  border-radius: var(--border-radius-small);
  padding: 15px;
  margin-bottom: 25px;
  border: 2px solid var(--color-accent);
}

.worker-summary {
  display: flex;
  align-items: center;
  gap: 15px;
}

.worker-avatar {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  object-fit: cover;
  border: 3px solid var(--color-accent);
  transition: var(--transition);
}

.worker-avatar:hover {
  transform: scale(1.05);
}

.worker-summary h4 {
  margin: 0 0 5px 0;
  color: var(--color-primary);
  font-size: 18px;
  font-weight: var(--font-weight-semibold);
}

.worker-summary p {
  margin: 2px 0;
  color: var(--text-secondary);
  font-size: 14px;
  font-weight: var(--font-weight-regular);
}

.booking-form label {
  display: block;
  margin: 15px 0 5px 0;
  font-weight: var(--font-weight-medium);
  color: var(--color-primary);
}

.booking-form input,
.booking-form select {
  width: 100%;
  padding: 12px;
  border: 2px solid #E0E0E0;
  border-radius: var(--border-radius-small);
  font-size: 16px;
  transition: var(--transition);
}

.booking-form input:focus,
.booking-form select:focus {
  outline: none;
  border-color: var(--color-accent);
  box-shadow: 0 0 0 4px rgba(255, 193, 7, 0.15);
}

.price-summary {
  background: var(--background-gradient);
  border-radius: var(--border-radius-small);
  padding: 15px;
  margin: 20px 0;
  text-align: center;
  border: 2px solid var(--color-accent);
}

.price-summary p {
  margin: 0;
  font-size: 18px;
  color: var(--color-primary);
  font-weight: var(--font-weight-medium);
}

.price-summary span {
  color: var(--color-primary);
  font-weight: var(--font-weight-bold);
  font-size: 20px;
}

.booking-form .btn-primary {
  background: var(--background-gradient);
  color: var(--color-primary);
  width: 100%;
  padding: 15px;
  font-size: 18px;
  font-weight: var(--font-weight-semibold);
  border: none;
  border-radius: var(--border-radius-small);
  cursor: pointer;
  transition: var(--transition);
  margin-top: 20px;
  box-shadow: 0 4px 16px rgba(255, 193, 7, 0.3);
}

.booking-form .btn-primary:hover:not(:disabled) {
  background: var(--color-accent-dark);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(255, 193, 7, 0.4);
}

.booking-form .btn:disabled {
  background: #E0E0E0;
  color: var(--text-muted);
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

/* =====================
   Enhanced Mobile Responsiveness
   ===================== */
@media (max-width: 768px) {
  #snackbar {
    min-width: 90%;
    margin-left: -45%;
    font-size: 13px;
    padding: 12px;
  }
  
  .review-form {
    padding: 16px;
  }
  
  .review-form textarea {
    min-height: 80px;
  }
  
  .booking-form {
    margin: 10px;
    padding: 20px;
  }
  
  .worker-summary {
    flex-direction: column;
    text-align: center;
  }
  
  .worker-avatar {
    width: 80px;
    height: 80px;
  }
}

/* =====================
   Loading Indicator Styles
   ===================== */

/* Loading Spinner Animation */
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

/* Enhanced Loading Spinner - Inspired by Uiverse Design */
.loading-spinner {
  display: inline-block;
  width: 20px;
  height: 20px;
  margin-right: 12px;
  flex-shrink: 0;
  vertical-align: middle;
}

.loading-spinner svg {
  width: 100%;
  height: 100%;
  animation: spin 1s linear infinite;
}

.loading-spinner .spinner-circle {
  opacity: 0.25;
  stroke: currentColor;
  stroke-width: 4;
  fill: none;
}

.loading-spinner .spinner-path {
  opacity: 0.75;
  fill: currentColor;
}

.loading-spinner.large {
  width: 32px;
  height: 32px;
  border-width: 3px;
}

.loading-spinner.small {
  width: 16px;
  height: 16px;
  border-width: 2px;
  margin-right: 6px;
}

/* Enhanced Loading Button States */
.btn.loading {
  position: relative;
  pointer-events: none;
  cursor: not-allowed;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  transform: scale(1.02);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.btn.loading:hover {
  transform: none;
  box-shadow: var(--card-shadow);
}

.btn.loading .btn-text {
  opacity: 0.7;
}

/* Primary Button Loading - Gradient Style */
.primary-btn.loading {
  background: linear-gradient(135deg, var(--color-secondary) 0%, #B71C1C 100%);
  color: white;
  font-weight: bold;
  animation: pulse 2s ease-in-out infinite;
}

.primary-btn.loading .loading-spinner svg {
  color: white;
}

/* Secondary Button Loading - Accent Gradient */
.secondary-btn.loading {
  background: linear-gradient(135deg, var(--color-accent) 0%, #FFD54F 100%);
  color: var(--color-primary);
  font-weight: bold;
  animation: pulse 2s ease-in-out infinite;
}

.secondary-btn.loading .loading-spinner svg {
  color: var(--color-primary);
}

/* Edit Button Loading - Blue Gradient */
.edit-btn.loading {
  background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
  color: white;
  font-weight: bold;
  animation: pulse 2s ease-in-out infinite;
}

.edit-btn.loading .loading-spinner svg {
  color: white;
}

/* Delete Button Loading - Red Gradient */
.delete-btn.loading {
  background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
  color: white;
  font-weight: bold;
  animation: pulse 2s ease-in-out infinite;
}

.delete-btn.loading .loading-spinner svg {
  color: white;
}

/* Enhanced Loading States - Inspired by Uiverse */
.loading-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 40px 20px;
  text-align: center;
  color: var(--text-secondary);
  gap: 1rem;
}

.loading-state .dual-spinner {
  width: 80px;
  height: 80px;
  border: 4px solid transparent;
  border-top: 4px solid var(--color-secondary);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: spin 1s linear infinite;
}

.loading-state .dual-spinner .inner-spinner {
  width: 64px;
  height: 64px;
  border: 4px solid transparent;
  border-top: 4px solid var(--color-accent);
  border-radius: 50%;
  animation: spin 1.5s linear infinite reverse;
}

.loading-state p {
  font-size: 16px;
  font-weight: var(--font-weight-medium);
  margin: 0;
}

/* Skeleton Loading for Cards */
.skeleton {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
}

@keyframes loading {
  0% { background-position: 200% 0; }
  100% { background-position: -200% 0; }
}

.skeleton-card {
  background: var(--card-background);
  border-radius: var(--border-radius);
  padding: 20px;
  margin-bottom: 16px;
  box-shadow: var(--card-shadow);
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  min-height: 280px;
  position: relative;
}

.skeleton-avatar {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  margin-bottom: 12px;
}

.skeleton-text {
  height: 16px;
  border-radius: 4px;
  margin-bottom: 8px;
}

/* Empty State Styling */
.empty-state {
  text-align: center;
  padding: 60px 20px;
  color: var(--text-secondary);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 400px;
  border-radius: 12px;
  background-color: var(--background-light);
}

.empty-state i {
  font-size: 5rem;
  margin-bottom: 16px;
  color: var(--text-muted);
}

.empty-state h3 {
  margin: 0 0 12px 0;
  font-size: 1.5rem;
  color: var(--text-primary);
}

.empty-state p {
  margin-bottom: 24px;
  max-width: 400px;
  color: var(--text-secondary);
}

.empty-state .btn {
  margin-top: 16px;
  padding: 10px 24px;
  display: inline-flex;
  align-items: center;
  gap: 8px;
}


.skeleton-text.title {
  height: 20px;
  width: 70%;
}

.skeleton-text.subtitle {
  height: 14px;
  width: 50%;
}

.skeleton-text.content {
  height: 16px;
  width: 90%;
}

/* Loading Overlay */
.loading-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  backdrop-filter: blur(4px);
}

.loading-overlay .loading-content {
  background: var(--card-background);
  padding: 32px;
  border-radius: var(--border-radius-large);
  box-shadow: var(--card-shadow-hover);
  text-align: center;
  max-width: 300px;
}

.loading-overlay .loading-spinner.large {
  margin-bottom: 16px;
  border-top-color: var(--color-secondary);
  border-right-color: rgba(211, 47, 47, 0.3);
}

.loading-overlay h3 {
  color: var(--text-primary);
  font-size: 18px;
  font-weight: var(--font-weight-semibold);
  margin-bottom: 8px;
}

.loading-overlay p {
  color: var(--text-secondary);
  font-size: 14px;
  margin: 0;
}

/* Responsive Loading Styles */
@media (max-width: 768px) {
  .loading-spinner {
    width: 18px;
    height: 18px;
  }
  
  .loading-spinner.large {
    width: 28px;
    height: 28px;
  }
  
  .loading-state {
    padding: 30px 15px;
  }
  
  .loading-overlay .loading-content {
    margin: 20px;
    padding: 24px;
  }
}

/* Enhanced Rating Stars - Inspired by Uiverse */
.rating {
  display: flex;
  flex-direction: row-reverse;
  gap: 0.3rem;
  --stroke: #666;
  --fill: var(--color-accent);
}

.rating input {
  appearance: unset;
  display: none;
}

.rating label {
  cursor: pointer;
}

.rating svg {
  width: 2rem;
  height: 2rem;
  overflow: visible;
  fill: transparent;
  stroke: var(--stroke);
  stroke-linejoin: bevel;
  stroke-dasharray: 12;
  animation: idle 4s linear infinite;
  transition: stroke 0.2s, fill 0.5s;
}

@keyframes idle {
  from {
    stroke-dashoffset: 24;
  }
}

.rating label:hover svg {
  stroke: var(--fill);
}

.rating input:checked ~ label svg {
  transition: 0s;
  animation: idle 4s linear infinite, yippee 0.75s backwards;
  fill: var(--fill);
  stroke: var(--fill);
  stroke-opacity: 0;
  stroke-dasharray: 0;
  stroke-linejoin: miter;
  stroke-width: 8px;
}

@keyframes yippee {
  0% {
    transform: scale(1);
    fill: var(--fill);
    fill-opacity: 0;
    stroke-opacity: 1;
    stroke: var(--stroke);
    stroke-dasharray: 10;
    stroke-width: 1px;
    stroke-linejoin: bevel;
  }
  30% {
    transform: scale(0);
    fill: var(--fill);
    fill-opacity: 0;
    stroke-opacity: 1;
    stroke: var(--stroke);
    stroke-dasharray: 10;
    stroke-width: 1px;
    stroke-linejoin: bevel;
  }
  30.1% {
    stroke: var(--fill);
    stroke-dasharray: 0;
    stroke-linejoin: miter;
    stroke-width: 8px;
  }
  60% {
    transform: scale(1.2);
    fill: var(--fill);
  }
}

/* Rating Display (Read-only) */
.rating-display {
  display: flex;
  gap: 0.2rem;
  align-items: center;
}

.rating-display .star {
  width: 1.2rem;
  height: 1.2rem;
  fill: var(--color-accent);
  color: var(--color-accent);
}

.rating-display .star.empty {
  fill: #e0e0e0;
  color: #e0e0e0;
}

/* Modal Styles - Inspired by Uiverse */
.modal-overlay {
  position: fixed;
  inset: 0;
  width: 100%;
  height: 100%;
  z-index: 1000;
}

.modal-backdrop {
  position: fixed;
  inset: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.4);
  backdrop-filter: blur(2px);
}

.modal-container {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  max-width: 32rem;
  margin: 0 1rem;
  z-index: 1001;
}

.modal-content {
  background: white;
  border-radius: 0.75rem;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  padding: 1.5rem;
  animation: modalSlideIn 0.3s ease-out;
}

@keyframes modalSlideIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.modal-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 3rem;
  height: 3rem;
  margin: 0 auto;
  border-radius: 50%;
  margin-bottom: 1rem;
}

.modal-icon.success {
  background: #dcfce7;
  color: #16a34a;
}

.modal-icon.error {
  background: #fef2f2;
  color: #dc2626;
}

.modal-icon.warning {
  background: #fefce8;
  color: #ca8a04;
}

.modal-icon.info {
  background: #dbeafe;
  color: #2563eb;
}

.modal-title {
  font-size: 1.125rem;
  font-weight: 500;
  color: var(--color-primary);
  text-align: center;
  margin-bottom: 0.75rem;
}

.modal-message {
  font-size: 0.875rem;
  line-height: 1.5;
  text-align: center;
  color: var(--text-secondary);
  margin-bottom: 1.5rem;
}

.modal-actions {
  display: flex;
  gap: 0.5rem;
  flex-direction: column;
}

.modal-actions.horizontal {
  flex-direction: row;
}

.modal-btn {
  width: 100%;
  padding: 0.625rem 1rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  border: none;
  outline: none;
}

.modal-btn.primary {
  background: var(--color-secondary);
  color: white;
}

.modal-btn.primary:hover {
  background: #b71c1c;
}

.modal-btn.secondary {
  background: transparent;
  color: var(--color-primary);
  border: 1px solid #d1d5db;
}

.modal-btn.secondary:hover {
  background: #f9fafb;
}

/* Rating Input Section Styles */
.rating-input-section {
  margin: 15px 0;
}

.rating-input-section label {
  display: block;
  margin-bottom: 10px;
  font-weight: 500;
  color: var(--color-primary);
}

.rating-input-container {
  display: flex;
  justify-content: center;
  margin: 10px 0;
}

.worker-rating-section {
  display: flex;
  align-items: center;
  gap: 10px;
  margin: 10px 0;
}

.rating-display-container {
  display: flex;
  align-items: center;
  gap: 5px;
}

/* Enhanced Skeleton Loading Styles */
.skeleton-card {
  background: var(--card-bg);
  border-radius: 12px;
  padding: 20px;
  margin-bottom: 20px;
  border: 1px solid var(--border-color);
  animation: skeleton-pulse 1.5s ease-in-out infinite alternate;
}

.skeleton-line {
  height: 16px;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  border-radius: 4px;
  margin: 8px 0;
  animation: skeleton-shimmer 1.5s infinite;
}

.skeleton-avatar {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  animation: skeleton-shimmer 1.5s infinite;
}

.skeleton-avatar-large {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  animation: skeleton-shimmer 1.5s infinite;
  margin: 0 auto 20px;
}

.skeleton-button {
  height: 40px;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  border-radius: 8px;
  margin: 10px 5px;
  animation: skeleton-shimmer 1.5s infinite;
}

.skeleton-button-large {
  height: 48px;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  border-radius: 8px;
  margin: 15px 0;
  animation: skeleton-shimmer 1.5s infinite;
}

/* Specific skeleton sizes */
.skeleton-name { width: 70%; }
.skeleton-name-large { width: 60%; height: 24px; }
.skeleton-rating { width: 40%; }
.skeleton-specialty { width: 80%; }
.skeleton-phone { width: 60%; }
.skeleton-status { width: 50%; }
.skeleton-bio { width: 90%; }
.skeleton-client-name { width: 65%; }
.skeleton-service { width: 75%; }
.skeleton-date { width: 45%; }
.skeleton-time { width: 35%; }
.skeleton-reviewer-name { width: 55%; }
.skeleton-comment { width: 95%; height: 20px; }

/* Profile skeleton layout */
.profile-skeleton {
  text-align: center;
  padding: 30px;
}

.skeleton-info {
  max-width: 400px;
  margin: 0 auto;
}

/* Skeleton animations */
@keyframes skeleton-shimmer {
}

/* Focus Styles */
:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(3, 142, 255, 0.6);
}

/* Accessibility focus styles */
.btn:focus,
button:focus,
a:focus,
input:focus,
textarea:focus,
select:focus,
[tabindex="0"]:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(3, 142, 255, 0.6);
  z-index: 1;
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  visibility: hidden;
  opacity: 0;
  transition: all 0.3s ease;
}

.modal-container {
  background-color: #ffffff;
  border-radius: 8px;
  padding: 20px;
  position: relative;
  max-width: 500px;
  width: 90%;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  transform: scale(0.95);
  transition: all 0.3s ease;
}

.modal-backdrop {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.modal-content {
  position: relative;
}

.modal-close-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  z-index: 2;
}

.modal-icon {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  margin: 0 auto 15px;
}

.modal-icon.success {
  background-color: #d4edda;
  color: #155724;
}

.modal-icon.error {
  background-color: #f8d7da;
  color: #721c24;
}

.modal-icon.warning {
  background-color: #fff3cd;
  color: #856404;
}

.modal-icon.info {
  background-color: #d1ecf1;
  color: #0c5460;
}

.modal-title {
  text-align: center;
  margin-bottom: 10px;
}

.modal-message {
  text-align: center;
  margin-bottom: 20px;
}

.modal-actions {
  display: flex;
  justify-content: center;
  gap: 10px;
  margin-top: 20px;
}

.modal-actions.horizontal {
  flex-direction: row;
}

.modal-btn {
  padding: 10px 20px;
  font-size: 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.modal-btn.primary {
  background-color: #037aff;
  color: white;
}

.modal-btn.secondary {
  background-color: #e0e0e0;
  color: #333;
}

.modal-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

/* Loading State */
.loading-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 40px;
  text-align: center;
}

.dual-spinner {
  width: 40px;
  height: 40px;
  position: relative;
  margin: 20px 0;
}

.inner-spinner {
  width: 100%;
  height: 100%;
  border: 4px solid #eee;
  border-top: 4px solid #037aff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  position: absolute;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

.skeleton-card {
  background-color: #f5f5f5;
  border-radius: 8px;
}

/* User Message Styles */
.user-message {
  position: fixed;
  bottom: 20px;
  right: 20px;
  max-width: 400px;
  padding: 16px 24px;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  animation: slideIn 0.3s ease-out;
  transition: opacity 0.3s ease-out;
}

.user-message.success {
  background-color: #d4edda;
  color: #155724;
}

.user-message.error {
  background-color: #f8d7da;
  color: #721c24;
}

.user-message.warning {
  background-color: #fff3cd;
  color: #856404;
}

.user-message.info {
  background-color: #d1ecf1;
  color: #0c5460;
}

.user-message .message-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.user-message .message-title {
  margin: 0;
  font-size: 1.1em;
  font-weight: 600;
}

.user-message .message-content {
  margin: 8px 0 0;
  font-size: 0.95em;
}

.user-message .message-close-btn {
  position: absolute;
  top: 8px;
  left: 12px;
  background: none;
  border: none;
  font-size: 1.2em;
  cursor: pointer;
  color: inherit;
  transition: transform 0.2s ease;
}

.user-message .message-close-btn:hover {
  transform: scale(1.1);
}

@keyframes slideIn {
  from { transform: translateX(100%); opacity: 0; }
  to { transform: translateX(0); opacity: 1; }
}

@keyframes fadeOut {
  from { opacity: 1; }
  to { opacity: 0; }
}

.user-message.fade-out {
  animation: fadeOut 0.3s ease-in-out;
}

  padding: 20px;
  margin-bottom: 20px;
  animation: pulse 2s infinite;
}

.skeleton {
  background-color: #e0e0e0;
  border-radius: 4px;
  display: inline-block;
  position: relative;
  overflow: hidden;
}

.skeleton::after {
  content: '';
  position: absolute;
  top: 0;
  left: -50%;
  width: 50%;
  height: 100%;
  background: linear-gradient(
    to right,
    transparent 0%,
    rgba(255, 255, 255, 0.5) 50%,
    transparent 100%
  );
  animation: skeleton-loading 1.5s infinite;
}

@keyframes skeleton-loading {
  0% {
    left: -50%;
  }
  50% {
    left: 100%;
  }
  100% {
    left: 100%;
  }
}

@keyframes pulse {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}

/* Button loading state */
.btn.loading {
  position: relative;
  overflow: hidden;
}

.loading-spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 20px;
  height: 20px;
  display: inline-block;
}

.spinner-circle {
  stroke: #ffffff;
}

.spinner-path {
  fill: #ffffff;
}

.btn-text {
  vertical-align: middle;
}

/* Snackbar styles (not used in current implementation) */
.snackbar {
  visibility: hidden;
  min-width: 250px;
  margin-left: -125px;
  background-color: #333;
  color: #fff;
  text-align: center;
  border-radius: 4px;
  padding: 16px;
  position: fixed;
  z-index: 9999;
  left: 50%;
  bottom: 30px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.snackbar.show {
  visibility: visible;
  opacity: 1;
}

.snackbar.success {
  background-color: #28a745;
}

.snackbar.error {
  background-color: #dc3545;
}

.snackbar.warning {
  background-color: #ffc107;
}

.snackbar.default {
  background-color: #037aff;
}

  0% {
    background-position: -200px 0;
  }
  100% {
    background-position: calc(200px + 100%) 0;
  }
}

@keyframes skeleton-pulse {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0.7;
  }
}

/* Dark mode skeleton */
[data-theme="dark"] .skeleton-line,
[data-theme="dark"] .skeleton-avatar,
[data-theme="dark"] .skeleton-avatar-large,
[data-theme="dark"] .skeleton-button,
[data-theme="dark"] .skeleton-button-large {
  background: linear-gradient(90deg, #2a2a2a 25%, #3a3a3a 50%, #2a2a2a 75%);
}

[data-theme="dark"] .skeleton-card {
  background: var(--card-bg);
  border-color: var(--border-color);
}


====================================
File: css/dark-mode-fix.css
====================================
/* =====================
   Enhanced Dark Mode Support - إصلاح مشاكل الرؤية
   ===================== */
@media (prefers-color-scheme: dark) {
  :root {
    --color-primary: #E0E0E0;
    --color-secondary: #FF5252;
    --color-accent: #FFD54F;
    --color-accent-dark: #FFC107;
    --color-accent-light: #FFF176;
    --background-main: #1A1A1A;
    --background-gradient: linear-gradient(135deg, #1A1A1A 0%, #2D2D2D 100%);
    --card-background: #2D2D2D;
    --card-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
    --card-shadow-hover: 0 16px 48px rgba(0, 0, 0, 0.6);
    --text-primary: #FFFFFF;
    --text-secondary: #B0B0B0;
    --text-muted: #808080;
    --color-success: #66BB6A;
    --color-warning: #FFA726;
    --color-error: #EF5350;
  }
  
  /* إصلاح الأزرار في الوضع المظلم */
  .btn.primary-btn {
    color: var(--color-primary) !important;
    border: 2px solid var(--color-accent) !important;
  }
  
  .btn.primary-btn:hover {
    background: var(--color-accent-dark) !important;
    color: var(--color-primary) !important;
    box-shadow: 0 8px 24px rgba(255, 213, 79, 0.4) !important;
  }
  
  .btn.secondary-btn {
    background: transparent !important;
    color: var(--color-accent) !important;
    border: 2px solid var(--color-accent) !important;
  }
  
  .btn.secondary-btn:hover {
    background: var(--color-accent) !important;
    color: var(--color-primary) !important;
  }
  
  .btn.outline-btn {
    background: transparent !important;
    color: var(--color-accent) !important;
    border: 2px solid var(--color-accent) !important;
  }
  
  .btn.outline-btn:hover {
    background: var(--color-accent) !important;
    color: var(--color-primary) !important;
  }
  
  /* إصلاح الروابط */
  .nav-link {
    color: var(--text-primary) !important;
  }
  
  .nav-link:hover,
  .nav-link.active {
    color: var(--color-accent) !important;
  }
  
  .forgot-link,
  .signup-text {
    color: var(--color-accent) !important;
  }
  
  .forgot-link:hover,
  .signup-text:hover {
    color: var(--color-accent-light) !important;
  }
  
  /* إصلاح حقول الإدخال */
  .input-group input,
  .filter-select,
  .datetime-selection select,
  .datetime-selection input[type="date"],
  .search-box input {
    background: var(--card-background) !important;
    color: var(--text-primary) !important;
    border-color: #404040 !important;
  }
  
  .input-group input:focus,
  .filter-select:focus,
  .datetime-selection select:focus,
  .datetime-selection input[type="date"]:focus,
  .search-box input:focus {
    border-color: var(--color-accent) !important;
    box-shadow: 0 0 0 4px rgba(255, 213, 79, 0.15) !important;
  }
  
  .input-group input::placeholder {
    color: var(--text-muted) !important;
  }
  
  /* إصلاح الأيقونات */
  .eye-toggle {
    color: var(--text-secondary) !important;
  }
  
  .eye-toggle:hover {
    color: var(--color-accent) !important;
  }
  
  .search-box i {
    color: var(--text-secondary) !important;
  }
  
  /* إصلاح بطاقات الخدمات */
  .service-card {
    background: var(--card-background) !important;
    border: 1px solid #404040 !important;
    color: var(--text-primary) !important;
  }
  
  .service-card:hover {
    border-color: var(--color-accent) !important;
    background-color: var(--background-main) ;
  }
  
  .service-title {
    color: var(--text-primary) !important;
  }
  
  .service-description {
    color: var(--text-secondary) !important;
  }
  
  /* إصلاح بطاقات العمال */
  .worker-card {
    background: var(--card-background) !important;
    border: 1px solid #404040 !important;
  }
  
  .worker-card:hover {
    border-color: var(--color-accent) !important;
  }
  
  .worker-info h3 {
    color: var(--text-primary) !important;
  }
  
  .worker-location {
    color: var(--text-secondary) !important;
  }
  
  /* إصلاح الفلاتر */
  .filters-section {
    background: var(--card-background) !important;
    border: 1px solid #404040 !important;
  }
  
  .filters-section:hover {
    border-color: var(--color-accent) !important;
  }
  
  /* إصلاح الأزرار الاجتماعية */
  .social-btn {
    background: var(--card-background) !important;
    color: var(--text-primary) !important;
    border-color: #404040 !important;
  }
  
  .social-btn:hover {
    border-color: var(--color-accent) !important;
    background: rgba(255, 213, 79, 0.1) !important;
  }
  
  /* إصلاح حالة التحميل */
  .loading-state,
  .empty-state {
    color: var(--text-secondary) !important;
  }
  
  .loading-state i,
  .empty-state i {
    color: var(--color-accent) !important;
  }
  
  .empty-state h3 {
    color: var(--text-primary) !important;
  }
  
  /* إصلاح Footer */
  .footer {
    background: #0D0D0D !important;
    border-top: 1px solid #404040 !important;
  }
  
  .footer-brand .logo {
    color: var(--color-accent) !important;
  }
  
  .footer-brand p {
    color: var(--text-secondary) !important;
  }
  
  .footer-links h4 {
    color: var(--color-accent) !important;
  }
  
  .footer-links a {
    color: var(--text-secondary) !important;
  }
  
  .footer-links a:hover {
    color: var(--color-accent) !important;
  }
  
  .footer-bottom p {
    color: var(--text-muted) !important;
  }
  
  /* إصلاح Header */
  .header {
    background: var(--card-background) !important;
    border-bottom: 1px solid #404040 !important;
  }
  
  .nav-brand .logo {
    color: var(--color-accent) !important;
  }
  
  /* إصلاح Hero Section */
  .hero {
    background: var(--background-gradient) !important;
  }
  
  .hero-title {
    color: var(--text-primary) !important;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5) !important;
  }
  
  .hero-description {
    color: var(--text-secondary) !important;
  }
  
  /* إصلاح العناوين */
  .section-title,
  .page-title,
  .booking-title,
  .welcome-title {
    color: var(--text-primary) !important;
  }
  
  .page-description,
  .booking-description,
  .description {
    color: var(--text-secondary) !important;
  }
  
  /* إصلاح OTP */
  .otp-input {
    background: var(--card-background) !important;
    color: var(--text-primary) !important;
    border-color: #404040 !important;
  }
  
  .otp-input:focus {
    border-color: var(--color-accent) !important;
    box-shadow: 0 0 0 4px rgba(255, 213, 79, 0.15) !important;
  }
  
  .resend-btn {
    color: var(--color-accent) !important;
  }
  
  .resend-btn:hover {
    color: var(--color-accent-light) !important;
    background: rgba(255, 213, 79, 0.1) !important;
  }
  
  .resend-btn:disabled {
    color: var(--text-muted) !important;
    background: none !important;
  }
  
  .resend-text {
    color: var(--text-secondary) !important;
  }
  
  /* إصلاح التقسيم */
  .divider::before,
  .divider::after {
    background: linear-gradient(90deg, transparent, #404040, transparent) !important;
  }
  
  .divider span {
    color: var(--text-secondary) !important;
    background: var(--card-background) !important;
  }
  
  /* إصلاح Labels */
  .input-group label {
    color: var(--text-primary) !important;
  }
  
  /* إصلاح أزرار الحجز */
  .book-btn,
  .booking-btn {
    background: var(--color-accent) !important;
    color: var(--color-primary) !important;
  }
  
  .book-btn:hover,
  .booking-btn:hover {
    background: var(--color-accent-dark) !important;
    color: var(--color-primary) !important;
  }
  
  .book-btn:disabled {
    background: #404040 !important;
    color: var(--text-muted) !important;
  }
  
  /* إصلاح ملخص السعر */
  .price-summary {
    background: var(--background-main) !important;
    border-color: var(--color-accent) !important;
  }
  
  .price-row span:first-child {
    color: var(--text-secondary) !important;
  }
  
  .price-amount {
    color: var(--color-accent) !important;
  }
  
  /* إصلاح بطاقات الخدمة في الحجز */
  .service-option .service-card {
    background: var(--background-main) !important;
    border: 2px solid #404040 !important;
  }
  
  .service-option input[type="radio"]:checked + .service-card {
    border-color: var(--color-accent) !important;
    background: var(--card-background) !important;
  }
  
  .service-info h4 {
    color: var(--text-primary) !important;
  }
  
  .service-price {
    color: var(--color-accent) !important;
  }
  
  /* إصلاح معلومات العامل */
  .worker-info-section {
    background: var(--background-main) !important;
    border-color: var(--color-accent) !important;
  }
  
  .worker-details h3 {
    color: var(--text-primary) !important;
  }
  
  .worker-phone,
  .worker-rating {
    color: var(--text-secondary) !important;
  }
  
  .worker-rating i {
    color: var(--color-accent) !important;
  }
  
  /* إصلاح بطاقات الإحصائيات */
  .rating-text {
    color: var(--text-secondary) !important;
  }
  
  /* إصلاح التخصصات */
  .specialty-tag {
    background: var(--background-main) !important;
    color: var(--text-primary) !important;
    border-color: var(--color-accent) !important;
  }
  
  .specialty-tag:hover {
    background: var(--color-accent) !important;
    color: var(--color-primary) !important;
  }
  
  /* إصلاح شارات الحالة */
  .availability-badge.available {
    background: rgba(102, 187, 106, 0.2) !important;
    color: var(--color-success) !important;
    border-color: var(--color-success) !important;
  }
  
  .availability-badge.unavailable {
    background: rgba(239, 83, 80, 0.2) !important;
    color: var(--color-error) !important;
    border-color: var(--color-error) !important;
  }
  
  /* إصلاح عناصر التفاصيل */
  .detail-item {
    background: var(--background-main) !important;
    color: var(--text-secondary) !important;
  }
  
  .detail-item:hover {
    background: var(--color-accent) !important;
    color: var(--color-primary) !important;
  }
  
  .detail-item i {
    color: var(--color-accent) !important;
  }
  
  .detail-item:hover i {
    color: var(--color-primary) !important;
  }
  
  .detail-item strong {
    color: var(--text-primary) !important;
  }
  
  .detail-item:hover strong {
    color: var(--color-primary) !important;
  }
  
  /* إصلاح الجسم الرئيسي */
  body {
    background: var(--background-main) !important;
    color: var(--text-primary) !important;
  }
  
  .home-page {
    background: var(--card-background) !important;
  }
  
  .workers-page,
  .booking-page {
    background: var(--background-gradient) !important;
  }
  
  /* إصلاح Modal في الوضع الداكن */
  .modal-overlay {
    background: rgba(0, 0, 0, 0.7) !important;
  }
  
  .modal-content {
    background: var(--card-background) !important;
    border: 2px solid #404040 !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
  }
  
  .modal-title {
    color: var(--text-primary) !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
  }
  
  .modal-message {
    color: var(--text-secondary) !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
  }
  
  .modal-icon.success {
    background: var(--color-success) !important;
    color: white !important;
  }
  
  .modal-icon.error {
    background: var(--color-error) !important;
    color: white !important;
  }
  
  .modal-icon.warning {
    background: var(--color-warning) !important;
    color: var(--color-primary) !important;
  }
  
  .modal-icon.info {
    background: var(--card-background) !important;
    color: var(--color-primary) !important;
    border-color: var(--color-accent) !important;
  }
  
  .modal-btn.primary {
    border-color: var(--color-accent) !important;
    color: var(--color-primary) !important;
  }
  
  .modal-btn.primary:hover {
    background: var(--color-accent) !important;
    color: var(--color-primary) !important;
  }
  
  .modal-btn.secondary {
    border-color: var(--color-accent) !important;
    color: var(--color-accent) !important;
  }
  
  .modal-btn.secondary:hover {
    background: var(--color-accent) !important;
    color: var(--color-primary) !important;
  }
}
====================================
File: css/contrast-fix.css
====================================
/* =====================
   تحسين التباين للأزرار الصفراء
   Contrast Enhancement for Yellow Buttons
   ===================== */

/* تحسين الأزرار الأساسية */
.primary-btn,
.btn.primary-btn,
.booking-btn,
.book-btn {
  color: #000000 !important; /* تحسين التباين مع الخلفية الصفراء */
  font-weight: 600 !important;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2) !important; /* زيادة التباين */
}

.primary-btn:hover,
.btn.primary-btn:hover,
.booking-btn:hover,
.book-btn:hover {
  background: var(--color-accent-dark) !important;
  color: #000000 !important; /* الحفاظ على التباين العالي */
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25) !important;
}

/* تحسين الأزرار مع الخلفية المتدرجة */
.btn.primary-btn,
.booking-form .btn-primary {
  color: #000000 !important; /* تحسين التباين */
  border: 2px solid #000000 !important; /* استخدام لون أسود للحدود */
}

.btn.primary-btn:hover,
.booking-form .btn-primary:hover {
  background: var(--color-accent-dark) !important;
  color: #000000 !important;
  border-color: #000000 !important;
}

/* تحسين أزرار التحرير */
.edit-btn {
  background: var(--color-accent) !important;
  color: #000000 !important; /* تحسين التباين */
  border: 1px solid #000000 !important;
  font-weight: 600 !important;
}

.edit-btn:hover {
  background: var(--color-accent-dark) !important;
  color: #000000 !important;
  border-color: #000000 !important;
}

/* تحسين العلامات المتخصصة */
.specialty-tag:hover {
  background: var(--color-accent) !important;
  color: #000000 !important;
  border-color: #000000 !important;
  font-weight: 600 !important;
}

/* تحسين أزرار الحجز */
.booking-form .btn-primary {
  background: var(--color-accent) !important;
  color: #000000 !important;
  border: 2px solid #000000 !important;
  font-weight: 700 !important;
  text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3) !important; /* زيادة التباين */
}

.booking-form .btn-primary:hover:not(:disabled) {
  background: var(--color-accent-dark) !important;
  color: #000000 !important;
  border-color: #000000 !important;
}

/* تحسين الأزرار في الوضع الداكن */
@media (prefers-color-scheme: dark) {
  .primary-btn,
  .btn.primary-btn,
  .booking-btn,
  .book-btn,
  .edit-btn {
    color: #000000 !important;
    border: 2px solid #000000 !important;
    font-weight: 700 !important;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.4) !important; /* زيادة التباين */
  }
  
  .primary-btn:hover,
  .btn.primary-btn:hover,
  .booking-btn:hover,
  .book-btn:hover,
  .edit-btn:hover {
    background: var(--color-accent-dark) !important;
    color: #000000 !important;
    border-color: #000000 !important;
  }
}

/* تحسين إضافي للنصوص على الخلفيات الصفراء */
.hero-buttons .btn.primary-btn,
.service-card .btn.primary-btn,
.worker-card .btn.primary-btn {
  color: #000000 !important;
  border: 2px solid #000000 !important;
  font-weight: 700 !important;
  text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3) !important;
  letter-spacing: 0.5px !important;
}

.hero-buttons .btn.primary-btn:hover,
.service-card .btn.primary-btn:hover,
.worker-card .btn.primary-btn:hover {
  background: var(--color-accent-dark) !important;
  color: #000000 !important;
  border-color: #000000 !important;
  text-shadow: 0 1px 3px rgba(0, 0, 0, 0.35) !important;
}

/* تحسين النصوص في الأيقونات */
.btn i {
  text-shadow: inherit !important;
}

/* تحسين التباين للنصوص الصغيرة */
.btn {
  font-size: 1rem !important;
  line-height: 1.4 !important;
}

/* تأكيد إضافي للتباين */
.primary-btn *,
.btn.primary-btn *,
.booking-btn *,
.book-btn * {
  color: #000000 !important;
  text-shadow: inherit !important;
}

/* تحسين التباين لأزرار Modal */
.modal-btn.primary {
  color: #000000 !important;
  font-weight: 600 !important;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2) !important;
  word-wrap: break-word !important;
  overflow-wrap: break-word !important;
}

.modal-btn.primary:hover {
  background: var(--color-accent-dark) !important;
  color: #000000 !important;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25) !important;
}

.modal-btn.secondary {
  color: #000000 !important;
  font-weight: 600 !important;
}

.modal-btn.secondary:hover {
  background: var(--color-primary) !important;
  color: #FFFFFF !important; /* استخدام لون أبيض للون الخلفية الداكنة */
}

/* تحسين التباين في الوضع الداكن للـ Modal */
@media (prefers-color-scheme: dark) {
  .modal-btn.primary {
    color: #000000 !important;
    border: 2px solid #000000 !important;
    font-weight: 700 !important;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.4) !important;
  }
  
  .modal-btn.primary:hover {
    background: var(--color-accent-dark) !important;
    color: #000000 !important;
    border-color: #000000 !important;
  }
  
  .modal-btn.secondary {
    color: #FFFFFF !important; /* استخدام لون أبيض للون الخلفية الداكنة */
    border: 2px solid #FFFFFF !important;
    font-weight: 700 !important;
  }
  
  .modal-btn.secondary:hover {
    background: #FFFFFF !important;
    color: var(--color-primary) !important;
    border-color: #FFFFFF !important;
  }
}
====================================
File: css/worker_dashboard.css
====================================
/* =====================
   Enhanced Worker Dashboard Styles
   ===================== */

/* استيراد المتغيرات من الملف الرئيسي */
:root {
  --color-primary: #2C2C2C;
  --color-secondary: #D32F2F;
  --color-accent: #FFC107;
  --color-accent-dark: #FFB300;
  --color-accent-light: #FFF350;
  --background-main: #FFF9C4;
  --background-gradient: linear-gradient(135deg, #FFF9C4 0%, #FFECB3 100%);
  --card-background: #FFFFFF;
  --card-shadow: 0 8px 32px rgba(44, 44, 44, 0.12);
  --card-shadow-hover: 0 16px 48px rgba(44, 44, 44, 0.18);
  --text-primary: #1A1A1A;
  --text-secondary: #757575;
  --text-muted: #9E9E9E;
  --color-success: #4CAF50;
  --color-warning: #FF9800;
  --color-error: #F44336;
  --border-radius: 16px;
  --border-radius-small: 8px;
  --border-radius-large: 24px;
  --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  --font-weight-light: 300;
  --font-weight-regular: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;
}

/* Enhanced Dashboard Header */
.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding: 24px;
  background: var(--background-gradient);
  border-radius: var(--border-radius);
  color: var(--text-primary);
  box-shadow: var(--card-shadow);
  border: 2px solid var(--color-accent);
  position: relative;
  overflow: hidden;
}

.dashboard-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="%23FFC107" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="%23FFC107" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  pointer-events: none;
  z-index: 0;
}

.dashboard-header > * {
  position: relative;
  z-index: 1;
}

.dashboard-header .page-title {
  margin: 0;
  font-size: 1.8rem;
  font-weight: var(--font-weight-bold);
  display: flex;
  align-items: center;
  gap: 12px;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.header-actions {
  display: flex;
  gap: 12px;
}

.header-actions .btn {
  padding: 10px 18px;
  border: none;
  border-radius: var(--border-radius-small);
  cursor: pointer;
  font-weight: var(--font-weight-semibold);
  transition: var(--transition);
  display: flex;
  align-items: center;
  gap: 6px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  position: relative;
  overflow: hidden;
}

.header-actions .btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.header-actions .btn:hover::before {
  left: 100%;
}

.secondary-btn {
  background-color: var(--card-background);
  color: var(--text-primary);
  border: 2px solid var(--color-accent);
}

.secondary-btn:hover {
  background-color: var(--color-accent);
  color: var(--color-primary);
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(255, 193, 7, 0.3);
}

.danger-btn {
  background-color: var(--color-error);
  color: white;
}

.danger-btn:hover {
  background-color: #d32f2f;
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(244, 67, 54, 0.3);
}

/* Enhanced Statistics Cards */
.stats-container {
    display: flex;
    /* grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); */
    gap: 24px;
    margin-bottom: 32px;
    align-content: center;
    justify-content: center;
    align-items: baseline;
    justify-items: center;
    flex-direction: row;
    flex-wrap: wrap;
}

.stat-card {
  background: var(--card-background);
  padding: 24px;
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  display: flex;
  align-items: center;
  gap: 16px;
  transition: var(--transition);
  border: 2px solid transparent;
  position: relative;
  overflow: hidden;
}

.stat-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--background-gradient);
  opacity: 0;
  transition: var(--transition);
  z-index: 0;
}

.stat-card:hover::before {
  opacity: 0.05;
}

.stat-card:hover {
  transform: translateY(-6px);
  box-shadow: var(--card-shadow-hover);
  border-color: var(--color-accent);
}

.stat-card > * {
  position: relative;
  z-index: 1;
}

.stat-icon {
  width: 64px;
  height: 64px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  color: var(--color-primary);
  transition: var(--transition);
  border: 3px solid transparent;
}

.stat-card:hover .stat-icon {
  transform: scale(1.1) rotate(5deg);
  border-color: var(--color-accent);
}

.stat-icon.pending {
  background: linear-gradient(135deg, var(--color-warning), var(--color-accent));
}

.stat-icon.confirmed {
  background: linear-gradient(135deg, var(--color-success), #66BB6A);
}

.stat-icon.rejected {
  background: linear-gradient(135deg, var(--color-error), #EF5350);
}

.stat-info h3 {
  margin: 0;
  font-size: 2rem;
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.stat-info p {
  margin: 5px 0 0 0;
  color: var(--text-secondary);
  font-size: 0.9rem;
  font-weight: var(--font-weight-medium);
}

/* Enhanced Filters */
.filters {
  display: flex;
  gap: 16px;
  margin-bottom: 32px;
  padding: 24px;
  background: var(--card-background);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  flex-wrap: wrap;
  border: 2px solid transparent;
  transition: var(--transition);
}

.filters:hover {
  border-color: var(--color-accent);
}

.filters select,
.filters input {
  padding: 12px 16px;
  border: 2px solid #E0E0E0;
  border-radius: var(--border-radius-small);
  font-size: 1rem;
  transition: var(--transition);
  min-width: 160px;
  background: var(--card-background);
  color: var(--text-primary);
  font-weight: var(--font-weight-medium);
}

.filters select:focus,
.filters input:focus {
  outline: none;
  border-color: var(--color-accent);
  box-shadow: 0 0 0 4px rgba(255, 193, 7, 0.15);
  transform: translateY(-1px);
}

/* Enhanced Appointments Container */
.appointments-container {
  display: grid;
  gap: 24px;
}

.appointment-card {
  background: var(--card-background);
  border-radius: var(--border-radius);
  padding: 28px;
  box-shadow: var(--card-shadow);
  transition: var(--transition);
  border-right: 6px solid #E0E0E0;
  position: relative;
  overflow: hidden;
}

.appointment-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--background-gradient);
  opacity: 0;
  transition: var(--transition);
  z-index: 0;
}

.appointment-card:hover::before {
  opacity: 0.03;
}

.appointment-card:hover {
  transform: translateY(-4px);
  box-shadow: var(--card-shadow-hover);
}

.appointment-card > * {
  position: relative;
  z-index: 1;
}

.appointment-card.pending {
  border-right-color: var(--color-warning);
}

.appointment-card.confirmed {
  border-right-color: var(--color-success);
}

.appointment-card.rejected {
  border-right-color: var(--color-error);
}

.appointment-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 18px;
}

.client-info {
  display: flex;
  align-items: center;
  gap: 12px;
}

.client-avatar {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  background: var(--background-gradient);
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--color-primary);
  font-weight: var(--font-weight-bold);
  font-size: 1.2rem;
  border: 3px solid var(--color-accent);
  transition: var(--transition);
}

.appointment-card:hover .client-avatar {
  transform: scale(1.05);
}

.client-info h4 {
  margin: 0;
  color: var(--text-primary);
  font-weight: var(--font-weight-semibold);
  font-size: 1.1rem;
}

.appointment-details {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: 16px;
  margin-bottom: 20px;
}

.detail-item {
  display: flex;
  align-items: center;
  gap: 10px;
  color: var(--text-secondary);
  font-weight: var(--font-weight-medium);
  padding: 8px 12px;
  background: var(--background-main);
  border-radius: var(--border-radius-small);
  transition: var(--transition);
}

.detail-item:hover {
  background: var(--color-accent);
  color: var(--color-primary);
  transform: scale(1.02);
}

.detail-item i {
  color: var(--color-accent);
  width: 18px;
  font-size: 1.1rem;
}

.detail-item:hover i {
  color: var(--color-primary);
}

.detail-item strong {
  color: var(--text-primary);
  font-weight: var(--font-weight-semibold);
}

.detail-item:hover strong {
  color: var(--color-primary);
}

.status-badge {
  padding: 8px 16px;
  border-radius: 20px;
  font-size: 0.85rem;
  font-weight: var(--font-weight-semibold);
  text-align: center;
  min-width: 120px;
  border: 2px solid;
  transition: var(--transition);
}

.status-badge:hover {
  transform: scale(1.05);
}

.status-badge.pending {
  background-color: rgba(255, 152, 0, 0.1);
  color: var(--color-warning);
  border-color: var(--color-warning);
}

.status-badge.confirmed {
  background-color: rgba(76, 175, 80, 0.1);
  color: var(--color-success);
  border-color: var(--color-success);
}

.status-badge.rejected {
  background-color: rgba(244, 67, 54, 0.1);
  color: var(--color-error);
  border-color: var(--color-error);
}

.appointment-actions {
  display: flex;
  gap: 12px;
  justify-content: flex-end;
  margin-top: 18px;
  padding-top: 18px;
  border-top: 2px solid #F5F5F5;
}

.action-btn {
  padding: 10px 18px;
  border: none;
  border-radius: var(--border-radius-small);
  cursor: pointer;
  font-weight: var(--font-weight-semibold);
  transition: var(--transition);
  display: flex;
  align-items: center;
  gap: 6px;
  min-width: 110px;
  justify-content: center;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  position: relative;
  overflow: hidden;
}

.action-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.action-btn:hover::before {
  left: 100%;
}

.accept-btn {
  background-color: var(--color-success);
  color: white;
}

.accept-btn:hover {
  background-color: #388E3C;
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(76, 175, 80, 0.3);
}

.reject-btn {
  background-color: var(--color-error);
  color: white;
}

.reject-btn:hover {
  background-color: #D32F2F;
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(244, 67, 54, 0.3);
}

/* Enhanced Loading State */
.loading {
  text-align: center;
  padding: 60px;
  color: var(--text-secondary);
  font-size: 1.1rem;
  font-weight: var(--font-weight-medium);
}

.loading i {
  font-size: 3rem;
  margin-bottom: 16px;
  color: var(--color-accent);
  animation: pulse 2s infinite;
}

/* Enhanced Empty State */
.empty-state {
  text-align: center;
  padding: 80px 20px;
  color: var(--text-secondary);
}

.empty-state i {
  font-size: 4rem;
  color: var(--color-accent);
  margin-bottom: 24px;
  opacity: 0.5;
  animation: pulse 3s infinite;
}

.empty-state h3 {
  margin: 0 0 12px 0;
  color: var(--text-primary);
  font-weight: var(--font-weight-semibold);
  font-size: 1.25rem;
}

.empty-state p {
  color: var(--text-secondary);
  font-weight: var(--font-weight-regular);
  line-height: 1.5;
}

/* Enhanced Modal */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  backdrop-filter: blur(8px);
  animation: fadeIn 0.3s ease;
}

.modal-content {
  background-color: var(--card-background);
  margin: 15% auto;
  padding: 32px;
  border-radius: var(--border-radius);
  width: 90%;
  max-width: 420px;
  text-align: center;
  box-shadow: var(--card-shadow-hover);
  border: 2px solid var(--color-accent);
  position: relative;
  overflow: hidden;
  animation: slideInUp 0.4s ease;
}

.modal-content::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: var(--background-gradient);
}

.modal-content h3 {
  margin: 0 0 16px 0;
  color: var(--text-primary);
  font-weight: var(--font-weight-semibold);
  font-size: 1.25rem;
}

.modal-content p {
  margin: 0 0 28px 0;
  color: var(--text-secondary);
  line-height: 1.6;
  font-weight: var(--font-weight-regular);
}

.modal-actions {
  display: flex;
  gap: 12px;
  justify-content: center;
}

.modal-actions .btn {
  padding: 12px 24px;
  border: none;
  border-radius: var(--border-radius-small);
  cursor: pointer;
  font-weight: var(--font-weight-semibold);
  transition: var(--transition);
  min-width: 110px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.primary-btn {
  background: var(--background-gradient);
  color: var(--color-primary);
}

.primary-btn:hover {
  background: var(--color-accent-dark);
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(255, 193, 7, 0.3);
}

/* Enhanced Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideInUp {
  from {
    transform: translateY(30px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.7;
    transform: scale(1.05);
  }
}

@keyframes bounce {
  0%, 20%, 53%, 80%, 100% {
    transform: translate3d(0, 0, 0);
  }
  40%, 43% {
    transform: translate3d(0, -8px, 0);
  }
  70% {
    transform: translate3d(0, -4px, 0);
  }
  90% {
    transform: translate3d(0, -2px, 0);
  }
}

.fade-in {
  animation: fadeIn 0.6s ease-in;
}

.bounce-in {
  animation: bounce 0.8s ease;
}

/* Enhanced Responsive Design */
@media (max-width: 768px) {
  .dashboard-header {
    flex-direction: column;
    gap: 16px;
    text-align: center;
    padding: 20px;
  }
  
  .dashboard-header .page-title {
    font-size: 1.5rem;
  }
  
  .header-actions {
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .stats-container {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .stat-card {
    padding: 20px;
  }
  
  .stat-icon {
    width: 56px;
    height: 56px;
    font-size: 1.3rem;
  }
  
  .stat-info h3 {
    font-size: 1.75rem;
  }
  
  .filters {
    flex-direction: column;
    padding: 20px;
  }
  
  .filters select,
  .filters input {
    min-width: 100%;
  }
  
  .appointment-details {
    grid-template-columns: 1fr;
  }
  
  .appointment-actions {
    flex-direction: column;
  }
  
  .action-btn {
    width: 100%;
  }
  
  .modal-content {
    margin: 20% auto;
    padding: 24px;
  }
  
  .modal-actions {
    flex-direction: column;
  }
  
  .modal-actions .btn {
    width: 100%;
  }
}

@media (max-width: 480px) {
  .dashboard-header {
    padding: 16px;
  }
  
  .dashboard-header .page-title {
    font-size: 1.3rem;
  }
  
  .stats-container {
    margin-bottom: 24px;
  }
  
  .stat-card {
    padding: 16px;
    gap: 12px;
  }
  
  .stat-icon {
    width: 48px;
    height: 48px;
    font-size: 1.2rem;
  }
  
  .stat-info h3 {
    font-size: 1.5rem;
  }
  
  .stat-info p {
    font-size: 0.85rem;
  }
  
  .filters {
    padding: 16px;
    gap: 12px;
  }
  
  .appointment-card {
    padding: 20px;
  }
  
  .client-avatar {
    width: 40px;
    height: 40px;
    font-size: 1rem;
  }
  
  .detail-item {
    padding: 6px 10px;
    font-size: 0.9rem;
  }
  
  .status-badge {
    padding: 6px 12px;
    font-size: 0.8rem;
    min-width: 100px;
  }
  
  .action-btn {
    padding: 8px 14px;
    font-size: 0.9rem;
    min-width: 100px;
  }
  
  .modal-content {
    width: 95%;
    margin: 25% auto;
    padding: 20px;
  }
}

/* Enhanced Dark Mode Support */
@media (prefers-color-scheme: dark) {
  :root {
    --card-background: #1E1E1E;
    --text-primary: #FFFFFF;
    --text-secondary: #B0B0B0;
    --text-muted: #808080;
    --background-main: #2A2A2A;
    --background-gradient: linear-gradient(135deg, #2A2A2A 0%, #3A3A3A 100%);
  }
  
  .detail-item {
    background: rgba(255, 193, 7, 0.1);
  }
  
  .appointment-actions {
    border-top-color: #333;
  }
}

/* Enhanced Accessibility */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

/* Focus Styles for Better Accessibility */
.btn:focus,
.action-btn:focus,
select:focus,
input:focus {
  outline: 3px solid var(--color-accent);
  outline-offset: 2px;
}

/* High Contrast Mode Support */
@media (prefers-contrast: high) {
  .stat-card,
  .appointment-card,
  .filters {
    border: 3px solid var(--text-primary);
  }
  
  .status-badge {
    border-width: 3px;
  }
}

/* =====================
   Enhanced Dark Mode Support for Worker Dashboard
   ===================== */
@media (prefers-color-scheme: dark) {
  .dashboard-header {
    background: var(--background-gradient) !important;
    color: var(--text-primary) !important;
    border-color: var(--color-accent) !important;
  }
  
  .dashboard-header .page-title {
    color: var(--text-primary) !important;
  }
  
  .stat-card {
    background: var(--card-background) !important;
    border: 1px solid #404040 !important;
  }
  
  .stat-card:hover {
    border-color: var(--color-accent) !important;
  }
  
  .stat-info h3 {
    color: var(--text-primary) !important;
  }
  
  .stat-info p {
    color: var(--text-secondary) !important;
  }
  
  .filters {
    background: var(--card-background) !important;
    border: 1px solid #404040 !important;
  }
  
  .filters:hover {
    border-color: var(--color-accent) !important;
  }
  
  .filters select,
  .filters input {
    background: var(--card-background) !important;
    color: var(--text-primary) !important;
    border-color: #404040 !important;
  }
  
  .filters select:focus,
  .filters input:focus {
    border-color: var(--color-accent) !important;
    box-shadow: 0 0 0 4px rgba(255, 213, 79, 0.15) !important;
  }
  
  .appointment-card {
    background: var(--card-background) !important;
    border: 1px solid #404040 !important;
  }
  
  .appointment-card:hover {
    border-color: var(--color-accent) !important;
  }
  
  .client-info h4 {
    color: var(--text-primary) !important;
  }
  
  .detail-item {
    background: var(--background-main) !important;
    color: var(--text-secondary) !important;
  }
  
  .detail-item:hover {
    background: var(--color-accent) !important;
    color: var(--color-primary) !important;
  }
  
  .detail-item i {
    color: var(--color-accent) !important;
  }
  
  .detail-item:hover i {
    color: var(--color-primary) !important;
  }
  
  .detail-item strong {
    color: var(--text-primary) !important;
  }
  
  .detail-item:hover strong {
    color: var(--color-primary) !important;
  }
  
  .appointment-actions {
    border-top-color: #404040 !important;
  }
  
  .modal {
    background-color: rgba(0, 0, 0, 0.8) !important;
  }
  
  .modal-content {
    background-color: var(--card-background) !important;
    border: 2px solid var(--color-accent) !important;
  }
  
  .modal-content h3 {
    color: var(--text-primary) !important;
  }
  
  .modal-content p {
    color: var(--text-secondary) !important;
  }
  
  .loading {
    color: var(--text-secondary) !important;
  }
  
  .loading i {
    color: var(--color-accent) !important;
  }
  
  .empty-state {
    color: var(--text-secondary) !important;
  }
  
  .empty-state i {
    color: var(--color-accent) !important;
  }
  
  .empty-state h3 {
    color: var(--text-primary) !important;
  }
}


/* =====================
   Enhanced Dark Mode Support for Worker Dashboard
   ===================== */
@media (prefers-color-scheme: dark) {
  .dashboard-header {
    background: var(--background-gradient) !important;
    color: var(--text-primary) !important;
    border-color: var(--color-accent) !important;
  }
  
  .dashboard-header .page-title {
    color: var(--text-primary) !important;
  }
  
  .stat-card {
    background: var(--card-background) !important;
    border: 1px solid #404040 !important;
  }
  
  .stat-card:hover {
    border-color: var(--color-accent) !important;
  }
  
  .stat-info h3 {
    color: var(--text-primary) !important;
  }
  
  .stat-info p {
    color: var(--text-secondary) !important;
  }
  
  .filters {
    background: var(--card-background) !important;
    border: 1px solid #404040 !important;
  }
  
  .filters:hover {
    border-color: var(--color-accent) !important;
  }
  
  .filters select,
  .filters input {
    background: var(--card-background) !important;
    color: var(--text-primary) !important;
    border-color: #404040 !important;
  }
  
  .filters select:focus,
  .filters input:focus {
    border-color: var(--color-accent) !important;
    box-shadow: 0 0 0 4px rgba(255, 213, 79, 0.15) !important;
  }
  
  .appointment-card {
    background: var(--card-background) !important;
    border: 1px solid #404040 !important;
  }
  
  .appointment-card:hover {
    border-color: var(--color-accent) !important;
  }
  
  .client-info h4 {
    color: var(--text-primary) !important;
  }
  
  .detail-item {
    background: var(--background-main) !important;
    color: var(--text-secondary) !important;
  }
  
  .detail-item:hover {
    background: var(--color-accent) !important;
    color: var(--color-primary) !important;
  }
  
  .detail-item i {
    color: var(--color-accent) !important;
  }
  
  .detail-item:hover i {
    color: var(--color-primary) !important;
  }
  
  .detail-item strong {
    color: var(--text-primary) !important;
  }
  
  .detail-item:hover strong {
    color: var(--color-primary) !important;
  }
  
  .appointment-actions {
    border-top-color: #404040 !important;
  }
  
  .modal {
    background-color: rgba(0, 0, 0, 0.8) !important;
  }
  
  .modal-content {
    background-color: var(--card-background) !important;
    border: 2px solid var(--color-accent) !important;
  }
  
  .modal-content h3 {
    color: var(--text-primary) !important;
  }
  
  .modal-content p {
    color: var(--text-secondary) !important;
  }
  
  .loading {
    color: var(--text-secondary) !important;
  }
  
  .loading i {
    color: var(--color-accent) !important;
  }
  
  .empty-state {
    color: var(--text-secondary) !important;
  }
  
  .empty-state i {
    color: var(--color-accent) !important;
  }
  
  .empty-state h3 {
    color: var(--text-primary) !important;
  }
}


/* =====================
   Enhanced Dark Mode Support for Worker Dashboard
   ===================== */
@media (prefers-color-scheme: dark) {
  .dashboard-header {
    background: var(--background-gradient) !important;
    color: var(--text-primary) !important;
    border-color: var(--color-accent) !important;
  }
  
  .dashboard-header .page-title {
    color: var(--text-primary) !important;
  }
  
  .stat-card {
    background: var(--card-background) !important;
    border: 1px solid #404040 !important;
  }
  
  .stat-card:hover {
    border-color: var(--color-accent) !important;
  }
  
  .stat-info h3 {
    color: var(--text-primary) !important;
  }
  
  .stat-info p {
    color: var(--text-secondary) !important;
  }
  
  .filters {
    background: var(--card-background) !important;
    border: 1px solid #404040 !important;
  }
  
  .filters:hover {
    border-color: var(--color-accent) !important;
  }
  
  .filters select,
  .filters input {
    background: var(--card-background) !important;
    color: var(--text-primary) !important;
    border-color: #404040 !important;
  }
  
  .filters select:focus,
  .filters input:focus {
    border-color: var(--color-accent) !important;
    box-shadow: 0 0 0 4px rgba(255, 213, 79, 0.15) !important;
  }
  
  .appointment-card {
    background: var(--card-background) !important;
    border: 1px solid #404040 !important;
  }
  
  .appointment-card:hover {
    border-color: var(--color-accent) !important;
  }
  
  .client-info h4 {
    color: var(--text-primary) !important;
  }
  
  .detail-item {
    background: var(--background-main) !important;
    color: var(--text-secondary) !important;
  }
  
  .detail-item:hover {
    background: var(--color-accent) !important;
    color: var(--color-primary) !important;
  }
  
  .detail-item i {
    color: var(--color-accent) !important;
  }
  
  .detail-item:hover i {
    color: var(--color-primary) !important;
  }
  
  .detail-item strong {
    color: var(--text-primary) !important;
  }
  
  .detail-item:hover strong {
    color: var(--color-primary) !important;
  }
  
  .appointment-actions {
    border-top-color: #404040 !important;
  }
  
  .modal {
    background-color: rgba(0, 0, 0, 0.8) !important;
  }
  
  .modal-content {
    background-color: var(--card-background) !important;
    border: 2px solid var(--color-accent) !important;
  }
  
  .modal-content h3 {
    color: var(--text-primary) !important;
  }
  
  .modal-content p {
    color: var(--text-secondary) !important;
  }
  
  .loading {
    color: var(--text-secondary) !important;
  }
  
  .loading i {
    color: var(--color-accent) !important;
  }
  
  .empty-state {
    color: var(--text-secondary) !important;
  }
  
  .empty-state i {
    color: var(--color-accent) !important;
  }
  
  .empty-state h3 {
    color: var(--text-primary) !important;
  }
}

/* Accessibility focus styles */
:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(3, 142, 255, 0.6);
}

.btn:focus,
button:focus,
a:focus,
input:focus,
textarea:focus,
select:focus,
[tabindex="0"]:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(3, 142, 255, 0.6);
  z-index: 1;
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  visibility: hidden;
  opacity: 0;
  transition: all 0.3s ease;
}

.modal-container {
  background-color: #ffffff;
  border-radius: 8px;
  padding: 20px;
  position: relative;
  max-width: 500px;
  width: 90%;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  transform: scale(0.95);
  transition: all 0.3s ease;
}

.modal-backdrop {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.modal-content {
  position: relative;
}

.modal-close-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  z-index: 2;
}

.modal-icon {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  margin: 0 auto 15px;
}

.modal-title {
  text-align: center;
  margin-bottom: 10px;
}

.modal-message {
  text-align: center;
  margin-bottom: 20px;
}

.modal-actions {
  display: flex;
  justify-content: center;
  gap: 10px;
  margin-top: 20px;
}

.modal-btn {
  padding: 10px 20px;
  font-size: 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.modal-btn.primary {
  background-color: #037aff;
  color: white;
}

.modal-btn.secondary {
  background-color: #e0e0e0;
  color: #333;
}

.modal-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

/* Loading State */
.loading-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 40px;
  text-align: center;
}

.dual-spinner {
  width: 40px;
  height: 40px;
  position: relative;
  margin: 20px 0;
}

.inner-spinner {
  width: 100%;
  height: 100%;
  border: 4px solid #eee;
  border-top: 4px solid #037aff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

.skeleton-card {
  background-color: #f5f5f5;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  animation: pulse 2s infinite;
}

.skeleton {
  background-color: #e0e0e0;
  border-radius: 4px;
  display: inline-block;
  position: relative;
  overflow: hidden;
}

.skeleton::after {
  content: '';
  position: absolute;
  top: 0;
  left: -50%;
  width: 50%;
  height: 100%;
  background: linear-gradient(
    to right,
    transparent 0%,
    rgba(255, 255, 255, 0.5) 50%,
    transparent 100%
  );
  animation: skeleton-loading 1.5s infinite;
}

@keyframes skeleton-loading {
  0% {
    left: -50%;
  }
  50% {
    left: 100%;
  }
  100% {
    left: 100%;
  }
}

@keyframes pulse {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}

/* Button loading state */
.btn.loading {
  position: relative;
  overflow: hidden;
}

.loading-spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 20px;
  height: 20px;
  display: inline-block;
}

.spinner-circle {
  stroke: #ffffff;
}

.spinner-path {
  fill: #ffffff;
}

.btn-text {
  vertical-align: middle;
;}

====================================
File: js/utils.js
====================================
// utils.js
// دوال مساعدة مشتركة للتطبيق

/**
 * حساب متوسط التقييم من مصفوفة التقييمات
 * @param {Array} reviews - مصفوفة التقييمات
 * @returns {string} متوسط التقييم مع رقم عشري واحد
 */
export function calculateAverageRating(reviews) {
  if (!reviews || reviews.length === 0) return "0.0";
  
  const total = reviews.reduce((acc, cur) => acc + (cur.rating || 0), 0);
  return (total / reviews.length).toFixed(1);
}

/**
 * حساب متوسط التقييم من البيانات الخام
 * @param {number} totalRating - مجموع التقييمات
 * @param {number} reviewCount - عدد التقييمات
 * @returns {string} متوسط التقييم مع رقم عشري واحد
 */
export function calculateAverageFromTotals(totalRating, reviewCount) {
  if (!reviewCount || reviewCount === 0) return "0.0";
  return (totalRating / reviewCount).toFixed(1);
}

/**
 * تنسيق عرض النجوم بناءً على التقييم
 * @param {number} rating - التقييم (من 1 إلى 5)
 * @returns {string} النجوم المنسقة
 */
export function formatStars(rating) {
  const fullStars = Math.floor(rating);
  const emptyStars = 5 - fullStars;
  return "★".repeat(fullStars) + "☆".repeat(emptyStars);
}

/**
 * التحقق من صحة التقييم
 * @param {number} rating - التقييم المراد التحقق منه
 * @returns {boolean} true إذا كان التقييم صحيحاً
 */
export function isValidRating(rating) {
  return rating && rating >= 1 && rating <= 5;
}

/**
 * تنسيق التاريخ النسبي باللغة العربية
 * @param {Date} date - التاريخ المراد تنسيقه
 * @returns {string} التاريخ المنسق
 */
export function formatRelativeTime(date) {
  if (!date) return "";
  
  const now = new Date();
  const diffInSeconds = Math.floor((now - date) / 1000);
  
  if (diffInSeconds < 60) return "الآن";
  if (diffInSeconds < 3600) return `قبل ${Math.floor(diffInSeconds / 60)} دقيقة`;
  if (diffInSeconds < 86400) return `قبل ${Math.floor(diffInSeconds / 3600)} ساعة`;
  if (diffInSeconds < 2592000) return `قبل ${Math.floor(diffInSeconds / 2592000)} يوم`;
  if (diffInSeconds < 31536000) return `قبل ${Math.floor(diffInSeconds / 31536000)} شهر`;
  return `قبل ${Math.floor(diffInSeconds / 31536000)} سنة`;
}


/**
 * إضافة حالة التحميل للزر
 * @param {HTMLElement} button - عنصر الزر
 * @param {string} loadingText - النص أثناء التحميل
 * @returns {Object} كائن يحتوي على دوال التحكم
 */
export function setButtonLoading(button, loadingText = 'جارٍ التحميل...') {
  if (!button) {
    console.error("❌ الزر غير موجود في setButtonLoading");
    return null;
  }
  
  const originalText = button.textContent;
  const originalDisabled = button.disabled;
  
  // إضافة كلاسات التحميل
  button.classList.add('loading');
  button.disabled = true;
  
  // إضافة spinner والنص - Enhanced SVG Spinner
  button.innerHTML = `
    <span class="loading-spinner">
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <circle class="spinner-circle" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="spinner-path" d="M4 12a8 8 0 018-8v8H4z" fill="currentColor"></path>
      </svg>
    </span>
    <span class="btn-text">${loadingText}</span>
  `;
  
  return {
    stop: () => {
      button.classList.remove('loading');
      button.disabled = originalDisabled;
      button.textContent = originalText;
    },
    updateText: (newText) => {
      const textSpan = button.querySelector('.btn-text');
      if (textSpan) textSpan.textContent = newText;
    }
  };
}

/**
 * إنشاء loading state للحاويات
 * @param {HTMLElement} container - الحاوية المراد عرض التحميل فيها
 * @param {string} message - رسالة التحميل
 */
export function showLoadingState(container, message = 'جارٍ التحميل...') {
  if (!container) return;
  
  container.innerHTML = `
    <div class="loading-state">
      <div class="dual-spinner">
        <div class="inner-spinner"></div>
      </div>
      <p>${message}</p>
    </div>
  `;
}

/**
 * إنشاء skeleton loading للبطاقات
 * @param {HTMLElement} container - الحاوية
 * @param {number} count - عدد البطاقات الوهمية
 */
export function showSkeletonCards(container, count = 3) {
  if (!container) {
    console.error("❌ Container غير موجود في showSkeletonCards");
    return;
  }
  
  let skeletonHTML = '';
  for (let i = 0; i < count; i++) {
    skeletonHTML += `
      <div class="skeleton-card">
        <div class="skeleton skeleton-avatar"></div>
        <div class="skeleton skeleton-text title" style="width: 80%; height: 20px; margin: 10px 0;"></div>
        <div class="skeleton skeleton-text subtitle" style="width: 60%; height: 16px; margin: 8px 0;"></div>
        <div class="skeleton skeleton-text content" style="width: 90%; height: 14px; margin: 6px 0;"></div>
        <div class="skeleton skeleton-text content" style="width: 70%; height: 14px; margin: 6px 0;"></div>
        <div class="skeleton skeleton-text" style="width: 50%; height: 32px; margin: 15px 0; border-radius: 16px;"></div>
      </div>
    `;
  }
  
  container.innerHTML = skeletonHTML;
}

/**
 * إنشاء modal للرسائل
 * @param {Object} options - خيارات المودال
 */
export function showModal(options = {}) {
  const {
    type = 'info', // success, error, warning, info
    title = 'تنبيه',
    message = '',
    primaryText = 'موافق',
    secondaryText = null,
    onPrimary = null,
    onSecondary = null,
    onClose = null
  } = options;

  // إزالة أي مودال موجودة لتجنب التداخل
  closeModal();

  // إنشاء المودال باستخدام فئات CSS
  const modalHTML = `
    <div class="modal-overlay" id="modal-overlay">
      <div class="modal-backdrop" onclick="closeModal()"></div>
      <div class="modal-container">
        <div class="modal-content" role="dialog" aria-modal="true">
          <button class="modal-close-btn" onclick="closeModal()" aria-label="إغلاق">
            <i class="fas fa-times"></i>
          </button>
          <div class="modal-icon ${type}" role="img" aria-label="${type === 'success' ? 'نجاح' : type === 'error' ? 'خطأ' : type === 'warning' ? 'تحذير' : 'معلومات'}">
            ${getModalIcon(type)}
          </div>
          <h2 class="modal-title">${title}</h2>
          <p class="modal-message">${message}</p>
          <div class="modal-actions ${secondaryText ? 'horizontal' : ''}">
            <button type="button" class="modal-btn primary" onclick="handleModalPrimary()" tabindex="0">${primaryText}</button>
            ${secondaryText ? `<button type="button" class="modal-btn secondary" onclick="handleModalSecondary()" tabindex="0">${secondaryText}</button>` : ''}
          </div>
        </div>
      </div>
    </div>
  `;
  document.body.insertAdjacentHTML('beforeend', modalHTML);
  
  // تعيين دور الزر الرئيسي على أنه زر أولوي
  const primaryBtn = document.querySelector('.modal-btn.primary');
  if (primaryBtn) {
    primaryBtn.setAttribute('role', 'button');
    primaryBtn.setAttribute('tabindex', '0');
  }
  
  // تعيين دور الزر الثانوي على أنه زر ثانوي
  const secondaryBtn = document.querySelector('.modal-btn.secondary');
  if (secondaryBtn) {
    secondaryBtn.setAttribute('role', 'button');
    secondaryBtn.setAttribute('tabindex', '0');
  }
  
  // تعيين سمة aria-labelledby بشكل صحيح
  const modalTitle = document.querySelector('.modal-title');
  if (modalTitle) {
    const modalContainer = document.querySelector('.modal-container');
    if (modalContainer) {
      modalContainer.setAttribute('aria-labelledby', modalTitle.id || 'modal-title');
    }
  }
  
  // تفعيل المستمعين بعد إنشاء العناصر
  window.handleModalPrimary = () => {
    closeModal();
    if (onPrimary) onPrimary();
  };
  
  window.handleModalSecondary = () => {
    closeModal();
    if (onSecondary) onSecondary();
  };
  
  window.closeModal = () => {
    const overlay = document.getElementById('modal-overlay');
    if (overlay) {
      overlay.remove();
    }
    if (onClose) onClose();
  };
  
  // إضافة دعم التنقل بالكيبورد
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeModal();
    }
    
    // دعم التنقل بالتاب داخل المودال
    if (e.key === 'Tab') {
      const modal = document.querySelector('.modal-container');
      if (modal) {
        const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex="0"]');
        if (focusableElements.length > 0) {
          e.preventDefault();
          const currentFocus = document.activeElement;
          const currentIndex = Array.from(focusableElements).indexOf(currentFocus);
          
          if (!e.shiftKey) {
            // TAB بدون Shift - الانتقال إلى العنصر التالي
            const nextIndex = (currentIndex + 1) % focusableElements.length;
            focusableElements[nextIndex].focus();
          } else {
            // TAB مع Shift - الانتقال إلى العنصر السابق
            const prevIndex = (currentIndex - 1 + focusableElements.length) % focusableElements.length;
            focusableElements[prevIndex].focus();
          }
        }
      }
    }
  });
}

/**
 * إغلاق المودال
 */
export function closeModal() {
  const modal = document.getElementById('modal-overlay');
  if (modal) {
    modal.remove();
    document.body.style.overflow = '';
    
    // تشغيل callback الإغلاق
    if (window.modalCallbacks?.onClose) {
      window.modalCallbacks.onClose();
    }
    
    // تنظيف callbacks
    delete window.modalCallbacks;
  }
}

// إضافة closeModal إلى النطاق العام للاستخدام في onclick
window.closeModal = closeModal;

/**
 * معالج الزر الأساسي
 */
window.handleModalPrimary = function() {
  if (window.modalCallbacks?.onPrimary) {
    window.modalCallbacks.onPrimary();
  }
  closeModal();
}

/**
 * معالج الزر الثانوي
 */
window.handleModalSecondary = function() {
  if (window.modalCallbacks?.onSecondary) {
    window.modalCallbacks.onSecondary();
  }
  closeModal();
}

/**
 * الحصول على أيقونة المودال باستخدام Font Awesome (تم التعديل)
 */
export function getModalIcon(type) {
  const icons = {
    success: '<i class="fa-solid fa-circle-check"></i>',
    error: '<i class="fa-solid fa-circle-xmark"></i>',
    warning: '<i class="fa-solid fa-circle-exclamation"></i>',
    info: '<i class="fa-solid fa-circle-info"></i>'
  };
  
  return icons[type] || icons.info;
}

/**
 * دالة موحدة لعرض الرسائل باستخدام showModal
 * @param {string} message - محتوى الرسالة
 * @param {string} type - نوع الرسالة (success, error, warning, info)
 * @param {string|null} title - عنوان الرسالة (اختياري)
 */
export function showMessage(message, type = 'info', title = null) {
  const titles = {
    success: 'تم بنجاح!',
    error: 'حدث خطأ!',
    warning: 'تنبيه',
    info: 'معلومة'
  };
  
  showModal({
    type: type,
    title: title || titles[type] || 'رسالة',
    message: message,
    primaryText: 'موافق'
  });
}

/**
 * إنشاء rating stars تفاعلية
 * @param {HTMLElement} container - الحاوية
 * @param {number} initialRating - التقييم الأولي
 * @param {Function} onChange - دالة التغيير
 */
export function createRatingStars(container, initialRating = 0, onChange = null) {
  if (!container) return;

  const starsHTML = Array.from({length: 5}, (_, i) => {
    const starValue = 5 - i; // عكس الترتيب
    return `
      <input type="radio" name="rating" value="${starValue}" id="star${starValue}" ${starValue === initialRating ? 'checked' : ''}>
      <label for="star${starValue}">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
      </label>
    `;
  }).join('');

  container.innerHTML = `<div class="rating">${starsHTML}</div>`;

  // إضافة event listeners
  if (onChange) {
    const inputs = container.querySelectorAll('input[name="rating"]');
    inputs.forEach(input => {
      input.addEventListener('change', (e) => {
        onChange(parseInt(e.target.value));
      });
    });
  }
}

/**
 * عرض rating stars للقراءة فقط
 * @param {number} rating - التقييم
 * @param {number} maxStars - أقصى عدد نجوم
 */
export function displayRatingStars(rating, maxStars = 5) {
  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 !== 0;
  
  let starsHTML = '';
  
  for (let i = 0; i < maxStars; i++) {
    if (i < fullStars) {
      starsHTML += `<svg class="star" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
      </svg>`;
    } else if (i === fullStars && hasHalfStar) {
      starsHTML += `<svg class="star" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
        <defs>
          <linearGradient id="half-fill">
            <stop offset="50%" stop-color="currentColor"/>
            <stop offset="50%" stop-color="#e0e0e0"/>
          </linearGradient>
        </defs>
        <path fill="url(#half-fill)" d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
      </svg>`;
    } else {
      starsHTML += `<svg class="star empty" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
      </svg>`;
    }
  }
  
  return `<div class="rating-display">${starsHTML}</div>`;
}

// جعل الدوال المساعدة للمودال متاحة عالمياً (للاستخدام المباشر في onclick)
window.closeModal = closeModal;
window.handleModalPrimary = handleModalPrimary;
window.handleModalSecondary = handleModalSecondary;
window.showLoginRegisterModal = showLoginRegisterModal;

/**
 * إظهار loading overlay للصفحة كاملة
 * @param {string} title - عنوان التحميل
 * @param {string} message - رسالة التحميل
 * @returns {Function} دالة لإخفاء الـ overlay
 */
export function showLoadingOverlay(title = 'جارٍ التحميل', message = 'يرجى الانتظار...') {
  // إزالة أي overlay موجود
  hideLoadingOverlay();
  
  const overlay = document.createElement('div');
  overlay.className = 'loading-overlay';
  overlay.id = 'loading-overlay';
  
  overlay.innerHTML = `
    <div class="loading-content">
      <div class="loading-spinner large"></div>
      <h3>${title}</h3>
      <p>${message}</p>
    </div>
  `;
  
  document.body.appendChild(overlay);
  
  return hideLoadingOverlay;
}

/**
 * إخفاء loading overlay
 */
export function hideLoadingOverlay() {
  const overlay = document.getElementById('loading-overlay');
  if (overlay) {
    overlay.remove();
  }
}

/**
 * إضافة loading للنماذج
 * @param {HTMLFormElement} form - النموذج
 * @param {string} loadingText - نص التحميل
 * @returns {Function} دالة لإيقاف التحميل
 */
export function setFormLoading(form, loadingText = 'جارٍ الإرسال...') {
  if (!form) return () => {};
  
  const submitButton = form.querySelector('button[type="submit"]');
  const inputs = form.querySelectorAll('input, textarea, select');
  
  // تعطيل جميع الحقول
  inputs.forEach(input => {
    input.disabled = true;
  });
  
  // إضافة loading للزر
  const buttonLoader = submitButton ? setButtonLoading(submitButton, loadingText) : null;
  
  return () => {
    // إعادة تفعيل الحقول
    inputs.forEach(input => {
      input.disabled = false;
    });
    
    // إيقاف loading الزر
    if (buttonLoader) {
      buttonLoader.stop();
    }
  };
}

// Enhanced Skeleton loading functions
export function showWorkersSkeleton(container, count = 6) {
  if (!container) return;
  
  container.innerHTML = '';
  
  // If count is 0, just clear the container and return
  if (count === 0) return;
  
  for (let i = 0; i < count; i++) {
    const skeleton = document.createElement('div');
    skeleton.className = 'worker-card skeleton-card';
    skeleton.innerHTML = `
      <div class="worker-header">
        <div class="skeleton-avatar skeleton"></div>
        <div class="worker-info">
          <div class="skeleton-line skeleton"></div>
          <div class="skeleton-line skeleton"></div>
        </div>
      </div>
      <div class="worker-details">
        <div class="skeleton-line skeleton"></div>
        <div class="skeleton-line skeleton"></div>
        <div class="skeleton-line skeleton"></div>
      </div>
      <div class="worker-actions">
        <div class="skeleton-button skeleton"></div>
      </div>
    `;
    container.appendChild(skeleton);
  }
}

export function showProfileSkeleton(container) {
  if (!container) return;
  
  container.innerHTML = `
    <div class="profile-skeleton">
      <div class="skeleton-avatar-large skeleton"></div>
      <div class="skeleton-info">
        <div class="skeleton-line skeleton"></div>
        <div class="skeleton-line skeleton"></div>
        <div class="skeleton-line skeleton"></div>
        <div class="skeleton-line skeleton"></div>
        <div class="skeleton-line skeleton"></div>
        <div class="skeleton-button-large skeleton"></div>
      </div>
    </div>
  `;
}

export function showAppointmentsSkeleton(container, count = 4) {
  if (!container) return;
  
  container.innerHTML = '';
  for (let i = 0; i < count; i++) {
    const skeleton = document.createElement('div');
    skeleton.className = 'appointment-card skeleton-card';
    skeleton.innerHTML = `
      <div class="appointment-header">
        <div class="skeleton-line skeleton"></div>
        <div class="skeleton-line skeleton"></div>
      </div>
      <div class="appointment-details">
        <div class="skeleton-line skeleton"></div>
        <div class="skeleton-line skeleton"></div>
        <div class="skeleton-line skeleton"></div>
      </div>
      <div class="appointment-actions">
        <div class="skeleton-button skeleton"></div>
        <div class="skeleton-button skeleton"></div>
      </div>
    `;
    container.appendChild(skeleton);
  }
}

export function showReviewsSkeleton(container, count = 3) {
  if (!container) return;
  
  container.innerHTML = '';
  for (let i = 0; i < count; i++) {
    const skeleton = document.createElement('div');
    skeleton.className = 'review-card skeleton-card';
    skeleton.innerHTML = `
      <div class="review-header">
        <div class="skeleton-line skeleton"></div>
        <div class="skeleton-line skeleton"></div>
      </div>
      <div class="skeleton-line skeleton"></div>
      <div class="skeleton-line skeleton"></div>
    `;
    container.appendChild(skeleton);
  }
}

/**
 * عرض modal للمستخدمين غير المسجلين لتسجيل الدخول أو إنشاء حساب.
 */
export function showLoginRegisterModal() {
  showModal({
    type: 'info',
    title: 'تسجيل الدخول مطلوب',
    message: 'يجب عليك تسجيل الدخول أو إنشاء حساب لإتمام عملية الحجز.',
    primaryText: 'تسجيل الدخول',
    secondaryText: 'إنشاء حساب',
    onPrimary: () => { window.location.href = 'login.html'; },
    onSecondary: () => { window.location.href = 'register.html'; }
  });
}

/**
 * تحديث عرض معلومات المستخدم في واجهة التطبيق
 * @param {Object} user - بيانات المستخدم من Firebase Auth
 */
export function updateUserInfoDisplay(user) {
  const userInfoSpan = document.getElementById('user-info');
  if (userInfoSpan && user) {
    const safeEmail = sanitizeHTML(user.email);
    userInfoSpan.innerHTML = `مرحباً، ${safeEmail} (<span id="logout-link" style="cursor: pointer; text-decoration: underline;">تسجيل الخروج</span>)`;
    
    const logoutLink = document.getElementById('logout-link');
    if (logoutLink) {
      logoutLink.addEventListener('click', async () => {
        await signOut(auth);
        window.location.reload();
      });
    }
  } else {
    // إضافة إعادة التوجيه عند محاولة الوصول لصفحات محمية
    const protectedPages = ['/worker_profile.html', '/worker_dashboard.html', '/booking.html'];
    if (protectedPages.some(page => window.location.pathname.endsWith(page))) {
      window.location.href = 'index.html';
    }
  }
}

// دالة تحديث نموذج التقييم
export function updateReviewForm(userAlreadyReviewed, userReviewDocId = null) {
  const form = document.getElementById("review-form");
  if (!form) return;

  if (userAlreadyReviewed) {
    form.innerHTML = `
      <p style="text-align: center; color: var(--text-secondary);">
        لقد قمت بتقييم هذا الحلاق. يمكنك تعديله أو حذفه.
      </p>
    `;
  } else {
    form.innerHTML = `
      <p class="note">ملاحظة: يُسمح بتقييم واحد فقط لكل مستخدم. يمكنك تعديله أو حذفه لاحقًا.</p>
      <h4>أضف تقييمك</h4>
      <textarea id="review-text" required></textarea>
      <div class="rating-input-section">
        <label>اختر تقييمك:</label>
        <div id="review-rating-stars" class="rating-input-container"></div>
      </div>
      <button type="submit" class="btn primary-btn">إرسال</button>
    `;
    let selectedRating = 0;
    createRatingStars(
      document.getElementById("review-rating-stars"),
      0,
      r => selectedRating = r
    );
    const btn = form.querySelector("button");
    form.onsubmit = async e => {
      e.preventDefault();
      const comment = document.getElementById("review-text").value.trim();
      if (!isValidRating(selectedRating) || !comment) {
        return showModal({ type:"warning", title:"مطلوب", message:"أدخل تعليقًا وتقييمًا." });
      }
      const loader = setButtonLoading(btn, "جارٍ الإرسال...");
      try {
        const user = auth.currentUser;
        await addDoc(collection(db, "Reviews"), {
          workerId: localStorage.getItem("selectedWorkerUID"),
          comment, rating: selectedRating,
          userId: user.uid, userName: user.displayName || user.email || "مستخدم",
          createdAt: serverTimestamp()
        });
        await fetchAndRenderReviews(localStorage.getItem("selectedWorkerUID"), user.uid);
        loader.stop();
        showMessage("✅ تم إرسال التقييم بنجاح", "success");
      } catch (e) {
        loader.stop();
        showMessage("خطأ أثناء الإرسال", "error");
      }
    };
  }
}

/**
 * Sanitizes HTML input to prevent XSS attacks
 * @param {string} input - The user input to sanitize
 * @returns {string} Sanitized HTML string
 */
export function sanitizeHTML(input) {
  if (!input) return '';
  // 1. Remove script tags completely
  let sanitized = input.replace(/<script[^>]*>.*?<\/script>/gi, '');
  
  // 2. Escape HTML special characters
  sanitized = sanitized.replace(/[&<>'"`]/g, (match) => {
    const escapeMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      "'": '&#39;',
      '"': '&quot;',
      '`': '&#x60;'
    };
    return escapeMap[match];
  });
  
  // 3. Filter dangerous URI schemes
  sanitized = sanitized.replace(/(javascript:|data:)/gi, 'unsafe-protocol:');
  
  return sanitized;
}

// Add error logging function
export function logClientError(error, context = 'unknown') {
  try {
    const errorData = {
      message: error.message || 'Unknown error',
      stack: error.stack || 'No stack trace',
      context,
      timestamp: new Date().toISOString(),
      userAgent: navigator.userAgent,
      url: window.location.href
    };
    
    // Log to console for development
    console.error('Client Error:', errorData);
    
    // In production, send to Firebase
    if (typeof db !== 'undefined') {
      addDoc(collection(db, 'client_errors'), errorData)
        .catch(dbError => {
          console.error('Failed to log error to Firebase:', dbError);
        });
    }
  } catch (fatalError) {
    console.error('Fatal error logging failed:', fatalError);
  }
}

// Make logClientError globally available
window.logClientError = logClientError;

// جعل الدوال المساعدة للمودال متاحة عالمياً (للاستخدام المباشر في onclick)
window.closeModal = closeModal;
window.handleModalPrimary = handleModalPrimary;
window.handleModalSecondary = handleModalSecondary;
window.showLoginRegisterModal = showLoginRegisterModal;
window.showMessage = showMessage;

// إزالة select من firebase firestore import if not used elsewhere
// import { ..., select } from "...";
// التأكد من أن select لم يتم استخدامه في أي مكان آخر قبل حذفه بالكامل
// في هذا السياق، يبدو أنه لم يعد مستخدماً في booking.js
// ولكن لضمان عدم كسر شيء آخر، سأتركه كما هو حالياً.

====================================
File: js/firebase-config.js
====================================
// Firebase configuration
import { initializeApp } from 'https://www.gstatic.com/firebasejs/12.0.0/firebase-app.js';
import { getAuth, onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/12.0.0/firebase-auth.js';
import { getFirestore, doc, getDoc, collection, query, where, getDocs, addDoc, serverTimestamp, orderBy, updateDoc, deleteDoc } from 'https://www.gstatic.com/firebasejs/12.0.0/firebase-firestore.js';
import { firebaseEnv } from './env.js';

// Firebase configuration
const firebaseConfig = {
  apiKey: firebaseEnv.apiKey,
  authDomain: firebaseEnv.authDomain,
  projectId: firebaseEnv.projectId,
  storageBucket: firebaseEnv.storageBucket,
  messagingSenderId: firebaseEnv.messagingSenderId,
  appId: firebaseEnv.appId,
  measurementId: firebaseEnv.measurementId
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestore(app);

// Export individual Firestore functions
export { doc, getDoc, collection, query, where, getDocs, addDoc, serverTimestamp, orderBy, updateDoc, deleteDoc };

// Create global namespace for Firebase
window.firebase = {
  auth() { return auth; },
  db() { return db; },
  firestore: {
    doc,
    getDoc,
    updateDoc
  }
};

====================================
File: js/auth-check.js
====================================
import { getAuth, onAuthStateChanged, signOut } from "firebase/auth";

const auth = getAuth();
const loginBtn = document.getElementById('login-btn');
const userInfoSpan = document.getElementById('user-info');

onAuthStateChanged(auth, (user) => {
  if (user) {
    // User is signed in
    if (loginBtn) loginBtn.style.display = 'none';
    if (userInfoSpan) {
      userInfoSpan.style.display = 'inline';
      // You can display user information here, e.g., user's email or a logout button
      userInfoSpan.innerHTML = `مرحباً، ${user.email} (<span id="logout-link" style="cursor: pointer; text-decoration: underline;">تسجيل الخروج</span>)`;

      const logoutLink = document.getElementById('logout-link');
      if (logoutLink) {
        logoutLink.addEventListener('click', () => {
          signOut(auth).then(() => {
            // Sign-out successful.
            window.location.reload(); // Reload the page after logout
          }).catch((error) => {
            // An error happened.
            console.error('Error signing out: ', error);
          });
        });
      }
    }
  } else {
    // User is signed out
    if (loginBtn) loginBtn.style.display = 'inline';
    if (userInfoSpan) {
      userInfoSpan.style.display = 'none';
      userInfoSpan.innerHTML = ''; // Clear user info
    }
  }
});
====================================
File: js/login.js
====================================
//login.js
import { auth, db } from "./firebase-config.js";
import {
  signInWithEmailAndPassword,
  signInWithPopup,
  GoogleAuthProvider,
  FacebookAuthProvider,
} from "https://www.gstatic.com/firebasejs/12.0.0/firebase-auth.js";
import {
  doc,
  getDoc,
  setDoc,
  collection,
  query,
  where,
  getDocs
} from "https://www.gstatic.com/firebasejs/12.0.0/firebase-firestore.js";
import { 
  showModal, 
  showMessage, 
  setButtonLoading,
  updateUserInfoDisplay 
} from "./utils.js";

// ✅ Firebase imports
import { onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/12.0.0/firebase-auth.js';

// ⬇️ تسجيل الدخول بالبريد وكلمة المرور
document.getElementById("login-form").addEventListener("submit", async (e) => {
  e.preventDefault();

  const email = document.getElementById("email").value.trim();
  const password = document.getElementById("password").value;
  const submitButton = document.querySelector("#login-form button[type=submit]");
  
  if (!email || !password) {
    showModal({
      type: 'warning',
      title: 'بيانات مطلوبة',
      message: 'يرجى إدخال البريد الإلكتروني وكلمة المرور.',
      primaryText: 'موافق'
    });
    return;
  }

  // Show loading indicator
  const loader = setButtonLoading(submitButton, "جارٍ تسجيل الدخول...");
  
  try {
    const { user } = await signInWithEmailAndPassword(auth, email, password);
    
    // ➤ التحقق من وجود مستخدم بعد تسجيل الدخول
    if (user) {
      showMessage("تم تسجيل الدخول بنجاح!", 'success', 'مرحبًا بك');
      // ➤ إعادة توجيه المستخدم إلى لوحة التحكم بعد 1.5 ثانية
      setTimeout(() => {
        window.location.href = "worker_dashboard.html";
      }, 1500);
    }
  } catch (error) {
    console.error("❌ خطأ في تسجيل الدخول:", error);
    showMessage("فشل تسجيل الدخول. يرجى التأكد من البريد وكلمة المرور والمحاولة مجددًا.", 'error', 'خطأ في تسجيل الدخول');
  } finally {
    // Hide loading indicator
    if (loader && typeof loader.stop === 'function') {
      loader.stop();
    }
  }
});

// ⬇️ تبديل رؤية كلمة المرور
document.querySelectorAll('.eye-toggle').forEach(button => {
  button.addEventListener('click', () => {
    const inputId = button.getAttribute('data-target');
    const input = document.getElementById(inputId);
    const icon = button.querySelector('i');

    const hidden = input.type === "password";
    input.type = hidden ? "text" : "password";
    icon.classList.toggle("fa-eye", !hidden);
    icon.classList.toggle("fa-eye-slash", hidden);
  });
});

// ⬇️ تسجيل الدخول عبر Google
document
  .querySelector(".social-btn.google")
  .addEventListener("click", async () => {
    const provider = new GoogleAuthProvider();
    const button = document.querySelector(".social-btn.google");
    
    // Show loading indicator
    const loader = setButtonLoading(button, "جارٍ تسجيل الدخول عبر Google...");

    try {
      const result = await signInWithPopup(auth, provider);
      const user = result.user;
      const isNewUser = result._tokenResponse?.isNewUser;

      if (isNewUser) {
        showModal({
          type: 'info',
          title: 'إنشاء حساب جديد',
          message: 'هذا أول تسجيل دخول لك باستخدام Google، هل تريد إنشاء حساب جديد؟',
          primaryText: 'نعم، أنشئ حساب',
          secondaryText: 'إلغاء',
          onPrimary: async () => {
            await setDoc(doc(db, "users", user.uid), {
              uid: user.uid,
              email: user.email,
              role: "customer",
              createdAt: serverTimestamp(),
            });
            showModal({
              type: 'success',
              title: 'مرحباً بك! 🎉',
              message: 'تم إنشاء حسابك الجديد بنجاح. يمكنك الآن تصفح الحلاقين وحجز المواعيد.',
              primaryText: 'ابدأ التصفح',
              onPrimary: () => {
                window.location.href = "worker_list.html";
              }
            });
          },
          onSecondary: async () => {
            await user.delete();
            showModal({
              type: 'info',
              title: 'تم الإلغاء',
              message: 'تم إلغاء العملية ولم يتم إنشاء حساب.',
              primaryText: 'موافق'
            });
          }
        });
      } else {
        window.location.href = "worker_list.html";
      }
    } catch (error) {
      console.error("❌ خطأ في تسجيل الدخول عبر Google:", error);
      showMessage("فشل تسجيل الدخول عبر Google. يرجى المحاولة مرة أخرى.", 'error', 'خطأ في تسجيل الدخول');
    } finally {
      // Hide loading indicator
      if (loader && typeof loader.stop === 'function') {
        loader.stop();
      }
    }
  });

// ⬇️ تسجيل الدخول عبر Facebook
document
  .querySelector(".social-btn.facebook")
  .addEventListener("click", async () => {
    const provider = new FacebookAuthProvider();
    const button = document.querySelector(".social-btn.facebook");
    
    // Show loading indicator
    const loader = setButtonLoading(button, "جارٍ تسجيل الدخول عبر Facebook...");

    try {
      const result = await signInWithPopup(auth, provider);
      const user = result.user;
      const isNewUser = result._tokenResponse?.isNewUser;

      if (isNewUser) {
        showModal({
          type: 'info',
          title: 'إنشاء حساب جديد',
          message: 'هذا أول تسجيل دخول لك باستخدام Facebook، هل تريد إنشاء حساب جديد؟',
          primaryText: 'نعم، أنشئ حساب',
          secondaryText: 'إلغاء',
          onPrimary: async () => {
            await setDoc(doc(db, "users", user.uid), {
              uid: user.uid,
              email: user.email,
              role: "customer",
              createdAt: serverTimestamp(),
            });
            showModal({
              type: 'success',
              title: 'مرحباً بك! 🎉',
              message: 'تم إنشاء حسابك الجديد بنجاح. يمكنك الآن تصفح الحلاقين وحجز المواعيد.',
              primaryText: 'ابدأ التصفح',
              onPrimary: () => {
                window.location.href = "worker_list.html";
              }
            });
          },
          onSecondary: async () => {
            await user.delete();
            showModal({
              type: 'info',
              title: 'تم الإلغاء',
              message: 'تم إلغاء العملية ولم يتم إنشاء حساب.',
              primaryText: 'موافق'
            });
          }
        });
      } else {
        window.location.href = "worker_list.html";
      }
    } catch (error) {
      console.error("❌ خطأ في تسجيل الدخول عبر Facebook:", error);
      showMessage("فشل تسجيل الدخول عبر Facebook. يرجى المحاولة مرة أخرى.", 'error', 'خطأ في تسجيل الدخول');
    } finally {
      // Hide loading indicator
      if (loader && typeof loader.stop === 'function') {
        loader.stop();
      }
    }
  });
====================================
File: js/register.js
====================================
// register.js
import { auth, db } from './firebase-config.js';
import {
  createUserWithEmailAndPassword,
  signInWithPopup,
  GoogleAuthProvider,
  FacebookAuthProvider
} from 'https://www.gstatic.com/firebasejs/12.0.0/firebase-auth.js';

import {
  doc,
  setDoc,
  getDoc,
  serverTimestamp,
  collection,
  addDoc,
  query,
  where,
  getDocs,
  getCountFromServer
} from 'https://www.gstatic.com/firebasejs/12.0.0/firebase-firestore.js';

// ✅ Added sanitizeHTML and updateUserInfoDisplay to imports
import { 
  showModal, 
  setButtonLoading, 
  showMessage, 
  logClientError, 
  sanitizeHTML,
  updateUserInfoDisplay
} from "./utils.js";

// ➤ إنشاء حساب بالبريد وكلمة المرور
document.getElementById('register-form').addEventListener('submit', async (e) => {
  e.preventDefault();

  try {
    const email = sanitizeHTML(document.getElementById('reg-email').value.trim());
    const password = document.getElementById('reg-password').value;
    const confirmPassword = document.getElementById('reg-confirm').value;

    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailPattern.test(email)) {
      showModal({
        type: 'warning',
        title: 'بريد إلكتروني غير صالح',
        message: 'يرجى إدخال بريد إلكتروني صحيح.',
        primaryText: 'موافق'
      });
      return;
    }

    // ➤ التحقق من قوة كلمة المرور باستخدام Regex متقدم
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#\$%&*]).{8,}$/;
    if (!passwordRegex.test(password)) {
      showModal({
        type: 'warning',
        title: 'كلمة مرور غير آمنة',
        message: `كلمة المرور يجب أن تحتوي على:\n- 8 أحرف على الأقل\n- حرف كبير وصغير\n- رقم\n- رمز خاص (!@#$%&*)`,
        primaryText: 'موافق'
      });
      return;
    }

    if (password !== confirmPassword) {
      showModal({
        type: 'warning',
        title: 'كلمات المرور غير متطابقة',
        message: 'يرجى التأكد من تطابق كلمتي المرور.',
        primaryText: 'موافق'
      });
      return;
    }

    const userCredential = await createUserWithEmailAndPassword(
      auth,
      email,
      password
    );
    
    // إضافة رسالة نجاح واضحة
    showModal({
      type: 'success',
      title: 'تم إنشاء الحساب!',
      message: 'مرحبًا بك في منصة Mawidy. يمكنك الآن تسجيل الدخول باستخدام بياناتك الجديدة.',
      primaryText: 'تسجيل الدخول',
      onPrimary: () => window.location.href = "login.html"
    });
    
    // تحديث معلومات المستخدم في Firestore
    const user = userCredential.user;
    await setDoc(doc(db, "users", user.uid), {
      uid: user.uid,
      email,
      role: "customer",
      createdAt: serverTimestamp()
    });
  } catch (error) {
    console.error("❌ خطأ في إنشاء الحساب:", error.message);
    
    // رسائل أخطاء أكثر تحديدًا
    let errorMessage = "فشل إنشاء الحساب. يرجى المحاولة مرة أخرى.";
    if (error.code === 'auth/email-already-in-use') {
      errorMessage = "البريد الإلكتروني مستخدم بالفعل. يرجى اختيار بريد آخر.";
    } else if (error.code === 'auth/weak-password') {
      errorMessage = "كلمة المرور ضعيفة جدًا. يجب أن تكون كلمة المرور 8 حروف على الأقل وتحتوي على حروف كبيرة وصغيرة وأرقام وحروف خاصة.";
    } else if (error.code === 'auth/invalid-email') {
      errorMessage = "يرجى إدخال بريد إلكتروني صالح.";
    }
    
    showMessage(errorMessage, 'error', 'فشل إنشاء الحساب');
  }
});

// ✅ التحقق من تسجيل الدخول
onAuthStateChanged(auth, async (user) => {
  if (!user) {
    // ➤ إعادة التوجيه للصفحة الرئيسية إذا كان المستخدم غير مسجل الدخول
    showModal({
      type: 'warning',
      title: 'تسجيل الدخول مطلوب',
      message: 'يجب تسجيل الدخول أولاً لاستخدام المنصة.
      primaryText: 'تسجيل الدخول',
      onPrimary: () => window.location.href = "login.html"
    });
    
    setTimeout(() => {
      window.location.href = 'index.html';
    }, 3000);
    return;
  }
  
  currentUser = user;
  setupEventListeners();
});

// ➤ إظهار/إخفاء كلمة المرور
document.querySelectorAll('.eye-toggle').forEach(button => {
  button.addEventListener('click', () => {
    const inputId = button.getAttribute('data-target');
    const input = document.getElementById(inputId);
    const icon = button.querySelector('i');

    const hidden = input.type === "password";
    input.type = hidden ? "text" : "password";
    icon.classList.toggle("fa-eye", !hidden);
    icon.classList.toggle("fa-eye-slash", hidden);
  });
});

// ➤ تسجيل باستخدام Google
document.querySelector('.social-btn.google').addEventListener('click', async () => {
  const provider = new GoogleAuthProvider();

  try {
    const result = await signInWithPopup(auth, provider);
    const user = result.user;

    const userRef = doc(db, "users", user.uid);
    const userSnap = await getDoc(userRef);

    if (!userSnap.exists()) {
      // أول مرة، أنشئ الحساب
      await setDoc(userRef, {
        uid: user.uid,
        email: user.email,
        role: "customer",
        createdAt: serverTimestamp()
      });
      console.log("✅ تم إنشاء حساب Google جديد");
    }

    window.location.href = "worker_list.html";
  } catch (error) {
    console.error("❌ خطأ في إنشاء الحساب عبر Google:", error);
    showMessage("فشل إنشاء الحساب عبر Google. يرجى المحاولة مرة أخرى.", 'error', 'خطأ في التسجيل');
  }
});

// ➤ تسجيل باستخدام Facebook
document.querySelector('.social-btn.facebook').addEventListener('click', async () => {
  const provider = new FacebookAuthProvider();

  try {
    const result = await signInWithPopup(auth, provider);
    const user = result.user;

    const userRef = doc(db, "users", user.uid);
    const userSnap = await getDoc(userRef);

    if (!userSnap.exists()) {
      await setDoc(userRef, {
        uid: user.uid,
        email: user.email,
        role: "customer",
        createdAt: serverTimestamp()
      });
      console.log("✅ تم إنشاء حساب Facebook جديد");
    }

    window.location.href = "worker_list.html";
  } catch (error) {
    console.error("❌ خطأ في إنشاء الحساب عبر Facebook:", error);
    showMessage("فشل إنشاء الحساب عبر Facebook. يرجى المحاولة مرة أخرى.", 'error', 'خطأ في التسجيل');
  }
});

====================================
File: js/worker.js
====================================
// worker.js
import { db, auth, updateDoc, doc } from "./firebase-config.js";
import {
  collection,
  getDocs,
  query,
  where,
  getDoc,
  addDoc,
  serverTimestamp
} from "https://www.gstatic.com/firebasejs/12.0.0/firebase-firestore.js";
import { onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/12.0.0/firebase-auth.js';

// Make auth available globally for retry functionality
window.auth = auth;
import { formatStars, showWorkersSkeleton, setButtonLoading, displayRatingStars, showLoginRegisterModal, showMessage } from "./utils.js";

let allWorkers = []; // مصفوفة لتخزن جميع الحلاقين

// ✅ تحميل بيانات الحلاقين من قاعدة البيانات
async function loadWorkers() {
  const container = document.getElementById("workers-container");
  const loadingState = document.getElementById("loading-state");
  const emptyState = document.getElementById("empty-state");
  
  try {
    showWorkersSkeleton(container, 6);
    
    // الحصول على بيانات جميع الحلاقين
    // تعديل الاستعلام ليتوافق مع قواعد الأمان في Firebase
    const workersRef = collection(db, "users");
    const q = query(workersRef, where("role", "==", "worker"));
    const querySnapshot = await getDocs(q);
    
    allWorkers = [];
    querySnapshot.forEach((doc) => {
      allWorkers.push({ id: doc.id, ...doc.data() });
    });
    
    // تحديث التقييمات الفعلية للحلاقين
    for (let i = 0; i < allWorkers.length; i++) {
      const worker = allWorkers[i];
      // التحقق من أن المستخدم لديه حق الوصول لقراءة التقييمات
      try {
        const ratingsRef = collection(db, "users", worker.id, "ratings");
        const ratingsSnapshot = await getDocs(ratingsRef);
        
        let totalRating = 0;
        let ratingCount = 0;
        
        ratingsSnapshot.forEach((doc) => {
          const ratingData = doc.data();
          totalRating += ratingData.average;
          ratingCount++;
        });
        
        worker.actualRating = ratingCount > 0 ? (totalRating / ratingCount).toFixed(1) : "0.0";
      } catch (ratingsError) {
        // في حالة عدم وجود صلاحيات لقراءة التقييمات، نضع قيمة افتراضية
        console.warn(`لا يمكن قراءة التقييمات للحلاق ${worker.id}:`, ratingsError);
        worker.actualRating = "0.0";
      }
    }
    
    // عرض الحلاقين
    displayWorkers(allWorkers);
  } catch (error) {
    console.error("❌ خطأ في تحميل بيانات الحلاقين:", error);
    showMessage("فشل تحميل بيانات الحلاقين. يرجى المحاولة مرة أخرى.", 'error');
    
    if (loadingState) loadingState.style.display = "none";
    if (emptyState) {
      emptyState.style.display = "block";
      container.style.display = "none";
    }
  } finally {
    showWorkersSkeleton(container, 0);
  }
}

// ✅ عرض الحلاقين في الواجهة
function displayWorkers(workers) {
  const container = document.getElementById("workers-container");
  const loadingState = document.getElementById("loading-state");
  const emptyState = document.getElementById("empty-state");

  if (loadingState) loadingState.style.display = "none";
  
  if (!workers.length) {
    if (emptyState) {
      emptyState.style.display = "block";
      container.style.display = "none";
    }
    return;
  }

  if (emptyState) emptyState.style.display = "none";
  container.style.display = "grid";
  
  container.innerHTML = "";

  workers.forEach(worker => {
    const card = document.createElement("div");
    card.className = "worker-card";

    // Header
    const header = document.createElement("div");
    header.className = "worker-header";

    const avatar = document.createElement("div");
    avatar.className = "worker-avatar";
    const initials = worker.name?.split(' ').map(w => w[0]).join('').substring(0, 2) || "?";
    avatar.textContent = initials;

    const info = document.createElement("div");
    info.className = "worker-info";

    const name = document.createElement("h3");
    name.textContent = worker.name;

    const rating = document.createElement("div");
    rating.className = "worker-rating";
    const ratingContainer = document.createElement("div");
				    ratingContainer.className = "rating-container";
    const ratingValue = parseFloat(worker.actualRating || 0);
    ratingContainer.innerHTML = `
      ${displayRatingStars(ratingValue)}
      <span class="rating-text" style="margin-right: 8px; color: var(--text-secondary);">(${worker.actualRating || "0.0"})</span>
    `;
    rating.appendChild(ratingContainer);

    info.appendChild(name);
    info.appendChild(rating);
    header.appendChild(avatar);
    header.appendChild(info);

    // Details
    const details = document.createElement("div");
    details.className = "worker-details";

    const specialties = document.createElement("div");
    specialties.className = "worker-specialties";
    ["حلاقة", "لحية", "تصفيف"].forEach(service => {
      const tag = document.createElement("span");
      tag.className = "specialty-tag";
      tag.textContent = service;
      specialties.appendChild(tag);
    });

    const location = document.createElement("div");
    location.className = "worker-location";
    location.innerHTML = `<i class="fas fa-map-marker-alt"></i> ${worker.location || "الموقع غير محدد"}`;

    details.appendChild(specialties);
    details.appendChild(location);

    // Status
    const status = document.createElement("div");
    status.className = "worker-status";

    const badge = document.createElement("span");
    badge.className = `availability-badge ${worker.isAvailable ? 'available' : 'unavailable'}`;
    badge.textContent = worker.isAvailable ? "متاح الآن" : "غير متاح";

    const bookBtn = document.createElement("button");
    bookBtn.className = "book-btn";
    bookBtn.textContent = worker.isAvailable ? "احجز الآن" : "غير متاح";
    bookBtn.disabled = !worker.isAvailable;

    if (worker.isAvailable) {
      bookBtn.addEventListener("click", () => {
        onAuthStateChanged(auth, user => {
          if (user) {
            // المستخدم مسجل الدخول، اسمح له بالانتقال إلى صفحة الحجز
            const loader = setButtonLoading(bookBtn, "جارٍ التحميل...");
            localStorage.setItem("selectedWorkerUID", worker.id);
            // تأخير قصير لإظهار loading ثم التوجيه
            setTimeout(() => {
              window.location.href = `booking.html?workerId=${worker.id}`;
            }, 500);
          } else {
            // المستخدم غير مسجل الدخول، اعرض الـ Modal
            showLoginRegisterModal();
          }
        });
      });
    }

    card.addEventListener("click", (e) => {
      if (e.target !== bookBtn) {
        localStorage.setItem("selectedWorkerUID", worker.id);
        window.location.href = "worker_profile.html";
      }
    });

    status.appendChild(badge);
    status.appendChild(bookBtn);

    card.appendChild(header);
    card.appendChild(details);
    card.appendChild(status);

    container.appendChild(card);
  })};
// ⬇️ Event listener للصفحة
document.addEventListener("DOMContentLoaded", async () => {
  // تحميل بيانات الحلاقين
  await loadWorkers();
});
====================================
File: js/worker_profile.js
====================================
import { auth, db } from "./firebase-config.js";
import {
  doc, getDoc, collection, query, where, getDocs,
  addDoc, serverTimestamp, orderBy, updateDoc, deleteDoc
} from "https://www.gstatic.com/firebasejs/12.0.0/firebase-firestore.js";
import { onAuthStateChanged } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-auth.js";
import {
  calculateAverageFromTotals, isValidRating, setButtonLoading,
  showModal, displayRatingStars, createRatingStars,
  showProfileSkeleton, showReviewsSkeleton, showMessage
} from "./utils.js";
import dayjs from "https://esm.sh/dayjs@1.11.10";
import relativeTime from "https://esm.sh/dayjs@1.11.10/plugin/relativeTime";
import "https://esm.sh/dayjs@1.11.10/locale/ar";

dayjs.extend(relativeTime);
dayjs.locale("ar");

document.addEventListener("DOMContentLoaded", () => {
  const container = document.querySelector(".profile-container");
  showProfileSkeleton(container);

  onAuthStateChanged(auth, async user => {
    if (!user) {
      // ➤ إعادة التوجيه للصفحة الرئيسية إذا كان المستخدم غير مسجل الدخول
      showModal({
        type: 'warning',
        title: 'تسجيل الدخول مطلوب',
        message: 'يجب تسجيل الدخول أولاً لمشاهدة ملف الحلاق.',
        primaryText: 'تسجيل الدخول',
        onPrimary: () => window.location.href = "login.html"
      });
      
      // ➤ إضافة إعادة التوجيه الإجبارية بعد فترة قصيرة
      setTimeout(() => {
        window.location.href = 'index.html';
      }, 3000);
      return;
    }

    const currentUserId = user.uid;
    let uid = localStorage.getItem("selectedWorkerUID") ||
              new URLSearchParams(location.search).get("workerId");
    if (!uid) {
      showMessage("لم يتم تحديد الحلاق.", "warning");
      return setTimeout(() => location.href = "worker_list.html", 2000);
    }
    localStorage.setItem("selectedWorkerUID", uid);

    try {
      const snap = await getDoc(doc(db, "worker", uid));
      if (!snap.exists()) throw new Error("غير موجود");
      const worker = snap.data();

      container.innerHTML = `
        <div class="card">
          <img id="worker-photo" class="worker-photo" loading="lazy" />
          <h2 id="worker-name"></h2>
          <p id="worker-phone"></p>
          <p id="worker-bio" class="bio"></p>
          <p class="worker-status">الحالة: <span id="worker-status"></span></p>
          <div class="worker-rating-section">
            <strong>التقييم:</strong>
            <div id="worker-rating" class="rating-display-container"></div>
          </div>
          <button id="bookNowBtn" class="btn primary-btn">احجز الآن</button>
        </div>
        <div class="reviews-section">
          <h3>آراء العملاء</h3>
          <div id="reviews-list"></div>
          <form id="review-form"></form>
        </div>
      `;

      document.getElementById("worker-photo").src = worker.photoURL || "img/default-avatar.svg";
      document.getElementById("worker-photo").onerror = () => {
        document.getElementById("worker-photo").src = "img/default-avatar.svg";
      };
      document.getElementById("worker-name").textContent = worker.name || "غير متوفر";
      document.getElementById("worker-phone").textContent = worker.phone || "غير متوفر";
      document.getElementById("worker-bio").textContent = worker.bio || "لا يوجد وصف";
      document.getElementById("worker-status").textContent = worker.isAvailable ? "متاح الآن" : "غير متاح";
      const bookBtn = document.getElementById("bookNowBtn");
      bookBtn.disabled = !worker.isAvailable;
      bookBtn.onclick = () => {
        setButtonLoading(bookBtn, "... جار التحميل");
        localStorage.setItem("selectedWorkerUID", uid);
        setTimeout(() => location.href = "booking.html", 500);
      };

      await fetchAndRenderReviews(uid, currentUserId);

    } catch (e) {
      showModal({
        type: "error",
        title: "خطأ",
        message: "تعذر تحميل بيانات الحلاق.",
        primaryText: "إعادة المحاولة",
        onPrimary: () => location.reload()
      });
    }
  });
});

async function fetchAndRenderReviews(workerId, currentUserId) {
  const container = document.getElementById("reviews-list");
  for (let i = 0; i < 5 && !container; i++) {
    await new Promise(r => setTimeout(r, 100));
  }
  if (!container) return console.error("reviews-list غير موجود");

  showReviewsSkeleton(container, 3);
  const snaps = await getDocs(
    query(
      collection(db, "Reviews"),
      where("workerId", "==", workerId),
      orderBy("createdAt", "desc")
    )
  );
  container.innerHTML = "";

  let total = 0, count = 0, userReviewed = false, userDocId = null;
  snaps.forEach(docSnap => {
    const r = docSnap.data(), id = docSnap.id;
    const dateStr = r.createdAt?.toDate ? dayjs(r.createdAt.toDate()).fromNow() : "";
    total += r.rating || 0; count++;
    if (r.userId === currentUserId) {
      userReviewed = true;
      userDocId = id;
    }
    const div = document.createElement("div");
    div.className = "review-item";
    div.dataset.reviewId = id;
    div.dataset.comment = r.comment || "";
    div.dataset.rating = r.rating || 0;
    div.innerHTML = `
      <div class="review-header">
        <div class="review-avatar">${(r.userName || "م")[0]}</div>
        <div>
          <span class="review-user">${r.userName || "مستخدم"}</span>
          <span class="review-date">${dateStr}</span>
        </div>
        <div class="review-stars">${displayRatingStars(r.rating || 0)}</div>
      </div>
      <p class="review-comment">${r.comment || ""}</p>
    `;
    if (r.userId === currentUserId) {
      const edit = document.createElement("button");
      edit.textContent = "تعديل";
      edit.className = "btn edit-btn";
      edit.onclick = () => showEditForm(id);
      const del = document.createElement("button");
      del.textContent = "حذف";
      del.className = "btn delete-btn";
      del.onclick = () => confirmDelete(id, workerId, currentUserId, del);
      div.append(edit, del);
    }
    container.append(div);
  });

  const avg = calculateAverageFromTotals(total, count);
  document.getElementById("worker-rating").innerHTML =
    `${displayRatingStars(parseFloat(avg))}<span>(${avg})</span>`;

  if (!userReviewed) {
    setupReviewForm();
  } else {
    document.getElementById("review-form").innerHTML = `
      <p class="already-rated">لقد قمت بتقييم هذا الحلاق من قبل. يمكنك تعديل أو حذف تقييمك أعلاه.</p>
    `;
  }
}

function confirmDelete(reviewId, workerId, currentUserId, btn) {
  showModal({
    type: "warning",
    title: "تأكيد الحذف",
    message: "هل تريد حذف التقييم؟",
    primaryText: "نعم",
    secondaryText: "إلغاء",
    onPrimary: async () => {
      const loader = setButtonLoading(btn, "جارٍ الحذف...");
      try {
        await deleteDoc(doc(db, "Reviews", reviewId));
        await fetchAndRenderReviews(workerId, currentUserId);
      } catch {
        showMessage("خطأ أثناء الحذف", "error");
      } finally {
        loader.stop();
      }
    }
  });
}

function setupReviewForm() {
  const form = document.getElementById("review-form");
  form.innerHTML = `
    <h4>أضف تقييمك</h4>
    <textarea id="review-text" required></textarea>
    <div class="rating-input-section">
      <label>اختر تقييمك:</label>
      <div id="review-rating-stars" class="rating-input-container"></div>
    </div>
    <button type="submit" class="btn primary-btn">إرسال</button>
  `;
  let selectedRating = 0;
  createRatingStars(
    document.getElementById("review-rating-stars"),
    0,
    r => selectedRating = r
  );
  form.onsubmit = async e => {
    e.preventDefault();
    const comment = document.getElementById("review-text").value.trim();
    if (!isValidRating(selectedRating) || !comment) {
      return showModal({ type: "warning", title: "مفقود", message: "رجاءً أدخل تقييم وتعليق." });
    }
    const btn = form.querySelector("button");
    const loader = setButtonLoading(btn, "جارٍ الإرسال...");
    try {
      const user = auth.currentUser;
      await addDoc(collection(db, "Reviews"), {
        workerId: localStorage.getItem("selectedWorkerUID"),
        comment, rating: selectedRating,
        userId: user.uid, userName: user.displayName || user.email || "مستخدم",
        createdAt: serverTimestamp()
      });
      await fetchAndRenderReviews(localStorage.getItem("selectedWorkerUID"), user.uid);
      form.reset();
      loader.stop();
      showMessage("تم الإرسال!", "success");
    } catch {
      loader.stop();
      showMessage("خطأ أثناء الإرسال", "error");
    }
  };
}

function showEditForm(reviewId) {
  const item = document.querySelector(`[data-review-id="${reviewId}"]`);
  const comment = item.dataset.comment;
  const rating = parseInt(item.dataset.rating);
  const form = document.getElementById("review-form");
  form.innerHTML = `
    <h4>تعديل التقييم</h4>
    <textarea id="edit-review-text">${comment}</textarea>
    <div class="rating-input-section">
      <label>اختر تقييمك:</label>
      <div id="edit-review-rating-stars" class="rating-input-container"></div>
    </div>
    <button id="save-edit-btn" class="btn primary-btn">حفظ</button>
    <button id="cancel-edit-btn" class="btn secondary-btn">إلغاء</button>
  `;
  let edited = rating;
  createRatingStars(
    document.getElementById("edit-review-rating-stars"),
    rating,
    v => edited = v
  );
  document.getElementById("save-edit-btn").onclick = async () => {
    const btn = document.getElementById("save-edit-btn");
    const loader = setButtonLoading(btn, "جارٍ الحفظ...");
    try {
      await updateDoc(doc(db, "Reviews", reviewId), {
        comment: document.getElementById("edit-review-text").value.trim(),
        rating: edited,
        updatedAt: serverTimestamp()
      });
      const user = auth.currentUser;
      await fetchAndRenderReviews(localStorage.getItem("selectedWorkerUID"), user.uid);
      loader.stop();
      showMessage("تم التعديل!", "success");
    } catch {
      loader.stop();
      showMessage("خطأ أثناء التعديل", "error");
    }
  };
  document.getElementById("cancel-edit-btn").onclick = () => {
    const user = auth.currentUser;
    fetchAndRenderReviews(localStorage.getItem("selectedWorkerUID"), user.uid);
  };
}

// ✅ حفظ التقييم
async function saveRating() {
  const ratingInputs = document.querySelectorAll('.rating-stars input[name="rating"]:checked');
  const commentInput = document.getElementById("review-text");
  
  // التأكد من وجود تقييم
  if (ratingInputs.length === 0) {
    showMessage("يرجى اختيار تقييم بين 1 و5 نجوم.", 'warning', 'تقييم مطلوب');
    return;
  }
  
  // التأكد من وجود تعليق
  const comment = commentInput.value.trim();
  if (!comment || comment.length < 5) {
    showMessage("يرجى إدخال تعليق بحد أدنى 5 أحرف.", 'warning', 'تعليق غير كافٍ');
    return;
  }
  
  try {
    const workerId = localStorage.getItem('selectedWorkerUID');
    if (!workerId) {
      showMessage("لم يتم تحديد الحلاق. يرجى العودة لقائمة الحلاقين.", 'error', 'فشل في التقييم');
      return;
    }
    
    await addDoc(collection(db, "Reviews"), {
      workerId,
      clientId: auth.currentUser.uid,
      rating: parseInt(ratingInputs[0].value),
      comment: sanitizeHTML(comment),
      createdAt: serverTimestamp()
    });
    
    // عرض رسالة نجاح واضحة
    showModal({
      type: 'success',
      title: 'تم إرسال التقييم!',
      message: 'شكرًا لتقييمك. سيتم مشاركته مع الحلاق.',
      primaryText: 'حسنًا',
      onPrimary: () => window.location.reload()
    });
  } catch (error) {
    console.error("❌ خطأ في حفظ التقييم:", error);
    showMessage("فشل حفظ التقييم. يرجى المحاولة مرة أخرى.", 'error', 'خطأ في الحفظ');
  }
}

// ✅ التعامل مع فشل تحميل التقييمات
    } catch (error) {
      console.error("❌ خطأ في تحميل التقييمات:", error);
      showMessage("فشل تحميل التقييمات. يرجى المحاولة مرة أخرى.", 'error', 'خطأ في التحميل');
    }
====================================
File: js/booking.js
====================================
//booking.js
// ⬇️ Firebase imports
import { auth } from "./firebase-config.js";
import { 
  db,
  addDoc, 
  collection, 
  serverTimestamp, 
  doc, 
  getDoc,
  query,
  where,
  getDocs,
  getCountFromServer
} from "https://www.gstatic.com/firebasejs/12.0.0/firebase-firestore.js";
import { onAuthStateChanged } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-auth.js";

// ⬇️ UI imports
import { 
  setButtonLoading, 
  showLoadingState, 
  showModal, 
  displayRatingStars, 
  showMessage,
  showLoginRegisterModal
} from "./utils.js"; // تحديث الاستيرادات لتتضمن جميع الوظائف المستخدمة

const serviceRadios = document.querySelectorAll('input[name="service"]');
const dateInput = document.getElementById("date");
const timeInput = document.getElementById("time");
const totalPriceSpan = document.getElementById("total-price");
const confirmBtn = document.getElementById("confirmBooking");

const selectedWorkerUID = localStorage.getItem("selectedWorkerUID");

// دالة لعرض الرسائل باستخدام Modal (تم نقلها إلى utils.js واستيرادها)
// function showMessage(message, type = 'info', title = null) { ... }

// ✅ دالة لحساب التقييم الفعلي للحلاق من مجموعة Reviews باستخدام utils
async function calculateWorkerRating(workerId) {
  try {
    const reviewsRef = collection(db, "Reviews");
    const q = query(reviewsRef, where("workerId", "==", workerId));
    const reviewsSnap = await getDocs(q);
    
    if (reviewsSnap.empty) {
      return "0.0";
    }
    
    let total = 0;
    let count = 0;
    reviewsSnap.forEach((docSnap) => {
      const rating = docSnap.data().rating || 0;
      total += rating;
      count++;
    });
    
    return (total / count).toFixed(1);
  } catch (error) {
    console.error("خطأ في حساب التقييم ��لحلاق:", workerId, error);
    return "0.0";
  }
}

// ✅ دالة تحميل بيانات الحلاق
async function loadWorkerData(workerId) {
  try {
    const workerDoc = await getDoc(doc(db, "worker", workerId));
    if (!workerDoc.exists()) {
      console.error("❌ لم يتم العثور على بيانات الحلاق");
      showEmptyState();
      return;
    }

    const workerData = workerDoc.data();
    
    // تحديث العنوان
    const bookingTitle = document.querySelector(".booking-title");
    if (bookingTitle) {
      bookingTitle.textContent = `احجز موعدك مع ${workerData.name} 📅`;
    }
    
    // عرض معلومات الحلاق
    const workerInfo = document.getElementById("worker-info");
    const workerAvatarDisplay = document.getElementById("worker-avatar-display");
    const workerNameDisplay = document.getElementById("worker-name-display");
    const workerPhoneDisplay = document.getElementById("worker-phone-display");
    const workerRatingDisplay = document.getElementById("worker-rating-display");
    
    // إنشاء avatar بالأحرف الأولى
    if (workerAvatarDisplay) {
      const initials = workerData.name.split(' ').map(n => n[0]).join('').substring(0, 2);
      workerAvatarDisplay.textContent = initials;
    }
    
    if (workerNameDisplay) workerNameDisplay.textContent = workerData.name;
    if (workerPhoneDisplay) workerPhoneDisplay.innerHTML = `<i class="fas fa-phone"></i> ${workerData.phone || "غير متوفر"}`;
    
    // حساب التقييم الفعلي من مجموعة Reviews
    const actualRating = await calculateWorkerRating(workerId);
    if (workerRatingDisplay) {
      workerRatingDisplay.innerHTML = `
        ${displayRatingStars(parseFloat(actualRating))}
        <span style="margin-right: 8px; color: var(--text-secondary);">(${actualRating})</span>
      `;
    }
    
    // إظهار معلومات الحلاق
    if (workerInfo) workerInfo.style.display = "block";
  } catch (error) {
    console.error("❌ خطأ في تحميل بيانات الحلاق:", error);
    showEmptyState();
  }
}

// ✅ عرض حالة فارغة عند عدم وجود حلاقين متاحين
function showEmptyState() {
  const container = document.getElementById("worker-info");
  const emptyState = document.getElementById("empty-state");
  
  if (container) container.style.display = "none";
  if (document.getElementById("booking-form")) document.getElementById("booking-form").style.display = "none";
  
  if (emptyState) {
    emptyState.style.display = "block";
  } else {
    console.warn("⚠️ لم يتم العثور على عنصر empty-state في DOM");
  }
}

// ✅ حساب السعر عند تغيير نوع الخدمة
serviceRadios.forEach(radio => {
  radio.addEventListener("change", () => {
    if (radio.checked) {
      const price = parseInt(radio.getAttribute("data-price"));
      totalPriceSpan.textContent = price;
    }
  });
});

// تحديد السعر الافتراضي وتاريخ اليوم كحد أدنى
document.addEventListener("DOMContentLoaded", () => {
  const firstService = document.querySelector('input[name="service"]');
  if (firstService) {
    firstService.checked = true;
    const price = parseInt(firstService.getAttribute("data-price"));
    totalPriceSpan.textContent = price;
  }
  
  // تحديد التاريخ الأدنى لليوم الحالي
  const today = new Date().toISOString().split('T')[0];
  dateInput.min = today;
  
  // تحميل معلومات العامل
  if (selectedWorkerUID) {
    loadWorkerData(selectedWorkerUID);
  } else {
    showMessage("لم يتم اختيار حلاق. سيتم توجيهك لقائمة الحلاقين", 'error');
    setTimeout(() => {
      window.location.href = "worker_list.html";
    }, 3000);
  }
});

// ✅ التحقق من تسجيل الدخول وتحميل البيانات
onAuthStateChanged(auth, (user) => {
  if (!user) {
    showMessage("يجب تسجيل الدخول أولاً لحجز موعد.", 'error');
    setTimeout(() => {
      window.location.href = "login.html";
    }, 2000);
    return;
  }
  
  currentUser = user;
  loadWorkerData(selectedWorkerUID);
});

// ✅ معالجة إرسال النموذج
async function handleBookingSubmit(e) {
  e.preventDefault();

  const service = document.querySelector('input[name="service"]:checked');
  const date = document.getElementById("date").value;
  const time = document.getElementById("time").value;
  const submitButton = document.getElementById("confirmBooking");

  if (!service || !date || !time) {
    showModal({
      type: 'warning',
      title: 'بيانات ناقصة',
      message: 'يرجى ملء جميع الحقول المطلوبة.',
      primaryText: 'حسنًا'
    });
    return;
  }

  // عرض مؤشر التحميل
  const loader = setButtonLoading(submitButton, "جارٍ تأكيد الحجز...");

  try {
    const workerId = localStorage.getItem("selectedWorkerUID");
    const user = auth.currentUser;

    if (!user) {
      showLoginRegisterModal();
      return;
    }

    await addDoc(collection(db, "Appointments"), {
      workerId,
      clientId: user.uid,
      clientName: user.displayName || user.email,
      service: service.value,
      price: parseInt(service.dataset.price),
      date,
      time,
      status: "بانتظار التأكيد",
      createdAt: serverTimestamp()
    });

    // عرض رسالة نجاح واضحة
    showModal({
      type: 'success',
      title: 'تم تأكيد الحجز!',
      message: `تم تأكيد الحجز بنجاح. سيتم إعلام الحلاق بالموعد الجديد.

تفاصيل الموعد:
• الخدمة: ${service.value}
• التاريخ: ${date}
• الوقت: ${time}`,
      primaryText: 'حسنًا',
      onPrimary: () => window.location.href = "worker_list.html"
    });

  } catch (error) {
    console.error("❌ خطأ في تأكيد الحجز:", error);
    showMessage("فشل تأكيد الحجز. يرجى المحاولة مرة أخرى.", 'error', 'خطأ في التأكيد');
  } finally {
    // إخفاء مؤشر التحميل
    if (loader && typeof loader.stop === 'function') {
      loader.stop();
    }
  }
}

// تهيئة مستمع الحدث بعد تعريف الدالة
const bookingForm = document.getElementById("booking-form");
if (bookingForm) {
  bookingForm.addEventListener("submit", handleBookingSubmit);
}

====================================
File: js/worker_dashboard.js
====================================
/*worker_dashboard.js*/
import { auth, db } from "./firebase-config.js";
import { 
  onAuthStateChanged, 
  signOut 
} from "https://www.gstatic.com/firebasejs/12.0.0/firebase-auth.js";
import { 
  collection, 
  query, 
  where, 
  getDocs, 
  doc, 
  updateDoc,
  orderBy,
  addDoc,
  serverTimestamp,
  getDoc
} from "https://www.gstatic.com/firebasejs/12.0.0/firebase-firestore.js";
import { showModal, showAppointmentsSkeleton, setButtonLoading, showMessage } from "./utils.js"; // إضافة showMessage

// عناصر DOM
const appointmentsList = document.getElementById("appointments-list");
const statusFilter = document.getElementById("status-filter");
const dateFilter = document.getElementById("date-filter");
const clearFiltersBtn = document.getElementById("clear-filters");
const refreshBtn = document.getElementById("refresh-btn");
const logoutBtn = document.getElementById("logout-btn");
const confirmationModal = document.getElementById("confirmation-modal");
const modalTitle = document.getElementById("modal-title");
const modalMessage = document.getElementById("modal-message");
const confirmActionBtn = document.getElementById("confirm-action");
const cancelActionBtn = document.getElementById("cancel-action");
const workerLanguagesDisplay = document.getElementById("worker-languages"),
      workerExperienceDisplay = document.getElementById("worker-experience"),
      workerEducationDisplay = document.getElementById("worker-education"),
      workerCertificationsDisplay = document.getElementById("worker-certifications"),
      workerAwardsDisplay = document.getElementById("worker-awards"),
      workerPortfolioDisplay = document.getElementById("worker-portfolio"),
      workerTestimonialsDisplay = document.getElementById("worker-testimonials");

// متغيرات عامة
let allAppointments = [];
let currentUser = null;
let pendingAction = null;

// ✅ التحقق من تسجيل الدخول وتحميل البيانات
onAuthStateChanged(auth, async (user) => {
  if (!user) {
    // ➤ إعادة التوجيه للصفحة الرئيسية إذا كان المستخدم غير مسجل الدخول
    showModal({
      type: 'warning',
      title: 'تسجيل الدخول مطلوب',
      message: 'يجب تسجيل الدخول أولاً للوصول إلى لوحة التحكم.',
      primaryText: 'تسجيل الدخول',
      onPrimary: () => window.location.href = "login.html"
    });
    
    // ➤ إضافة إعادة التوجيه الإجبارية بعد فترة قصيرة
    setTimeout(() => {
      window.location.href = 'index.html';
    }, 3000);
    return;
  }
  
  currentUser = user;
  await loadAppointments();
  setupEventListeners();
  setupAccessibility(); // إضافة دالة تحسين الوصولية
});

// ✅ تحميل المواعيد من Firebase
async function loadAppointments() {
  try {
    // عرض skeleton loading للمواعيد
    showAppointmentsSkeleton(appointmentsList, 4);

    const q = query(
      collection(db, "Appointments"),
      where("workerId", "==", currentUser.uid),
      orderBy("createdAt", "desc")
    );
    
    const snapshot = await getDocs(q);
    allAppointments = [];
    
    snapshot.forEach(docSnap => {
      const data = docSnap.data();
      allAppointments.push({
        id: docSnap.id,
        ...data
      });
    });

    updateStats();
    displayAppointments(allAppointments);
    
  } catch (error) {
    console.error("خطأ في تحميل المواعيد:", error);
    // استخدام showMessage بدلاً من إضافة HTML يدوي
    showMessage('حدث خطأ في تحميل البيانات. يرجى المحاولة مرة أخرى.', 'error', 'خطأ');
    appointmentsList.innerHTML = ""; // مسح أي محتوى سابق
  }
}

// ✅ عرض المواعيد
function displayAppointments(appointments) {
  appointmentsList.innerHTML = "";

  if (appointments.length === 0) {
    appointmentsList.innerHTML = `
      <div class="empty-state">
        <i class="fas fa-calendar-times" aria-hidden="true"></i>
        <h3>لا توجد مواعيد</h3>
        <p>لم يتم العثور على مواعيد مطابقة للفلاتر المحددة</p>
        <button class="btn secondary-btn" onclick="location.reload()">
          <i class="fas fa-redo"></i>
          إعادة التحميل
        </button>
      </div>
    `;
    return;
  }

  appointments.forEach(appointment => {
    const card = createAppointmentCard(appointment);
    appointmentsList.appendChild(card);
  });
  
  // بعد تحديث DOM، إضافة سمات ARIA للمكونات الديناميكية
  addDynamicAriaAttributes();
}

// ✅ إضافة سمات ARIA للمكونات الديناميكية بعد إنشائها
function addDynamicAriaAttributes() {
  // إضافة سمات ARIA لبطاقات المواعيد
  const appointmentCards = document.querySelectorAll('.appointment-card');
  appointmentCards.forEach((card, index) => {
    card.setAttribute('role', 'article');
    card.setAttribute('aria-labelledby', `appointment-title-${index}`);
    
    // إضافة ID فريد للعناصر الداخلية إن لم يكن موجوداً
    const clientNameElement = card.querySelector('.client-info h3');
    if (clientNameElement) {
      clientNameElement.setAttribute('id', `appointment-title-${index}`);
    }
    
    // إضافة سمات ARIA للأزرار
    const actionButtons = card.querySelectorAll('.action-btn');
    actionButtons.forEach((button, btnIndex) => {
      button.setAttribute('role', 'button');
      button.setAttribute('tabindex', '0');
      button.setAttribute('aria-label', `${button.textContent.trim()} للموعد ${index + 1}`);
      
      // إضافة تعليمات صوتية للقراء الشاشة
      const srOnly = document.createElement('span');
      srOnly.className = 'sr-only';
      srOnly.textContent = 'اضغط Enter أو المس لتفعيل هذا الزر';
      srOnly.setAttribute('aria-live', 'polite');
      button.appendChild(srOnly);
    });
  });
}

// ✅ إنشاء بطاقة موعد
function createAppointmentCard(appointment) {
  const card = document.createElement("div");
  card.className = `appointment-card ${getStatusClass(appointment.status)} fade-in`;
  
  // تنسيق التاريخ والوقت
  const formattedDate = formatDate(appointment.date);
  const formattedTime = formatTime(appointment.time);
  
  // الحرف الأول من اسم العميل للأفاتار
  const clientInitial = appointment.clientName ? appointment.clientName.charAt(0).toUpperCase() : "ع";
  
  card.innerHTML = `
    <div class="appointment-header">
      <div class="client-info">
        <div class="client-avatar" role="img" aria-label="صورة شخصية لـ ${appointment.clientName || "عميل"}">${clientInitial}</div>
        <div>
          <h3 style="margin: 0; color: #333;" tabindex="0">${appointment.clientName || "عميل"}</h3>
          <small style="color: #666;">عميل رقم: ${appointment.clientId.substring(0, 8)}...</small>
        </div>
      </div>
      <div class="status-badge ${getStatusClass(appointment.status)}" 
           role="status" 
           aria-live="polite"
           aria-label="حالة الموعد: ${appointment.status}">
        ${appointment.status}
      </div>
    </div>
    
    <div class="appointment-details" role="group" aria-label="تفاصيل الموعد">
      <div class="detail-item">
        <i class="fas fa-cut" aria-hidden="true"></i>
        <span><strong>الخدمة:</strong> ${appointment.service}</span>
      </div>
      <div class="detail-item">
        <i class="fas fa-money-bill-wave" aria-hidden="true"></i>
        <span><strong>السعر:</strong> ${appointment.price} دج</span>
      </div>
      <div class="detail-item">
        <i class="fas fa-calendar-alt" aria-hidden="true"></i>
        <span><strong>التاريخ:</strong> ${formattedDate}</span>
      </div>
      <div class="detail-item">
        <i class="fas fa-clock" aria-hidden="true"></i>
        <span><strong>الوقت:</strong> ${formattedTime}</span>
      </div>
      <div class="detail-item">
        <i class="fas fa-info-circle" aria-hidden="true"></i>
        <span><strong>تاريخ الطلب:</strong> ${formatCreatedAt(appointment.createdAt)}</span>
      </div>
    </div>
    
    ${appointment.status === "بانتظار التأكيد" ? `
      <div class="appointment-actions" role="group" aria-label="إجراءات الموعد">
        <button class="action-btn accept-btn" 
                data-id="${appointment.id}" 
                data-action="accept"
                aria-label="تأكيد الموعد لـ ${appointment.clientName}"
                title="تأكيد الموعد">
          <i class="fas fa-check" aria-hidden="true"></i>
          <span>تأكيد الموعد</span>
        </button>
        <button class="action-btn reject-btn" 
                data-id="${appointment.id}" 
                data-action="reject"
                aria-label="رفض الموعد لـ ${appointment.clientName}"
                title="رفض الموعد">
          <i class="fas fa-times" aria-hidden="true"></i>
          <span>رفض الموعد</span>
        </button>
      </div>
    ` : ""}
  `;
  
  return card;
}

// ✅ تحديث الإحصائيات
function updateStats() {
  const pending = allAppointments.filter(app => app.status === "بانتظار التأكيد").length;
  const confirmed = allAppointments.filter(app => app.status === "تم التأكيد").length;
  const rejected = allAppointments.filter(app => app.status === "مرفوض").length;
  
  document.getElementById("pending-count").textContent = pending;
  document.getElementById("confirmed-count").textContent = confirmed;
  document.getElementById("rejected-count").textContent = rejected;
}

// ✅ إعداد مستمعي الأحداث
function setupEventListeners() {
  // أزرار الإجراءات
  appointmentsList.addEventListener("click", handleAppointmentAction);
  
  // فلاتر
  statusFilter.addEventListener("change", applyFilters);
  dateFilter.addEventListener("change", applyFilters);
  clearFiltersBtn.addEventListener("click", clearFilters);
  
  // أزرار الهيدر
  refreshBtn.addEventListener("click", loadAppointments);
  logoutBtn.addEventListener("click", handleLogout);
  
  // نافذة التأكيد (المودال الجديدة هي showModal)
  // يجب إزالة مستمعي الأحداث من المودال القديمة إذا كانت لا تزال موجودة في HTML
  if(confirmActionBtn) confirmActionBtn.removeEventListener("click", executeAction);
  if(cancelActionBtn) cancelActionBtn.removeEventListener("click", closeModal);
  if(confirmationModal) confirmationModal.removeEventListener("click", (e) => {
    if (e.target === confirmationModal) {
      closeModal();
    }
  });

  // استخدام showModal الجديدة للإغلاق
  // closeModal is now globally available from utils.js
  
  // إضافة مستمع للوحة المواعيد لتحسين التنقل بالتاب
  appointmentsList.addEventListener('keydown', handleAppointmentsListKeydown);
}

// ✅ التعامل مع ضغط مفاتيح لوحة المواعيد
function handleAppointmentsListKeydown(e) {
  // إذا تم الضغط على Enter أو Space على بطاقة موعد
  if ((e.key === 'Enter' || e.key === ' ') && e.target.classList.contains('appointment-card')) {
    e.preventDefault();
    
    // فتح أول زر إجراء في البطاقة إن وجد
    const actionButton = e.target.querySelector('.action-btn');
    if (actionButton) {
      actionButton.click();
    }
  }
}

// ✅ معالجة إجراءات المواعيد
function handleAppointmentAction(e) {
  if (e.target.classList.contains("action-btn")) { // تعديل للتحقق من أي زر إجراء
    const appointmentId = e.target.getAttribute("data-id");
    const action = e.target.getAttribute("data-action");
    const appointment = allAppointments.find(app => app.id === appointmentId);
    
    if (!appointment) return;
    
    // إضافة loading للزر المضغوط
    const clickedButton = e.target;
    const loader = setButtonLoading(clickedButton, "جارٍ المعالجة...");
    
    // تخزين الإجراء والزر للاستخدام لاحقاً في executeAction
    pendingAction = {
      appointmentId,
      action,
      appointment,
      buttonLoader: loader
    };
    
    // عرض نافذة التأكيد باستخدام showModal
    const isAccept = action === "accept";
    showModal({
      type: isAccept ? 'info' : 'warning',
      title: isAccept ? "تأكيد الموعد" : "رفض الموعد",
      message: `هل أنت متأكد من ${isAccept ? "تأكيد" : "رفض"} موعد العميل ${appointment.clientName}؟

تفاصيل الموعد:
• الخدمة: ${appointment.service}
• التاريخ: ${formatDate(appointment.date)}
• الوقت: ${formatTime(appointment.time)}`,
      primaryText: isAccept ? "تأكيد الموعد" : "رفض الموعد",
      secondaryText: "إلغاء",
      onPrimary: () => executeAction(appointmentId, action), // استدعاء executeAction عند التأكيد
      onSecondary: () => {
        console.log('تم إلغاء العملية');
        // إيقاف loading الزر الأصلي إذا ألغى المستخدم
        if (pendingAction && pendingAction.buttonLoader) {
           pendingAction.buttonLoader.stop();
        }
        pendingAction = null; // مسح الإجراء المعلق
      }
    });
  }
}

// ✅ تنفيذ الإجراء
async function executeAction(appointmentId, action) {
  // لا حاجة لتحديث نص الزر هنا، loading يتم إدارته في handleAppointmentAction
  // ولا حاجة لتعطيل الأزرار هنا أيضاً.

  if (!appointmentId || !action) {
     // إيقاف loading الزر الأصلي في حالة وجود خطأ غير متوقع
    if (pendingAction && pendingAction.buttonLoader) {
       pendingAction.buttonLoader.stop();
    }
    pendingAction = null;
    return;
  }

  const newStatus = action === "accept" ? "تم التأكيد" : "مرفوض";
  
  try {
    await updateDoc(doc(db, "Appointments", appointmentId), {
      status: newStatus
    });
    
    // تحديث البيانات المحلية
    const appointmentIndex = allAppointments.findIndex(app => app.id === appointmentId);
    if (appointmentIndex !== -1) {
      allAppointments[appointmentIndex].status = newStatus;
    }
    
    // closeModal(); // showModal تقوم بالإغلاق تلقائياً بعد onPrimary
    updateStats();
    displayAppointments(getFilteredAppointments());
    
    showMessage(
      action === "accept" ? 
        "تم تأكيد الموعد بنجاح. سيتم إشعار العميل بالتأكيد." :
        "تم رفض الموعد. سيتم إشعار العميل بالرفض.",
      'success', // استخدام نوع success لرسائل النجاح
      action === "accept" ? "تم تأكيد الموعد!" : "تم رفض الموعد"
    );
    
  } catch (error) {
    console.error("خطأ في تحديث الموعد:", error);
    showMessage('حدث خطأ أثناء تحديث الموعد. يرجى المحاولة مرة أخرى.', 'error', 'خطأ في التحديث');
  } finally {
    // إيقاف loading الزر الأصلي بعد انتهاء العملية (سواء نجحت أو فشلت)
    if (pendingAction && pendingAction.buttonLoader) {
      pendingAction.buttonLoader.stop();
    }
    pendingAction = null; // مسح الإجراء المعلق
  }
}

// ✅ إغلاق نافذة التأكيد (هذه الدالة لم تعد تستخدم المودال القديمة مباشرة)
// يمكن إزالة هذه الدالة إذا لم يتم استدعاؤها من أي مكان آخر
// أو تحديثها لاستدعاء closeModal() العامة إذا كانت لا تزال ضرورية لإغلاق المودال القديمة
// بناءً على المراجعة الأولية، يبدو أن المودال القديمة في HTML يمكن إزالتها.
// للحفاظ على التوافق إذا كانت هناك استدعاءات أخرى غير معروفة، سأتركها تستدعي closeModal العامة.
function closeModal() {
   window.closeModal(); // استدعاء closeModal العامة من utils.js
}

// ✅ تطبيق الفلاتر
function applyFilters() {
  const filteredAppointments = getFilteredAppointments();
  displayAppointments(filteredAppointments);
}

// ✅ الحصول على المواعيد المفلترة
function getFilteredAppointments() {
  let filtered = [...allAppointments];
  
  // فلترة حسب الحالة
  const statusValue = statusFilter.value;
  if (statusValue) {
    filtered = filtered.filter(app => app.status === statusValue);
  }
  
  // فلترة حسب التاريخ
  const dateValue = dateFilter.value;
  if (dateValue) {
    filtered = filtered.filter(app => app.date === dateValue);
  }
  
  return filtered;
}

// ✅ مسح الفلاتر
function clearFilters() {
  statusFilter.value = "";
  dateFilter.value = "";
  displayAppointments(allAppointments);
}

// ✅ تسجيل الخروج
async function handleLogout() {
  try {
    await signOut(auth);
    window.location.href = "index.html";
  } catch (error) {
    console.error("خطأ في تسجيل الخروج:", error);
    // استخدام showMessage بدلاً من showNotification
    showMessage('حدث خطأ أثناء تسجيل الخروج. يرجى المحاولة مرة أخرى.', 'error', 'فشل تسجيل الخروج');
  }handleLogout
}

// ✅ تحسين الوصولية - إضافة جديدة
function setupAccessibility() {
  // إعداد التركيز على المودال عند فتحه
  const modal = document.getElementById("confirmation-modal");
  if (modal) {
    // إضافة مستمع لفتح المودال
    modal.addEventListener('show', () => {
      // البحث عن أول عنصر قابل للتركيز داخل المودال
      const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex="0"]');
      if (focusableElements.length > 0) {
        // تحديد أول عنصر قابل للتركيز
        focusableElements[0].focus();
        
        // إنشاء حلقة تركيز داخل المودال
        createFocusTrap(modal, focusableElements);
      }
    });
  }
}

// ✅ إنشاء حلقة تركيز داخل عنصر معين (مثل المودال)
function createFocusTrap(container, focusableElements) {
  // التعامل مع التنavig بالتاب
  container.addEventListener('keydown', (e) => {
    if (e.key === 'Tab') {
      // الحصول على العنصر الحالي الذي لديه التركيز
      const currentFocus = document.activeElement;
      
      // إذا لم يكن هناك أي عنصر في التركيز، التركيز على الأول
      if (!currentFocus) {
        e.preventDefault();
        focusableElements[0].focus();
        return;
      }
      
      // الحصول على مؤشر العنصر الحالي في القائمة
      const currentIndex = Array.from(focusableElements).indexOf(currentFocus);
      
      // إذا كان الضغط على TAB بدون Shift
      if (!e.shiftKey) {
        e.preventDefault();
        // إذا كان العنصر الحالي هو الأخير، العودة إلى الأول
        if (currentIndex === focusableElements.length - 1) {
          focusableElements[0].focus();
        } else {
          // التركيز على العنصر التالي
          focusableElements[currentIndex + 1].focus();
        }
      } 
      // إذا كان الضغط على TAB مع Shift
      else {
        e.preventDefault();
        // إذا كان العنصر الحالي هو الأول، التركيز على الأخير
        if (currentIndex === 0) {
          focusableElements[focusableElements.length - 1].focus();
        } else {
          // التركيز على العنصر السابق
          focusableElements[currentIndex - 1].focus();
        }
      }
    }
  });
}

// ✅ دوال مساعدة (لا تستخدم آليات رسائل غير موحدة)

function getStatusClass(status) {
  switch (status) {
    case "بانتظار التأكيد":
      return "pending";
    case "تم التأكيد":
      return "confirmed";
    case "مرفوض":
      return "rejected";
    default:
      return "";
  }
}

function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString("ar-SA", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric"
  });
}

function formatTime(timeString) {
  const [hours, minutes] = timeString.split(":");
  const hour = parseInt(hours);
  const period = hour >= 12 ? "مساءً" : "صباحاً";
  const displayHour = hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;
  return `${displayHour}:${minutes} ${period}`;
}

function formatCreatedAt(timestamp) {
  if (!timestamp || !timestamp.toDate) return "غير محدد";
  
  const date = timestamp.toDate();
  return date.toLocaleDateString("ar-SA", {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit"
  });
}

// ✅ حفظ تقييم العامل
async function saveWorkerRating(workerId, rating, comment) {
  try {
    // التأكد من صحة التقييم
    if (!isValidRating(rating)) {
      showMessage("يرجى اختيار تقييم بين 1 و5 نجوم.", 'warning', 'تقييم خاطئ');
      return;
    }
    
    // التأكد من وجود تعليق
    if (!comment || comment.trim().length < 5) {
      showMessage("يرجى إدخال تعليق بحد أدنى 5 أحرف.", 'warning', 'تعليق غير كافٍ');
      return;
    }
    
    await addDoc(collection(db, "Reviews"), {
      workerId,
      clientId: auth.currentUser.uid,
      rating,
      comment: sanitizeHTML(comment),
      createdAt: serverTimestamp()
    });
    
    // عرض رسالة نجاح واضحة
    showModal({
      type: 'success',
      title: 'تم إرسال التقييم!',
      message: 'شكرًا لتقييمك. سيتم مشاركته مع الحلاق.',
      primaryText: 'حسنًا',
      onPrimary: () => {
        window.location.reload();
      }
    });
  } catch (error) {
    console.error("❌ خطأ في حفظ التقييم:", error);
    showMessage("فشل حفظ التقييم. يرجى المحاولة مرة أخرى.", 'error', 'خطأ في الحفظ');
  }
}

// ✅ تحديث حالة الموعد
async function updateAppointmentStatus(appointmentId, newStatus) {
  try {
    const appointmentRef = doc(db, "Appointments", appointmentId);
    await updateDoc(appointmentRef, { status: newStatus });
    
    // عرض رسالة نجاح
    showModal({
      type: 'success',
      title: 'تم تحديث الحالة!',
      message: `تم تحديث حالة الموعد إلى "${newStatus}" بنجاح.`,
      primaryText: 'حسنًا'
    });
    
    // إعادة تحميل المواعيد بعد 1.5 ثانية
    setTimeout(async () => {
      allAppointments = [];
      await loadAppointments();
    }, 1500);
  } catch (error) {
    console.error("❌ خطأ في تحديث الحالة:", error);
    showMessage("فشل تحديث حالة الموعد. يرجى المحاولة مرة أخرى.", 'error', 'خطأ في التحديث');
  }
}

// ✅ تحميل معلومات العامل
async function loadWorkerInfo() {
  try {
    const workerDoc = await getDoc(doc(db, "workers", currentUser.uid));
    if (workerDoc.exists()) {
      const workerData = workerDoc.data();
      
      // تحديث معلومات العامل في DOM
      if (workerLanguagesDisplay) workerLanguagesDisplay.textContent = workerData.languages?.join(", ") || "غير متوفر";
      if (workerExperienceDisplay) workerExperienceDisplay.textContent = workerData.experience || "غير متوفر";
      if (workerEducationDisplay) workerEducationDisplay.textContent = workerData.education || "غير متوفر";
      if (workerCertificationsDisplay) workerCertificationsDisplay.textContent = workerData.certifications?.join(", ") || "غير متوفر";
      if (workerAwardsDisplay) workerAwardsDisplay.textContent = workerData.awards?.join(", ") || "غير متوفر";
      if (workerPortfolioDisplay) workerPortfolioDisplay.innerHTML = workerData.portfolio?.map(url => `<a href="${url}" target="_blank">روابط المحفظة</a>`).join("، ") || "غير متوفر";
      if (workerTestimonialsDisplay) {
        // استخدام أول شهادة كمثال
        if (workerData.testimonials && workerData.testimonials.length > 0) {
          workerTestimonialsDisplay.textContent = workerData.testimonials[0];
        } else {
          workerTestimonialsDisplay.textContent = "لا توجد شهادات";
        }
      }
    }
  } catch (error) {
    console.error("❌ خطأ في تحميل معلومات العامل:", error);
    showMessage("فشل تحميل معلومات العامل. يرجى المحاولة مرة أخرى.", 'error', 'خطأ في التحميل');
  }
}

// ✅ عرض المواعيد
function renderAppointments(appointments) {
  const container = document.getElementById("appointments-container");
  if (!container) return;

  // إظهار حالة الفراغ عند عدم وجود مواعيد
  if (appointments.length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <i class="fas fa-calendar-times"></i>
        <h3>لا توجد مواعيد</h3>
        <p>عذرًا، لا يوجد مواعيد متاحة في الوقت الحالي</p>
        <button class="btn secondary-btn touch-target" onclick="location.reload()">
          <i class="fas fa-redo"></i>
          إعادة التحميل
        </button>
      </div>
    `;
    return;
  }

  container.innerHTML = "";

  appointments.forEach(appointment => {
    const card = createAppointmentCard(appointment);
    container.appendChild(card);
  });
}

// ✅ معالجة إرسال النموذج
async function handleBookingSubmit(e) {
  e.preventDefault();

  const service = document.querySelector('input[name="service"]:checked');
  const date = document.getElementById("date").value;
  const time = document.getElementById("time").value;
  const submitButton = document.getElementById("confirmBooking");

  if (!service || !date || !time) {
    showModal({
      type: 'warning',
      title: 'بيانات ناقصة',
      message: 'يرجى ملء جميع الحقول المطلوبة.',
      primaryText: 'حسنًا'
    });
    return;
  }

  // عرض مؤشر التحميل
  const loader = setButtonLoading(submitButton, "جارٍ تأكيد الحجز...");

  try {
    const workerId = localStorage.getItem("selectedWorkerUID");
    const user = auth.currentUser;

    if (!user) {
      showLoginRegisterModal();
      return;
    }

    await addDoc(collection(db, "Appointments"), {
      workerId,
      clientId: user.uid,
      clientName: user.displayName || user.email,
      service: service.value,
      price: parseInt(service.dataset.price),
      date,
      time,
      status: "بانتظار التأكيد",
      createdAt: serverTimestamp()
    });

    // عرض رسالة نجاح واضحة
    showModal({
      type: 'success',
      title: 'تم تأكيد الحجز!',
      message: `تم تأكيد الحجز بنجاح. سيتم إعلام الحلاق بالموعد الجديد.

تفاصيل الموعد:
• الخدمة: ${service.value}
• التاريخ: ${date}
• الوقت: ${time}`,
      primaryText: 'حسنًا',
      onPrimary: () => window.location.href = "worker_list.html"
    });

  } catch (error) {
    console.error("❌ خطأ في تأكيد الحجز:", error);
    showMessage("فشل تأكيد الحجز. يرجى المحاولة مرة أخرى.", 'error', 'خطأ في التأكيد');
  } finally {
    // إخفاء مؤشر التحميل
    if (loader && typeof loader.stop === 'function') {
      loader.stop();
    }
  }
}

// تم استبدال showNotification بدالة showMessage من utils.js
// يمكن إزالة تعريف دالة showNotification هنا إذا لم يتم استخدامها في أي مكان آخر.
// للحفاظ على التوافق إذا كانت هناك استدعاءات أخرى غير معروفة، سأتركها حالياً مع رسالة تحذير.
function showNotification(message, type = "info") {
  console.warn("⚠️ تم استدعاء showNotification قديمة. استخدم showModal أو showMessage بدلاً منها.");
  showMessage(message, type);
}

// إزالة تنسيقات الحركة الخاصة بالإشعارات القديمة إذا لم تعد ضرورية
// يمكن إبقاء هذا الكود إذا كانت التنسيقات تستخدم لأغراض أخرى.
// بناءً على المراجعة، يبدو أنها خاصة بـ showNotification ويمكن إزالتها.
// للتأكد، سأتركها حالياً.
const style = document.createElement("style");
style.textContent = `
  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  @keyframes slideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
`;
document.head.appendChild(style);
====================================
File: js/mock-data.js
====================================
// mock-data.js - بيانات وهمية للاختبار
export const mockWorkers = [
  {
    id: "worker1",
    name: "أحمد محمد",
    phone: "0123456789",
    location: "الرياض - حي النخيل",
    isAvailable: true,
    services: ["قص شعر", "حلاقة", "تشذيب لحية"],
    rating: 4.8,
    reviewsCount: 45,
    experience: "5 سنوات",
    description: "حلاق محترف متخصص في القصات العصرية والكلاسيكية",
    avatar: "AM"
  },
  {
    id: "worker2", 
    name: "محمد علي",
    phone: "0123456790",
    location: "جدة - حي الصفا",
    isAvailable: true,
    services: ["قص شعر", "صبغة", "تشذيب لحية"],
    rating: 4.6,
    reviewsCount: 32,
    experience: "3 سنوات",
    description: "خبير في الصبغات والقصات الحديثة",
    avatar: "مع"
  },
  {
    id: "worker3",
    name: "عبدالله سالم", 
    phone: "0123456791",
    location: "الدمام - حي الشاطئ",
    isAvailable: false,
    services: ["قص شعر", "حلاقة", "عناية بالشعر"],
    rating: 4.9,
    reviewsCount: 67,
    experience: "8 سنوات", 
    description: "حلاق ذو خبرة عالية في جميع أنواع القصات",
    avatar: "عس"
  },
  {
    id: "worker4",
    name: "يوسف أحمد",
    phone: "0123456792", 
    location: "الرياض - حي العليا",
    isAvailable: true,
    services: ["قص شعر", "تشذيب لحية", "ماسك للوجه"],
    rating: 4.7,
    reviewsCount: 28,
    experience: "4 سنوات",
    description: "متخصص في العناية الشاملة والقصات العصرية",
    avatar: "يأ"
  },
  {
    id: "worker5",
    name: "خالد عبدالرحمن",
    phone: "0123456793",
    location: "مكة - حي العزيزية", 
    isAvailable: true,
    services: ["قص شعر", "حلاقة", "تدليك فروة الرأس"],
    rating: 4.5,
    reviewsCount: 19,
    experience: "2 سنة",
    description: "حلاق شاب ومبدع في القصات الحديثة",
    avatar: "خع"
  },
  {
    id: "worker6",
    name: "سعد الغامدي",
    phone: "0123456794",
    location: "الطائف - حي الشهداء",
    isAvailable: true, 
    services: ["قص شعر", "صبغة", "تشذيب لحية", "عناية بالشعر"],
    rating: 4.8,
    reviewsCount: 53,
    experience: "6 سنوات",
    description: "خبير في جميع خدمات الحلاقة والعناية",
    avatar: "سغ"
  }
];

export const mockReviews = [
  {
    id: "review1",
    workerId: "worker1", 
    userId: "user1",
    userName: "عبدالله محمد",
    rating: 5,
    comment: "خدمة ممتازة وقصة رائعة، أنصح بشدة!",
    createdAt: new Date(2024, 0, 15)
  },
  {
    id: "review2",
    workerId: "worker1",
    userId: "user2", 
    userName: "فهد السعيد",
    rating: 4,
    comment: "حلاق محترف ونظيف، سأعود مرة أخرى",
    createdAt: new Date(2024, 0, 10)
  },
  {
    id: "review3",
    workerId: "worker2",
    userId: "user3",
    userName: "أحمد الزهراني", 
    rating: 5,
    comment: "أفضل صبغة حصلت عليها، شكراً لك!",
    createdAt: new Date(2024, 0, 8)
  },
  {
    id: "review4", 
    workerId: "worker3",
    userId: "user4",
    userName: "محمد العتيبي",
    rating: 5,
    comment: "خبرة عالية ونتيجة مذهلة، الأفضل في المنطقة",
    createdAt: new Date(2024, 0, 5)
  },
  {
    id: "review5",
    workerId: "worker4",
    userId: "user5",
    userName: "سالم القحطاني",
    rating: 4,
    comment: "خدمة جيدة وسعر مناسب",
    createdAt: new Date(2024, 0, 3)
  }
];

// دالة لحساب التقييم من المراجعات الوهمية
export function calculateMockRating(workerId) {
  const workerReviews = mockReviews.filter(review => review.workerId === workerId);
  if (workerReviews.length === 0) return 0;
  
  const totalRating = workerReviews.reduce((sum, review) => sum + review.rating, 0);
  return (totalRating / workerReviews.length).toFixed(1);
}

// دالة للحصول على مراجعات حلاق معين
export function getMockReviews(workerId) {
  return mockReviews.filter(review => review.workerId === workerId);
}
====================================
File: js/auth-guard.js
====================================
// js/auth-guard.js
import { auth } from './firebase-config.js';
import { onAuthStateChanged, signOut } from 'https://www.gstatic.com/firebasejs/12.0.0/firebase-auth.js';
import { showLoginRegisterModal, sanitizeHTML, updateUserInfoDisplay } from './utils.js';

const loginBtn = document.getElementById('login-btn');
const userInfoSpan = document.getElementById('user-info');

// ➤ إضافة إعادة التوجيه للصفحة الرئيسية عند تسجيل الخروج أو عدم التحقق
onAuthStateChanged(auth, user => {
  if (!user) {
    // 1. مسح البيانات الحساسة من localStorage
    localStorage.removeItem('selectedWorkerUID');
    
    // 2. إعادة التوجيه للصفحة الرئيسية
    const protectedPages = ['/worker_list.html', '/worker_dashboard.html', '/booking.html'];
    if (protectedPages.some(page => window.location.pathname.endsWith(page))) {
      window.location.href = 'index.html';
      return;
    }
  }
  
  // Check if the current page is index.html
  if (window.location.pathname === '/' || window.location.pathname === '/index.html') {
    if (user) {
      // User is signed in
      if (loginBtn) loginBtn.style.display = 'none';
      updateUserInfoDisplay(user);
    } else {
      // User is signed out
      if (loginBtn) loginBtn.style.display = 'inline';
      if (userInfoSpan) {
        userInfoSpan.style.display = 'none';
        userInfoSpan.innerHTML = ''; // Clear user info
      }
    }
  } else {
    // For other pages, apply the auth guard logic
    if (!user) {
      // المستخدم غير مسجل الدخول ويحاول الوصول لصفحة محمية (غير index)
      // اعرض الـ Modal بدلاً من إعادة التوجيه المباشر
      showLoginRegisterModal();
      // لمنع عرض محتوى الصفحة المحمية خلف المودال، يمكن إضافة بعض التنسيقات
      // أو التأكد من أن المودال يغطي الصفحة بالكامل.
      // لا نعيد التوجيه هنا تلقائياً للسماح للمستخدم بالتفاعل مع المودال.
    }
  }
});

export function setupLogout(selector) {
  const btn = document.querySelector(selector);
  if (btn) {
    btn.addEventListener('click', async () => {
      await signOut(auth);
      // مسح جميع البيانات الحساسة من localStorage عند تسجيل الخروج
      localStorage.removeItem('selectedWorkerUID');
      window.location.href = 'index.html';
    });
  }
}


====================================
File: js/i18n.js
====================================
// Internationalization logic placeholder
// Add your i18n functions here

====================================
File: js/env.js
====================================
// env.js
// Firebase environment variables
export const firebaseEnv = {
  apiKey: "AIzaSyC9WjidZuOQbj9SRTW4_rzkwBWrTHn8-TE",
  authDomain: "mawidy-app.firebaseapp.com",
  projectId: "mawidy-app",
  storageBucket: "mawidy-app.firebasestorage.app",
  messagingSenderId: "289571755548",
  appId: "1:289571755548:web:cc4108a8d7f5a8458eb1d9",
  measurementId: "G-JFE2TYVCWP"
};
====================================
File: lang/ar.json
====================================
{
    "welcome": "مرحبا بك في مشروع Mawidy"
}

====================================
File: lang/en.json
====================================
{
    "welcome": "Welcome to Mawidy Project"
}

====================================
File: README.md
====================================
# Mawidy - منصة حجز مواعيد الحلاقة والتجميل

## نظرة عامة
Mawidy هي منصة رقمية حديثة تهدف إلى تسهيل عملية حجز مواعيد الحلاقة والتجميل. تم تصميم المنصة بعناية فائقة لتوفر تجربة مستخدم استثنائية مع واجهة عصرية ومتجاوبة.

## ✨ التحسينات الجديدة المطبقة

### 🎨 تحسينات التصميم والواجهة

#### 1. نظام الألوان المحسن
- **متغيرات CSS محسنة**: تم إضافة متغيرات جديدة للألوان والتدرجات
- **تدرجات لونية**: استخدام تدرجات حديثة للخلفيات والعناصر
- **نظام ألوان متسق**: توحيد الألوان عبر جميع صفحات المشروع

#### 2. التأثيرات البصرية المتقدمة
- **ظلال محسنة**: ظلال ديناميكية تتغير عند التفاعل
- **انتقالات سلسة**: استخدام cubic-bezier للحصول على انتقالات طبيعية
- **تأثيرات الحركة**: إضافة تأثيرات bounce وpulse وfadeIn
- **تأثيرات الإضاءة**: تأثيرات shimmer على الأزرار

#### 3. تحسينات الخطوط والنصوص
- **أوزان خطوط متنوعة**: من light إلى bold
- **تسلسل هرمي واضح**: أحجام وأوزان مختلفة للعناوين
- **تباعد محسن**: line-height وletter-spacing محسنة

### 🔧 تحسينات تجربة المستخدم (UX)

#### 1. التفاعلية المحسنة
- **تأثيرات Hover متقدمة**: تحويلات وتكبير العناصر
- **ردود فعل بصرية**: تغيير الألوان والأحجام عند التفاعل
- **مؤشرات التحميل**: spinner وpulse animations
- **تأثيرات Focus**: إطارات واضحة للوصولية

#### 2. الاستجابة والتكيف
- **تصميم متجاوب محسن**: يعمل بسلاسة على جميع الأجهزة
- **نقاط توقف محسنة**: breakpoints مُحدثة للشاشات المختلفة
- **تخطيطات مرنة**: Grid وFlexbox محسنة

#### 3. إمكانية الوصول (Accessibility)
- **دعم قارئ الشاشة**: aria-labels وroles محسنة
- **تباين عالي**: دعم high contrast mode
- **تقليل الحركة**: دعم prefers-reduced-motion
- **تنقل بلوحة المفاتيح**: focus styles واضحة

### 🎯 تحسينات الصفحات المحددة

#### 1. الصفحة الرئيسية
- **Hero Section محسن**: خلفية متدرجة مع نمط زخرفي
- **بطاقات الخدمات**: تأثيرات hover وتحويلات 3D
- **أزرار تفاعلية**: أيقونات وتأثيرات shimmer

#### 2. صفحات تسجيل الدخول والتسجيل
- **حقول إدخال محسنة**: تأثيرات focus وvalidation
- **أيقونات توضيحية**: أيقونات للحقول والأزرار
- **تأثيرات بصرية**: خطوط علوية ملونة للبطاقات

#### 3. صفحة قائمة العمال
- **بطاقات عمال محسنة**: تأثيرات hover وتدرجات خلفية
- **فلاتر تفاعلية**: تأثيرات focus وhover
- **حالات التحميل**: animations للتحميل والحالات الفارغة

#### 4. صفحة الحجز
- **خيارات الخدمة**: بطاقات تفاعلية مع تأثيرات اختيار
- **ملخص السعر**: تصميم محسن مع تدرجات
- **معلومات العامل**: عرض محسن مع تأثيرات

#### 5. لوحة تحكم العامل
- **إحصائيات تفاعلية**: بطاقات مع تأثيرات وأيقونات ملونة
- **بطاقات المواعيد**: تصميم محسن مع حالات مختلفة
- **أزرار الإجراءات**: تأثيرات hover وshimmer

#### 6. صفحة التحقق من OTP
- **حقول OTP محسنة**: تأثيرات focus وانتقال تلقائي
- **مؤقت إعادة الإرسال**: عداد تنازلي تفاعلي
- **لصق تلقائي**: دعم لصق الرمز من الحافظة

### 🌙 ميزات إضافية

#### 1. دعم الوضع المظلم
- **متغيرات ديناميكية**: تغيير تلقائي حسب تفضيل النظام
- **ألوان محسنة**: ألوان مناسبة للوضع المظلم

#### 2. تحسينات الأداء
- **انتقالات محسنة**: استخدام transform بدلاً من position
- **تحميل مُحسن**: lazy loading للصور والمحتوى
- **ذاكرة التخزين المؤقت**: استخدام أمثل للـ CSS

#### 3. التوافق مع المتصفحات
- **دعم شامل**: متوافق مع جميع المتصفحات الحديثة
- **Fallbacks**: بدائل للميزات غي�� المدعومة
- **Progressive Enhancement**: تحسين تدريجي للميزات

## 🚀 الميزات الرئيسية

### للعملاء
- **تصفح العمال**: عرض قائمة بالحلاقين المتاحين مع التقييمات
- **حجز المواعيد**: نظام حجز سهل ومرن
- **إدارة الحساب**: تسجيل دخول وإنشاء حساب محسن
- **التحقق الآمن**: نظام OTP للتحقق من الهوية

### للعمال
- **لوحة تحكم شاملة**: إدارة المواعيد والإحصائيات
- **إدارة المواعيد**: قبول أو رفض طلبات الحجز
- **ملف شخصي**: عرض المعلومات والتقييمات

## 🛠️ التقنيات المستخدمة

### Frontend
- **HTML5**: هيكل دلالي محسن
- **CSS3**: متغيرات، Grid، Flexbox، Animations
- **JavaScript (ES6+)**: وحدات وميزات حديثة
- **Font Awesome**: أيقونات عالية الجودة

### Backend & Database
- **Firebase**: قاعدة بيانات وتوثيق
- **Firestore**: تخزين البيانات في الوقت الفعلي
- **Firebase Auth**: نظام توثيق آمن

## 📱 التوافق والاستجابة

### أحجام الشاشات المدعومة
- **Desktop**: 1200px وأكثر
- **Tablet**: 768px - 1199px
- **Mobile**: 320px - 767px

### المتصفحات المدعومة
- Chrome 80+
- Firefox 75+
- Safari 13+
- Edge 80+

## 🎨 دليل الألوان

```css
:root {
  --color-primary: #2C2C2C;        /* الرمادي الداكن */
  --color-secondary: #D32F2F;      /* الأحمر */
  --color-accent: #FFC107;         /* الأصفر الذهبي */
  --color-success: #4CAF50;        /* الأخضر */
  --color-warning: #FF9800;        /* البرتقالي */
  --color-error: #F44336;          /* الأحمر الفاتح */
  --background-main: #FFF9C4;      /* الأصفر الفاتح */
  --card-background: #FFFFFF;      /* الأبيض */
}
```

## 📐 نظام التخطيط

### الحاويات
- **Container**: max-width: 1200px
- **Padding**: 20px على الجانبين
- **Margins**: متسقة عبر المشروع

### المسافات
- **Small**: 8px
- **Medium**: 16px
- **Large**: 24px
- **XLarge**: 32px

## 🔄 الحركات والانتقالات

### المدة الزمنية
- **Fast**: 0.2s
- **Normal**: 0.3s
- **Slow**: 0.5s

### منحنيات التسارع
- **Standard**: cubic-bezier(0.4, 0, 0.2, 1)
- **Decelerate**: cubic-bezier(0, 0, 0.2, 1)
- **Accelerate**: cubic-bezier(0.4, 0, 1, 1)

## 📋 قائمة التحقق من الجودة

### ✅ تم التنفيذ
- [x] تصميم متجاوب كامل
- [x] تأثيرات بصرية محسنة
- [x] إمكانية الوصول
- [x] دعم الوضع المظلم
- [x] تحسينات الأداء
- [x] توافق المتصفحات
- [x] تجربة مستخدم محسنة
- [x] تصميم متسق
- [x] تفاعلية محسنة
- [x] حالات التحميل والأخطاء

## 🚀 كيفية التشغيل

1. **استنساخ المشروع**
   ```bash
   git clone [repository-url]
   cd mawidy-project
   ```

2. **فتح المشروع**
   - افتح `index.html` في المتصفح
   - أو استخدم خادم محلي مثل Live Server

3. **إعداد Firebase** (اختياري)
   - أنشئ مشروع Firebase جديد
   - أضف إعدادات Firebase في `js/firebase-config.js`

## 🤝 المساهمة

نرحب بالمساهمات! الرجاء اتباع هذه الخطوات:

1. Fork المشروع
2. أنشئ branch جديد للميزة
3. Commit التغييرات
4. Push إلى Branch
5. افتح Pull Request

## 📄 الترخيص

هذا المشروع مرخص تحت رخصة MIT - راجع ملف LICENSE للتفاصيل.

## 📞 التواصل

للاستفسارات والدعم:
- Email: support@mawidy.com
- Website: www.mawidy.com

---

**تم تطوير هذا المشروع بعناية فائقة لتوفير أفضل تجربة مستخدم ممكنة في مجال حجز مواعيد الحلاقة والتجميل.**

====================================
File: firebase.json
====================================
{
  "hosting": {
    "headers": [
      {
        "source": "**/*.@(js|css)",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "max-age=31536000"
          }
        ]
      },
      {
        "source": "**/*.@(html|json)",
        "headers": [
          {
            "key": "Content-Security-Policy",
            "value": "default-src 'self'; script-src 'self' https://apis.google.com https://www.gstatic.com; object-src 'none'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data:; connect-src 'self' https://identitytoolkit.googleapis.com; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; block-all-mixed-content; upgrade-insecure-requests;"
          },
          {
            "key": "X-Content-Type-Options",
            "value": "nosniff"
          },
          {
            "key": "X-Frame-Options",
            "value": "DENY"
          },
          {
            "key": "X-XSS-Protection",
            "value": "1; mode=block"
          }
        ]
      }
    ]
  }
}